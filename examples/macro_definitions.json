{
    "macros": {
      "docstring_schema": {
        "anyOf": [
          {
            "description": "This macro is used to append(PREFIX/SUFFIX) string to job_description field of AtsJobPost. Atleast one of (PREFIX/SUFFIX) is required.\n",
            "title": "Append to job post description",
            "macro_name": "adapter_macros.append_to_job_post_description",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "posted_for"
                ],
                "properties": {
                  "posted_for": {
                    "type": "array",
                    "description": "list of allowed values for posted_for used to filter ats_job_posts",
                    "items": {
                      "type": "string",
                      "description": "Allowed values for posted_for used to filter ats_job_posts",
                      "enum": [
                        "internal",
                        "external",
                        "all"
                      ]
                    }
                  },
                  "job_description_prefix": {
                    "type": "string",
                    "description": "Prefix to be added to job post's description"
                  },
                  "job_description_suffix": {
                    "type": "string",
                    "description": "Suffix to be added to job post's description"
                  },
                  "evaluate": {
                    "type": "boolean",
                    "default": false,
                    "description": "set true to consider the job_description_prefix/job_description_suffix as jinja template instead of a string constant"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.append_to_job_post_description"
                ],
                "readOnly": true,
                "enumNames": [
                  "Append to job post description"
                ],
                "default": "adapter_macros.append_to_job_post_description",
                "const": "adapter_macros.append_to_job_post_description",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "Returns True if candidate has any IJP (Internal Job Portal) application.\n",
            "title": "Has Internal (IJP) Application",
            "macro_name": "adapter_macros.check_cand_has_ijp_application",
            "macro_type": "transform",
            "supported_entity_types": [
              "candidate"
            ],
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.check_cand_has_ijp_application"
                ],
                "readOnly": true,
                "enumNames": [
                  "Has Internal (IJP) Application"
                ],
                "default": "adapter_macros.check_cand_has_ijp_application",
                "const": "adapter_macros.check_cand_has_ijp_application",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to add fields to the URL.\n",
            "title": "Get Extra Fields For endpoint",
            "macro_name": "adapter_macros.default_fetch_macro",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "kenexa",
              "icims",
              "orc"
            ],
            "type": "object",
            "required": [
              "field"
            ],
            "properties": {
              "field": {
                "type": "string",
                "description": "The extra field to be added to the URL",
                "title": "Extra Field"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.default_fetch_macro"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Extra Fields For endpoint"
                ],
                "default": "adapter_macros.default_fetch_macro",
                "const": "adapter_macros.default_fetch_macro",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract the answer value of a specific application question on the candidate object.\n",
            "title": "Extract Answer (Application Questions)",
            "macro_name": "adapter_macros.extract_answer_id_from_qna",
            "macro_type": "transform",
            "supported_entity_types": [
              "application"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "question_id"
                ],
                "properties": {
                  "question_id": {
                    "type": "string",
                    "description": "Unique identifier of the question.",
                    "examples": [
                      "q_source"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.extract_answer_id_from_qna"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Answer (Application Questions)"
                ],
                "default": "adapter_macros.extract_answer_id_from_qna",
                "const": "adapter_macros.extract_answer_id_from_qna",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract the answer value of a specific application question on the candidate object.\n",
            "title": "Extract Answer (Application Questions)",
            "macro_name": "adapter_macros.extract_app_qna",
            "macro_type": "transform",
            "supported_entity_types": [
              "candidate"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "question_id"
                ],
                "properties": {
                  "question_id": {
                    "type": "string",
                    "description": "Unique identifier of the question.",
                    "examples": [
                      "q_city"
                    ]
                  },
                  "question_id_suffixes": {
                    "type": "array",
                    "title": "List of suffix",
                    "description": "If an answer for the 'question_id' is missing, then it looks for > an answer using question_id + suffix combination",
                    "items": {
                      "title": "Question id suffix",
                      "type": "string"
                    },
                    "examples": [
                      [
                        "_KR",
                        "_GB",
                        "_US"
                      ]
                    ]
                  },
                  "default": {
                    "type": "string",
                    "description": "Fallback value if data does not exist for the given question_id",
                    "examples": [
                      "City Not Found"
                    ]
                  },
                  "return_answer_label": {
                    "type": "boolean",
                    "description": "If True, returns the answer label instead of the answer value. In case answer label is not found, default is returned.\n",
                    "examples": [
                      true
                    ],
                    "default": false
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.extract_app_qna"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Answer (Application Questions)"
                ],
                "default": "adapter_macros.extract_app_qna",
                "const": "adapter_macros.extract_app_qna",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to use a default value for a certain existing field,\n in case value of that field is not found.\n",
            "title": "Get Value or Default",
            "macro_name": "adapter_macros.extract_attr_and_default",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "attr"
                ],
                "properties": {
                  "attr": {
                    "type": "string",
                    "description": "field name whose value needs to be extracted.",
                    "examples": [
                      "gender"
                    ]
                  },
                  "default": {
                    "oneOf": [
                      {
                        "type": "string",
                        "title": "Value (String)"
                      },
                      {
                        "type": "integer",
                        "title": "Value (Integer)"
                      },
                      {
                        "type": "boolean",
                        "title": "Value (Boolean)"
                      }
                    ],
                    "description": "it will be the fallback/default value\n",
                    "examples": [
                      "Not Specified"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.extract_attr_and_default"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Value or Default"
                ],
                "default": "adapter_macros.extract_attr_and_default",
                "const": "adapter_macros.extract_attr_and_default",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "Extract the comma separated value at a particular index on a given field.\n",
            "title": "Extract Value from CSV",
            "macro_name": "adapter_macros.extract_attr_csv_value",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "attr"
                ],
                "properties": {
                  "attr": {
                    "type": "string",
                    "description": "Field Name whose value needs be extracted.",
                    "examples": [
                      "address"
                    ]
                  },
                  "index": {
                    "type": "integer",
                    "description": "index of the value after splitting by comma ',' (0 based).",
                    "examples": [
                      1
                    ]
                  },
                  "default": {
                    "type": "string",
                    "description": "Fallback value if data does not exist.",
                    "examples": [
                      "Not Found"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.extract_attr_csv_value"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Value from CSV"
                ],
                "default": "adapter_macros.extract_attr_csv_value",
                "const": "adapter_macros.extract_attr_csv_value",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract the current employer of the candidate object.\n",
            "title": "Get Current Employer",
            "macro_name": "adapter_macros.extract_cand_current_employer",
            "macro_type": "transform",
            "supported_entity_types": [
              "candidate"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "default": {
                    "type": "string",
                    "description": "Fallback value if data does not exist.",
                    "examples": [
                      "Not Found"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.extract_cand_current_employer"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Current Employer"
                ],
                "default": "adapter_macros.extract_cand_current_employer",
                "const": "adapter_macros.extract_cand_current_employer",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract the candidate experience in months.\n",
            "title": "Get Experience (Months)",
            "macro_name": "adapter_macros.extract_cand_exp_num_months",
            "macro_type": "transform",
            "supported_entity_types": [
              "candidate"
            ],
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.extract_cand_exp_num_months"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Experience (Months)"
                ],
                "default": "adapter_macros.extract_cand_exp_num_months",
                "const": "adapter_macros.extract_cand_exp_num_months",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract the linkedin URL of the candidate object.\n",
            "title": "Get Linkedin URL",
            "macro_name": "adapter_macros.extract_cand_linkedin_url",
            "macro_type": "transform",
            "supported_entity_types": [
              "candidate"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "default": {
                    "type": "string",
                    "description": "Fallback value if data does not exist.",
                    "examples": [
                      "Not Found"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.extract_cand_linkedin_url"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Linkedin URL"
                ],
                "default": "adapter_macros.extract_cand_linkedin_url",
                "const": "adapter_macros.extract_cand_linkedin_url",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract the location state of the candidate object.\n",
            "title": "Get Location (State)",
            "macro_name": "adapter_macros.extract_cand_location_state",
            "macro_type": "transform",
            "supported_entity_types": [
              "candidate"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "default": {
                    "type": "string",
                    "description": "Fallback value if data does not exist.",
                    "examples": [
                      "State Not Found"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.extract_cand_location_state"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Location (State)"
                ],
                "default": "adapter_macros.extract_cand_location_state",
                "const": "adapter_macros.extract_cand_location_state",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "Fetch the question based on question id and map the answer to either a different question's answer or a string value. \"<QUESTION_ID>\": {\n                \"remap_answer\": <True|False>,\n                \"answer_mapping_fields\": {\n                    \"<QUESTION_ID_ANSWER>\": \"<STRING VALUE> | <Question ID to fetch Answer>\"\n                }\n        }\nif flag remap_answer is TRUE - extract and return the answer value from different question. if flag remap_answer is False or Not Provided - return string value associated with the answer. If multiple questions ids are given following will hold true. The value will be returned whenever the first question id match is found and in order of the question ids given as input Scenario 1: remap_answer is False return <STRING VALUE> from answer_mapping_fields for the answer of the given question id Scenario 2: remap_answer is True return answer from the question id provided in the answer_mapping_fields Scenario 3: Map answer for question_id In this case answer_mapping_fields is empty and remap_answer flag is ignored\n",
            "title": "Extract/Remap Answer (Question)",
            "macro_name": "adapter_macros.extract_candidate_qna",
            "macro_type": "transform",
            "supported_entity_types": [
              "candidate"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "question_to_fields": {
                    "type": "object",
                    "propertyNames": {
                      "type": "string",
                      "key_title": "Question ID",
                      "value_title": "Mapping"
                    },
                    "patternProperties": {
                      "": {
                        "type": "object",
                        "properties": {
                          "remap_answer": {
                            "description": "If True extract and return the answer value from different question otherwise will return the string value associated with the answer",
                            "type": "boolean"
                          },
                          "answer_mapping_fields": {
                            "type": "object",
                            "propertyNames": {
                              "type": "string",
                              "key_title": "Answer (source)",
                              "value_title": "String Value / Question ID to fetch Answer"
                            },
                            "patternProperties": {
                              "": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "boolean"
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.extract_candidate_qna"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract/Remap Answer (Question)"
                ],
                "default": "adapter_macros.extract_candidate_qna",
                "const": "adapter_macros.extract_candidate_qna",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to simply create a specific ATS object from a json dict that can be provided in the kwargs\n",
            "title": "Extract Object from Json Macro",
            "macro_name": "adapter_macros.extract_object_from_json",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "object_type",
                  "object_data_json"
                ],
                "properties": {
                  "object_data_json": {
                    "title": "Json dictionary to be returned",
                    "anyOf": [
                      {
                        "type": "object",
                        "description": "the dict that needs to be mapped"
                      },
                      {
                        "type": "array",
                        "description": "the array of dicts that needs to be mapped",
                        "items": {
                          "type": "object"
                        }
                      }
                    ],
                    "examples": [
                      ""
                    ]
                  },
                  "object_type": {
                    "type": "string",
                    "description": "type of object - possible values [AtsQuestion, AtsQuestionnaire]",
                    "enum": [
                      "AtsQuestion",
                      "AtsQuestionnaire"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.extract_object_from_json"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Object from Json Macro"
                ],
                "default": "adapter_macros.extract_object_from_json",
                "const": "adapter_macros.extract_object_from_json",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to set is_open flag for the position based on the status of the position. The statuses configured for this macro will be considered as open positions.\n",
            "title": "Map Open Positions",
            "macro_name": "adapter_macros.map_open_positions",
            "macro_type": "transform",
            "supported_entity_types": [
              "position"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "statuses"
                ],
                "properties": {
                  "statuses": {
                    "type": "array",
                    "description": "list of statuses that are considered as open positions",
                    "items": {
                      "type": "string",
                      "description": "Statuses that are considered as open positions",
                      "examples": [
                        "Open",
                        "Active"
                      ]
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.map_open_positions"
                ],
                "readOnly": true,
                "enumNames": [
                  "Map Open Positions"
                ],
                "default": "adapter_macros.map_open_positions",
                "const": "adapter_macros.map_open_positions",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to remap the value of certain existing field.\n",
            "title": "Remap Value",
            "macro_name": "adapter_macros.remap_value",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "field_name",
                  "value_map"
                ],
                "properties": {
                  "field_name": {
                    "type": "string",
                    "description": "field name whose value needs to be remapped.",
                    "examples": [
                      "gender"
                    ]
                  },
                  "value_map": {
                    "type": "object",
                    "title": "List of Mappings",
                    "propertyNames": {
                      "type": "string",
                      "key_title": "Map (From)",
                      "value_title": "Map (To)"
                    },
                    "patternProperties": {
                      "": {
                        "type": "string"
                      }
                    },
                    "description": "it will be a map of key: value pairs.\n",
                    "examples": [
                      "{'m': 'Male', 'f': 'Female'}"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.remap_value"
                ],
                "readOnly": true,
                "enumNames": [
                  "Remap Value"
                ],
                "default": "adapter_macros.remap_value",
                "const": "adapter_macros.remap_value",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to set additional fields for candidate or applications. This macro supports 3 sources to map (1) - hardcoded value using dest_value (2) - pulling value from qna using question_id (3) - any field from the entity_obj using source_field\n",
            "title": "Set Additional Fields",
            "macro_name": "adapter_macros.set_additional_fields",
            "macro_type": "write_back",
            "supported_entity_types": [
              "candidate",
              "application"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "field_details"
                ],
                "properties": {
                  "field_details": {
                    "type": "object",
                    "required": [
                      "dest_path"
                    ],
                    "properties": {
                      "question_id": {
                        "type": "string",
                        "description": "If question_id is provided, it works only on application object and it extracts answers given for the given question_id and sets them to the destination which is also configurable. We can also convert date to strings by configuring field_type to 'date'\n"
                      },
                      "source_field": {
                        "type": "string",
                        "description": "This field is used to extract the value from the corresponding object(candidate or application) and set it."
                      },
                      "dest_value": {
                        "oneOf": [
                          {
                            "type": "string",
                            "title": "Value (String)"
                          },
                          {
                            "type": "integer",
                            "title": "Value (Integer)"
                          },
                          {
                            "type": "boolean",
                            "title": "Value (Boolean)"
                          }
                        ],
                        "description": "This field is used to send hardcoded values in the output payload."
                      },
                      "dest_path": {
                        "type": "string",
                        "description": "the destination path where we store the answer for given question"
                      },
                      "field_type": {
                        "type": "string",
                        "description": "if field type is set to date, then we convert the date to string before setting it to destination path"
                      }
                    },
                    "additionalProperties": false
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.set_additional_fields"
                ],
                "readOnly": true,
                "enumNames": [
                  "Set Additional Fields"
                ],
                "default": "adapter_macros.set_additional_fields",
                "const": "adapter_macros.set_additional_fields",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used set ats user groups to a position. Internally it uses user_groups of user_groups_display_config to map ATS User Groups to EF User Groups\n",
            "title": "Set User Groups",
            "macro_name": "adapter_macros.set_ats_user_groups",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "values"
                ],
                "properties": {
                  "values": {
                    "type": "string",
                    "description": "Comma separated list of locations of User Groups from ATS",
                    "examples": [
                      "india, uk, global"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.set_ats_user_groups"
                ],
                "readOnly": true,
                "enumNames": [
                  "Set User Groups"
                ],
                "default": "adapter_macros.set_ats_user_groups",
                "const": "adapter_macros.set_ats_user_groups",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used set ats user roles to a position. Internally it uses roles_config to validate added role to be mapped to ATS Users.\n",
            "title": "Set User Roles",
            "macro_name": "adapter_macros.set_ats_user_roles_for_position",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "roles",
                  "field"
                ],
                "properties": {
                  "roles": {
                    "type": "array",
                    "description": "list of roles that are to be added to ats users",
                    "items": {
                      "type": "string",
                      "description": "Valid roles to be added to ats users. It must be configured in roles config before usage.",
                      "examples": [
                        "custom_role",
                        "Sourcer"
                      ]
                    }
                  },
                  "field": {
                    "type": "string",
                    "description": "Position attribute containing Ats Users for which we need to update ats roles field.",
                    "enum": [
                      "recruiter",
                      "hiring_manager",
                      "sourcers",
                      "coordinators",
                      "followers"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.set_ats_user_roles_for_position"
                ],
                "readOnly": true,
                "enumNames": [
                  "Set User Roles"
                ],
                "default": "adapter_macros.set_ats_user_roles_for_position",
                "const": "adapter_macros.set_ats_user_roles_for_position",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to combine the value of multiple fields into a template. it supports jinja templates format so can be used for dynamic values as well.\n",
            "title": "Substitute Template",
            "macro_name": "adapter_macros.substitute_template",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "template_string"
                ],
                "properties": {
                  "template_string": {
                    "type": "string",
                    "description": "Template to substitute the value of the fields in.",
                    "examples": [
                      "{{ 'Contingent Worker' if 'contingent_worker_id' in candidate.custom_info else None }}",
                      "{{'Yes' if position.custom_info.contingent_id == '1' else 'No'}}"
                    ]
                  },
                  "use_native_typing": {
                    "type": "boolean",
                    "default": true,
                    "description": "if set to false it will force convert the output to string type as \"1\". if set to true it will be 1 (int).\n"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adapter_macros.substitute_template"
                ],
                "readOnly": true,
                "enumNames": [
                  "Substitute Template"
                ],
                "default": "adapter_macros.substitute_template",
                "const": "adapter_macros.substitute_template",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract custom data for ADP. We look for data inside customFieldGroup>codeFields which is a list.\n",
            "title": "Extract Custom Field (ADP)",
            "macro_name": "adp_macros.extract_custom_field",
            "macro_type": "transform",
            "supported_systems": [
              "adp"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "field"
                ],
                "properties": {
                  "field": {
                    "type": "string",
                    "description": "field value to be used for comparison with nameCode>codeValue"
                  },
                  "value": {
                    "type": "string",
                    "description": "value of field to be returned after doing all comparisons",
                    "default": "longName"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "adp_macros.extract_custom_field"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Custom Field (ADP)"
                ],
                "default": "adp_macros.extract_custom_field",
                "const": "adp_macros.extract_custom_field",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to transform candidate certifications.\n",
            "title": "Transform certifications",
            "macro_name": "avature_macros.candidate_certifications",
            "macro_type": "transform",
            "supported_systems": [
              "avature"
            ],
            "supported_entity_types": [
              "candidate"
            ],
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "avature_macros.candidate_certifications"
                ],
                "readOnly": true,
                "enumNames": [
                  "Transform certifications"
                ],
                "default": "avature_macros.candidate_certifications",
                "const": "avature_macros.candidate_certifications",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to transform candidate education.\n",
            "title": "Transform education",
            "macro_name": "avature_macros.candidate_education",
            "macro_type": "transform",
            "supported_systems": [
              "avature"
            ],
            "supported_entity_types": [
              "candidate"
            ],
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "avature_macros.candidate_education"
                ],
                "readOnly": true,
                "enumNames": [
                  "Transform education"
                ],
                "default": "avature_macros.candidate_education",
                "const": "avature_macros.candidate_education",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to transform experience.\n",
            "title": "Transform experience",
            "macro_name": "avature_macros.candidate_experience",
            "macro_type": "transform",
            "supported_systems": [
              "avature"
            ],
            "supported_entity_types": [
              "candidate"
            ],
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "avature_macros.candidate_experience"
                ],
                "readOnly": true,
                "enumNames": [
                  "Transform experience"
                ],
                "default": "avature_macros.candidate_experience",
                "const": "avature_macros.candidate_experience",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to get the match score for candidate against position.\n",
            "title": "Transform projects",
            "macro_name": "avature_macros.candidate_match_score",
            "macro_type": "transform",
            "supported_systems": [
              "avature"
            ],
            "supported_entity_types": [
              "candidate"
            ],
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "avature_macros.candidate_match_score"
                ],
                "readOnly": true,
                "enumNames": [
                  "Transform projects"
                ],
                "default": "avature_macros.candidate_match_score",
                "const": "avature_macros.candidate_match_score",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to transform candidate projects.\n",
            "title": "Transform projects",
            "macro_name": "avature_macros.candidate_projects",
            "macro_type": "transform",
            "supported_systems": [
              "avature"
            ],
            "supported_entity_types": [
              "candidate"
            ],
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "avature_macros.candidate_projects"
                ],
                "readOnly": true,
                "enumNames": [
                  "Transform projects"
                ],
                "default": "avature_macros.candidate_projects",
                "const": "avature_macros.candidate_projects",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to write custom fields into a csv file.\n",
            "title": "Write to CSV",
            "macro_name": "avature_macros.create_csv",
            "macro_type": "transform",
            "supported_systems": [
              "avature"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "column_details": {
                    "description": "The column header and the value or transformation macro",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "header": {
                          "description": "The column header",
                          "type": "string"
                        },
                        "value": {
                          "description": "The column value",
                          "type": "string"
                        },
                        "macro": {
                          "description": "The macro to be used to convert the value for column",
                          "type": "string",
                          "default": "str_utils.substitute_template"
                        },
                        "kwargs": {
                          "type": "object",
                          "description": "[optional] kwargs for macro"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "delimiter": {
                    "title": "delimiter",
                    "description": "Delimiter for the column headers and values",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "avature_macros.create_csv"
                ],
                "readOnly": true,
                "enumNames": [
                  "Write to CSV"
                ],
                "default": "avature_macros.create_csv",
                "const": "avature_macros.create_csv",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to get the answers for position specific questions.\n",
            "title": "Transform projects",
            "macro_name": "avature_macros.position_question_answers",
            "macro_type": "transform",
            "supported_systems": [
              "avature"
            ],
            "supported_entity_types": [
              "application"
            ],
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "avature_macros.position_question_answers"
                ],
                "readOnly": true,
                "enumNames": [
                  "Transform projects"
                ],
                "default": "avature_macros.position_question_answers",
                "const": "avature_macros.position_question_answers",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to convert date to another date-type format.\n",
            "title": "Convert Date to Format",
            "macro_name": "convert_date_format",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "input_date": {
                    "title": "Input date",
                    "type": "string",
                    "description": "the date string that needs to be converted"
                  },
                  "format": {
                    "title": "Format",
                    "type": "string",
                    "description": "the new format of date to be converted into"
                  },
                  "day_first": {
                    "title": "Day first",
                    "type": "boolean",
                    "description": "whether day is first in the provided input date string",
                    "default": false
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "convert_date_format"
                ],
                "readOnly": true,
                "enumNames": [
                  "Convert Date to Format"
                ],
                "default": "convert_date_format",
                "const": "convert_date_format",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to convert data from one currency into another\n",
            "title": "Convert Currency",
            "macro_name": "currency_macros.convert_currency",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "multiplier": {
                    "title": "Multiplier",
                    "type": "number",
                    "description": "the multipler to convert currency",
                    "examples": [
                      "2.35"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "currency_macros.convert_currency"
                ],
                "readOnly": true,
                "enumNames": [
                  "Convert Currency"
                ],
                "default": "currency_macros.convert_currency",
                "const": "currency_macros.convert_currency",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to convert string type dates to standard timestamp.\n",
            "title": "Convert String Datetime to Timestamp",
            "macro_name": "date_macros.convert_datetime_to_timestamp",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "date_string"
                ],
                "properties": {
                  "date_string": {
                    "title": "Date String",
                    "type": "string",
                    "description": "the date/time string for conversion"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "date_macros.convert_datetime_to_timestamp"
                ],
                "readOnly": true,
                "enumNames": [
                  "Convert String Datetime to Timestamp"
                ],
                "default": "date_macros.convert_datetime_to_timestamp",
                "const": "date_macros.convert_datetime_to_timestamp",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to convert epoch timestamp to given date-type format.\n",
            "title": "Convert epoch ts to given date format",
            "macro_name": "date_macros.convert_epoch_ts_to_date_format",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "format": {
                    "title": "Format",
                    "type": "string",
                    "description": "the date format to be converted into.",
                    "default": "%Y-%m-%d"
                  },
                  "epoch_ts": {
                    "title": "Epoch ts",
                    "type": "string",
                    "description": "the date in epoch ts"
                  },
                  "in_milliseconds": {
                    "title": "In Milliseconds",
                    "type": "boolean",
                    "description": "boolean flag to indicate if epoch ts is in milliseconds. If not provided or False, assumes epoch_ts in seconds",
                    "default": false
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "date_macros.convert_epoch_ts_to_date_format"
                ],
                "readOnly": true,
                "enumNames": [
                  "Convert epoch ts to given date format"
                ],
                "default": "date_macros.convert_epoch_ts_to_date_format",
                "const": "date_macros.convert_epoch_ts_to_date_format",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to convert string type dates to datetime objects.\n",
            "title": "Convert String Date to datetime",
            "macro_name": "date_macros.convert_to_datetime_from_field",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "field"
                ],
                "properties": {
                  "field": {
                    "title": "Field",
                    "type": "string",
                    "description": "the string used for lookup",
                    "examples": [
                      "employee.role_change_date"
                    ]
                  },
                  "return_values": {
                    "title": "Return Values",
                    "type": "string",
                    "description": "the value(s) returned by the macro",
                    "default": "all",
                    "enum": [
                      "all",
                      "first"
                    ],
                    "enumNames": [
                      "All",
                      "First"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "date_macros.convert_to_datetime_from_field"
                ],
                "readOnly": true,
                "enumNames": [
                  "Convert String Date to datetime"
                ],
                "default": "date_macros.convert_to_datetime_from_field",
                "const": "date_macros.convert_to_datetime_from_field",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to convert string type dates to standard timestamp.\n",
            "title": "Convert String Date to Timestamp",
            "macro_name": "date_macros.convert_to_timestamp",
            "macro_type": "transform",
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "date_macros.convert_to_timestamp"
                ],
                "readOnly": true,
                "enumNames": [
                  "Convert String Date to Timestamp"
                ],
                "default": "date_macros.convert_to_timestamp",
                "const": "date_macros.convert_to_timestamp",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to return current datetime object of the time.\n",
            "title": "Get Current Datetime",
            "macro_name": "date_macros.get_current_datetime",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "timezone": {
                    "title": "Timezone",
                    "type": "string",
                    "description": "the string used to mention timezone",
                    "examples": [
                      "UTC"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "date_macros.get_current_datetime"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Current Datetime"
                ],
                "default": "date_macros.get_current_datetime",
                "const": "date_macros.get_current_datetime",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to convert strings/integer type dates back to strings in a different format. We have 3 inputs - the format to be converted into, the return_type and a separator only if return_type is string\n",
            "title": "Convert Date Field to String",
            "macro_name": "date_macros.get_date_field_in_given_format",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "format": {
                    "title": "Format",
                    "type": "string",
                    "description": "the new format of date to be converted into"
                  },
                  "return_type": {
                    "title": "Return Type",
                    "type": "string",
                    "description": "the return type of macro - can be list, string etc"
                  },
                  "separator": {
                    "title": "Separator",
                    "type": "string",
                    "description": "the separator between multiple dates. this needs to be configured only if the return type is string."
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "date_macros.get_date_field_in_given_format"
                ],
                "readOnly": true,
                "enumNames": [
                  "Convert Date Field to String"
                ],
                "default": "date_macros.get_date_field_in_given_format",
                "const": "date_macros.get_date_field_in_given_format",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to convert dates from one timezone to another. This can also be used to convert a list of dates\n",
            "title": "Convert Date to Timezone",
            "macro_name": "date_macros.get_date_in_timezone",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "timezone": {
                    "title": "Timezone",
                    "type": "string",
                    "description": "the timezone to be converted into",
                    "default": "UTC"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "date_macros.get_date_in_timezone"
                ],
                "readOnly": true,
                "enumNames": [
                  "Convert Date to Timezone"
                ],
                "default": "date_macros.get_date_in_timezone",
                "const": "date_macros.get_date_in_timezone",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to calculate the difference in specified units(days, weeks, months, years) between a start date and end date\n",
            "title": "Get duration between start date and end date",
            "macro_name": "date_macros.get_duration",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "start_date_key": {
                    "title": "Start Date Key",
                    "type": "string",
                    "description": "Name of the key to be used for start date",
                    "default": "start_date"
                  },
                  "end_date_key": {
                    "title": "Start Date Key",
                    "type": "string",
                    "description": "Name of the key to be used for end date",
                    "default": "end_date"
                  },
                  "unit": {
                    "title": "Unit",
                    "type": "string",
                    "description": "Unit in which duration should be calculated (days, weeks, months, years)",
                    "default": "weeks"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "date_macros.get_duration"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get duration between start date and end date"
                ],
                "default": "date_macros.get_duration",
                "const": "date_macros.get_duration",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to calculate the time difference in specified units(days, weeks, months, years) between input date and current date\n",
            "macro_name": "date_macros.get_duration_from_current_date",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "date": {
                    "title": "Date",
                    "type": "string",
                    "description": "Inpute date to calculate time difference from current date"
                  },
                  "unit": {
                    "title": "Unit",
                    "type": "string",
                    "description": "Unit in which duration should be calculated (days, weeks, months, years)",
                    "default": "weeks"
                  },
                  "default": {
                    "title": "default",
                    "type": "integer",
                    "description": "The default value to return when Date field is not specified",
                    "default": 0
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "date_macros.get_duration_from_current_date"
                ],
                "readOnly": true,
                "enumNames": [
                  null
                ],
                "default": "date_macros.get_duration_from_current_date",
                "const": "date_macros.get_duration_from_current_date",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to convert a unix timestamp to given date format in given timezone This can also be used to convert a list of dates\n",
            "title": "Convert Timestamp to Given Format with Timezone",
            "macro_name": "date_macros.get_timestamp_in_given_format_and_timezone",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "format": {
                    "title": "Format",
                    "type": "string",
                    "description": "The new format of date to be converted into"
                  },
                  "timezone": {
                    "title": "Timezone",
                    "type": "string",
                    "description": "The timezone to be converted into",
                    "default": "UTC"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "date_macros.get_timestamp_in_given_format_and_timezone"
                ],
                "readOnly": true,
                "enumNames": [
                  "Convert Timestamp to Given Format with Timezone"
                ],
                "default": "date_macros.get_timestamp_in_given_format_and_timezone",
                "const": "date_macros.get_timestamp_in_given_format_and_timezone",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to convert dates to strings. We have 3 inputs - the format to be converted into, the return_type and a separator only if return_type is string.\n",
            "title": "Convert Date to String",
            "macro_name": "date_macros.get_ts_in_given_format",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "format": {
                    "title": "Format",
                    "type": "string",
                    "description": "the new format of date to be converted into"
                  },
                  "return_type": {
                    "title": "Return Type",
                    "type": "string",
                    "description": "the return type of macro - can be list, string etc"
                  },
                  "separator": {
                    "title": "Separator",
                    "type": "string",
                    "description": "the separator between multiple dates. this needs to be configured only if the return type is string."
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "date_macros.get_ts_in_given_format"
                ],
                "readOnly": true,
                "enumNames": [
                  "Convert Date to String"
                ],
                "default": "date_macros.get_ts_in_given_format",
                "const": "date_macros.get_ts_in_given_format",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract the year from a date.\n",
            "title": "Get Year from Date",
            "macro_name": "date_macros.get_year_from_date",
            "macro_type": "transform",
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "date_macros.get_year_from_date"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Year from Date"
                ],
                "default": "date_macros.get_year_from_date",
                "const": "date_macros.get_year_from_date",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to get a list of all keys in a dictionary\n",
            "title": "Get Keys",
            "macro_name": "dict_get_keys",
            "macro_type": "transform",
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "dict_get_keys"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Keys"
                ],
                "default": "dict_get_keys",
                "const": "dict_get_keys",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to get a list of keys based on a criteria. We have two inputs - Must Have Keys and Must Not Have Keys\n",
            "title": "Get Specific Keys from Dict",
            "macro_name": "dict_get_keys_with_subkeys_check",
            "macro_type": "transform",
            "properties": {
              "must_exist_subkeys": {
                "title": "Must Have Keys",
                "description": "the keys which need to be present as subkeys for a top-level key to qualify",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "must_inexist_subkeys": {
                "title": "Must Not Have Keys",
                "description": "If these keys are present, we disqualify top-level key from response",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "macro": {
                "type": "string",
                "enum": [
                  "dict_get_keys_with_subkeys_check"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Specific Keys from Dict"
                ],
                "default": "dict_get_keys_with_subkeys_check",
                "const": "dict_get_keys_with_subkeys_check",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to get a list of all values in a dictionary\n",
            "title": "Get Keys",
            "macro_name": "dict_get_values",
            "macro_type": "transform",
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "dict_get_values"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Keys"
                ],
                "default": "dict_get_values",
                "const": "dict_get_values",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to get a list of all concatenated key value (non nested values) pairs in a dictionary\n",
            "title": "Get a list of all key value pairs (stringified) delimited by a hyphen",
            "macro_name": "dict_macros.get_concatenated_key_value_pairs",
            "macro_type": "transform",
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "dict_macros.get_concatenated_key_value_pairs"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get a list of all key value pairs (stringified) delimited by a hyphen"
                ],
                "default": "dict_macros.get_concatenated_key_value_pairs",
                "const": "dict_macros.get_concatenated_key_value_pairs",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to get a specific value from a dict.\n",
            "title": "Get Specified Value from Dict",
            "macro_name": "dict_macros.get_specified_value_from_dict",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "the key for which the value is needed",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "dict_macros.get_specified_value_from_dict"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Specified Value from Dict"
                ],
                "default": "dict_macros.get_specified_value_from_dict",
                "const": "dict_macros.get_specified_value_from_dict",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to convert html text to plain text.\n",
            "title": "HTML to Plain Text",
            "macro_name": "display_macros.html_to_plain_text",
            "macro_type": "transform",
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "display_macros.html_to_plain_text"
                ],
                "readOnly": true,
                "enumNames": [
                  "HTML to Plain Text"
                ],
                "default": "display_macros.html_to_plain_text",
                "const": "display_macros.html_to_plain_text",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to combine the value of multiple fields into a template. it supports jinja templates format so can be used for dynamic values as well.\n",
            "title": "Substitute Template",
            "macro_name": "display_macros.substitute_template",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "template_string"
                ],
                "properties": {
                  "template_string": {
                    "type": "string",
                    "description": "Template to substitute the value of the fields in.",
                    "examples": [
                      "{{ 'Contingent Worker' if 'contingent_worker_id' in candidate.custom_info else None }}",
                      "{{'Yes' if position.custom_info.contingent_id == '1' else 'No'}}"
                    ]
                  },
                  "use_native_typing": {
                    "type": "boolean",
                    "default": true,
                    "description": "if set to false it will force convert the output to string type as \"1\". if set to true it will be 1 (int).\n"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "display_macros.substitute_template"
                ],
                "readOnly": true,
                "enumNames": [
                  "Substitute Template"
                ],
                "default": "display_macros.substitute_template",
                "const": "display_macros.substitute_template",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to extract and format multiple elements together in a list. It has two inputs - values- a dictionary containing a key, value map. formatter-string which controls how the keys should be formatted.\n",
            "title": "Extract and Format Elements",
            "macro_name": "extract_and_format_elements_in_list",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "values": {
                    "title": "Values",
                    "type": "object",
                    "description": "Values to be populated inside the formatter",
                    "propertyNames": {
                      "type": "string",
                      "key_title": "Key used in Formatter",
                      "value_title": "Value for Key"
                    },
                    "patternProperties": {
                      "": {
                        "type": "string"
                      }
                    }
                  },
                  "formatter": {
                    "title": "Formatter",
                    "type": "string",
                    "description": "The format for the keys created above. Uses basic string replacement to populate the format"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "extract_and_format_elements_in_list"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract and Format Elements"
                ],
                "default": "extract_and_format_elements_in_list",
                "const": "extract_and_format_elements_in_list",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract a value from a payload field for a job req id.\n",
            "title": "Extract Value from Payload Field for Job Req Id",
            "macro_name": "extract_value_from_application_payload_field",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "job_req_id": {
                    "type": "string",
                    "description": "Job req id"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "extract_value_from_application_payload_field"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Value from Payload Field for Job Req Id"
                ],
                "default": "extract_value_from_application_payload_field",
                "const": "extract_value_from_application_payload_field",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to extract and format multiple elements together in a list. you need to configure a key called as string_formatter which encapsulates how the keys should be formatted. all other keys are used to populate data inside string_formatter\n",
            "title": "Format and Concat Fields",
            "macro_name": "format_and_concat_field_value",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "description": "Values to be populated. We need to configure a special key with name string_formatter which will be populated using other values, also configured here\n",
                "propertyNames": {
                  "type": "string",
                  "key_title": "Keys",
                  "value_title": "Values"
                },
                "patternProperties": {
                  "": {
                    "type": "string"
                  }
                }
              },
              "macro": {
                "type": "string",
                "enum": [
                  "format_and_concat_field_value"
                ],
                "readOnly": true,
                "enumNames": [
                  "Format and Concat Fields"
                ],
                "default": "format_and_concat_field_value",
                "const": "format_and_concat_field_value",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to convert any value to boolean format. Returns Y or N by default or the return value specified in the config mapped with true and false.\n",
            "title": "Format Boolean Values",
            "macro_name": "format_boolean_values",
            "macro_type": "transform",
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "format_boolean_values"
                ],
                "readOnly": true,
                "enumNames": [
                  "Format Boolean Values"
                ],
                "default": "format_boolean_values",
                "const": "format_boolean_values",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro converts the provided country name template string to a country name and returns an ISO2 code for it. If the country name is not a valid country name, this macro returns None. If whitelisted_country_codes are provided, this macro returns the converted ISO2 country code if it is present in the list, else None. If whitelisted_country_codes are not provided, this macro returns the converted ISO2 country code >.\n",
            "title": "Convert country name to ISO2 code",
            "macro_name": "geocode_macros.convert_country_to_iso2_code",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "country_name_template": {
                    "type": "string",
                    "description": "Template to obtain the country name"
                  },
                  "whitelisted_country_codes": {
                    "type": "array",
                    "description": "List of allowed ISO2 country codes",
                    "items": {
                      "type": "string",
                      "description": "ISO2 code of the country"
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "geocode_macros.convert_country_to_iso2_code"
                ],
                "readOnly": true,
                "enumNames": [
                  "Convert country name to ISO2 code"
                ],
                "default": "geocode_macros.convert_country_to_iso2_code",
                "const": "geocode_macros.convert_country_to_iso2_code",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "supported_systems": [
              "geocode"
            ],
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro converts the provided state name template string to a state name and returns ISO2 code for it. If either state name or country code are not provided, this macro returns None. If whitelisted country codes are not provided, state would always be converted to ISO2 code. If whitelisted country codes are provided, state would be converted to ISO2 code only if the country code is present in this list. If after conversion, the state name does not give any ISO2 code, this macro returns None.\n",
            "title": "Convert state name to ISO2 code",
            "macro_name": "geocode_macros.convert_state_to_iso2_code",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "state_name_template": {
                    "type": "string",
                    "description": "Template to obtain the state name"
                  },
                  "country_code_template": {
                    "type": "string",
                    "description": "Template to obtain the ISO2 country code"
                  },
                  "whitelisted_country_codes": {
                    "type": "array",
                    "description": "List of ISO2 country codes for which state name would be transformed to ISO2 code",
                    "items": {
                      "type": "string",
                      "description": "ISO2 code of the country"
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "geocode_macros.convert_state_to_iso2_code"
                ],
                "readOnly": true,
                "enumNames": [
                  "Convert state name to ISO2 code"
                ],
                "default": "geocode_macros.convert_state_to_iso2_code",
                "const": "geocode_macros.convert_state_to_iso2_code",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "supported_systems": [
              "geocode"
            ],
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro extract the state value from location geocode. If the location geocode is not valid, this macro returns None.\n",
            "title": "Extract state from location geocode",
            "macro_name": "geocode_macros.get_state_location_from_geocode",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field": {
                    "type": "string",
                    "description": "The field to extract the geocode value from"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "geocode_macros.get_state_location_from_geocode"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract state from location geocode"
                ],
                "default": "geocode_macros.get_state_location_from_geocode",
                "const": "geocode_macros.get_state_location_from_geocode",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "supported_systems": [
              "geocode"
            ],
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to convert dates to another date-type format. We have 3 inputs - the format to be converted into, the return_type and a separator only if return_type is string\n",
            "title": "Convert Date to Format",
            "macro_name": "get_date_in_given_format",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "format": {
                    "title": "Format",
                    "type": "string",
                    "description": "the new format of date to be converted into"
                  },
                  "return_type": {
                    "title": "Return Type",
                    "type": "string",
                    "description": "the return type of macro - can be list, string etc"
                  },
                  "separator": {
                    "title": "Separator",
                    "type": "string",
                    "description": "the separator between multiple dates. this needs to be configured only if the return type is string."
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "get_date_in_given_format"
                ],
                "readOnly": true,
                "enumNames": [
                  "Convert Date to Format"
                ],
                "default": "get_date_in_given_format",
                "const": "get_date_in_given_format",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract locations for Greenhouse.\n",
            "title": "Extract Location (Greenhouse)",
            "macro_name": "greenhouse_macros.extract_location",
            "macro_type": "transform",
            "supported_systems": [
              "greenhouse"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "fields": {
                    "title": "Fields",
                    "description": "The fields which need to be added to extract locations",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "_job_posts",
                        "offices"
                      ]
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "greenhouse_macros.extract_location"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Location (Greenhouse)"
                ],
                "default": "greenhouse_macros.extract_location",
                "const": "greenhouse_macros.extract_location",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch education question from Greenhouse.\n",
            "title": "Fetch education question (Greenhouse)",
            "macro_name": "greenhouse_macros.fetch_education_question",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "greenhouse"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "ats_question_entity": {
                    "title": "Entity in ATS to be fetched.",
                    "description": "The question entity that has to be fetched from greenhouse. The URL from which the question options would be fetched is \"{credentials.job_board_api_url}/education/{ats_question_entity}\" if question requires options.\n",
                    "type": "string",
                    "examples": [
                      "schools",
                      "degrees",
                      "disciplines",
                      "start_date",
                      "end_date"
                    ]
                  },
                  "posting_type": {
                    "title": "Posting type for question.",
                    "description": "The posting type of job for which this question is applicable.",
                    "type": "string",
                    "enum": [
                      "all",
                      "internal",
                      "external"
                    ]
                  },
                  "question_id": {
                    "title": "Question id.",
                    "description": "Id of the question to be stored in position ats_data.",
                    "type": "string"
                  },
                  "question_type": {
                    "title": "Question type.",
                    "description": "Type of the question.",
                    "type": "string",
                    "examples": [
                      "dropdown",
                      "date",
                      "checkbox",
                      "choice",
                      "multi_value",
                      "text"
                    ]
                  },
                  "question_label": {
                    "title": "Question label.",
                    "description": "Label for the question to be displayed on job application page.",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "greenhouse_macros.fetch_education_question"
                ],
                "readOnly": true,
                "enumNames": [
                  "Fetch education question (Greenhouse)"
                ],
                "default": "greenhouse_macros.fetch_education_question",
                "const": "greenhouse_macros.fetch_education_question",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to get locations of parent offices of the position entity recursively. It first looks up the office entity in ats_entity_cache and if not found, fetches the same from Greenhouse. Returns a list of locations.\n",
            "title": "Fetch parent offices (Greenhouse)",
            "macro_name": "greenhouse_macros.fetch_parent_offices_locations",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "greenhouse"
            ],
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "greenhouse_macros.fetch_parent_offices_locations"
                ],
                "readOnly": true,
                "enumNames": [
                  "Fetch parent offices (Greenhouse)"
                ],
                "default": "greenhouse_macros.fetch_parent_offices_locations",
                "const": "greenhouse_macros.fetch_parent_offices_locations",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch user details, full name, first name, last name and email.\n",
            "title": "Fetch user (Greenhouse)",
            "macro_name": "greenhouse_macros.fetch_user",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "greenhouse"
            ],
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "greenhouse_macros.fetch_user"
                ],
                "readOnly": true,
                "enumNames": [
                  "Fetch user (Greenhouse)"
                ],
                "default": "greenhouse_macros.fetch_user",
                "const": "greenhouse_macros.fetch_user",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract a list of Users from an icims field using the person id and return the User object\n",
            "title": "Extract a list of Users from an iCIMS non-list field",
            "macro_name": "icims_macros.extract_all_users",
            "macro_type": "transform",
            "supported_systems": [
              "icims"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "field"
                ],
                "properties": {
                  "field_number": {
                    "description": "The number of the field e.g. field39965",
                    "type": "string"
                  },
                  "request_field": {
                    "description": "The field which contains the list of person ids e.g. secondaryreps",
                    "type": "string"
                  },
                  "field": {
                    "description": "The field which contains the person id e.g. secondaryrep, recruiter, hiringmanager",
                    "type": "string"
                  },
                  "return_type": {
                    "description": "Defines return_type used in extract_user macro",
                    "type": "string",
                    "enum": [
                      "object",
                      "dict"
                    ]
                  },
                  "fields_to_select": {
                    "description": "List of fields to be selected in the API call",
                    "type": "array",
                    "items": {
                      "description": "field to be selected in the API call e.g. firstname, lastname, email, supervisor",
                      "type": "string"
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "icims_macros.extract_all_users"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract a list of Users from an iCIMS non-list field"
                ],
                "default": "icims_macros.extract_all_users",
                "const": "icims_macros.extract_all_users",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract a list of Users from a list field coming from iCIMS using the person url and return a list of User objects\n",
            "title": "Extract a list of Users objects from a list field coming from iCIMS",
            "macro_name": "icims_macros.extract_all_users_from_list",
            "macro_type": "transform",
            "supported_systems": [
              "icims"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "list_field_name",
                  "dict_field_name"
                ],
                "properties": {
                  "list_field_name": {
                    "description": "The name of the list field received from iCIMS e.g. field39965",
                    "type": "string"
                  },
                  "dict_field_name": {
                    "description": "Each dict contained in the list list_field_name should have the dict_field_name. The macro will look for \"profile\" field in this dict to find a URL.",
                    "type": "string"
                  },
                  "cache_for_days": {
                    "description": "Number of days that the user data should be cached for, default is 7 days. Setting to 0 implies busting the existing cache record.",
                    "type": "integer",
                    "examples": [
                      1
                    ],
                    "default": 7
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "icims_macros.extract_all_users_from_list"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract a list of Users objects from a list field coming from iCIMS"
                ],
                "default": "icims_macros.extract_all_users_from_list",
                "const": "icims_macros.extract_all_users_from_list",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract User from icims using the person id and return the User object\n",
            "title": "Extract User from iCIMS",
            "macro_name": "icims_macros.extract_user",
            "macro_type": "transform",
            "supported_systems": [
              "icims"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "field"
                ],
                "properties": {
                  "field": {
                    "description": "The field which contains the person id eg., recruiter, jobowner, hiringmanager",
                    "type": "string"
                  },
                  "return_type": {
                    "description": "Defines return_type for this macro",
                    "type": "string",
                    "enum": [
                      "object",
                      "dict"
                    ]
                  },
                  "fields_to_select": {
                    "description": "List of fields to be selected in the API call",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "skip_cache": {
                    "description": "Allows the user to skip the cache and make an API call to fetch the required entity WARNING: Use skip_cache=true ONLY AS A TEMPORARY MEASURE to reset cache and MAKE SURE TO TURN OFF AFTERWARDS. If this is left set as true, this will increase overall iCIMS API call consumption.\n",
                    "type": "boolean",
                    "default": false
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "icims_macros.extract_user"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract User from iCIMS"
                ],
                "default": "icims_macros.extract_user",
                "const": "icims_macros.extract_user",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch submitted forms from ICIMS.\n",
            "title": "Fetch Candidate Forms",
            "macro_name": "icims_macros.fetch_candidate_forms",
            "macro_type": "transform",
            "supported_systems": [
              "icims"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "form_name",
                  "form_key",
                  "form_status"
                ],
                "properties": {
                  "form_name": {
                    "type": "string",
                    "description": "Name of the form to pull data from."
                  },
                  "form_key": {
                    "type": "string",
                    "description": "Key to parse in the output of the form data url."
                  },
                  "form_status": {
                    "type": "string",
                    "description": "Form status which is an input used in search forms api."
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "icims_macros.fetch_candidate_forms"
                ],
                "readOnly": true,
                "enumNames": [
                  "Fetch Candidate Forms"
                ],
                "default": "icims_macros.fetch_candidate_forms",
                "const": "icims_macros.fetch_candidate_forms",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is meant for fetching HTTP response from a url (and other parameters) provided to the macro. if url is None, the API call is skipped and an empty json is returned.\n",
            "title": "Get (json) content from URL",
            "macro_name": "icims_macros.get_url_content",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "icims"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "description": "The url which we want to fetch the content from",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "icims_macros.get_url_content"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get (json) content from URL"
                ],
                "default": "icims_macros.get_url_content",
                "const": "icims_macros.get_url_content",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract a custom field of jobvite. It uses the question id to extract the value from qna and then builds a custom field dict using the extracted value and other parameters provided with it.\n",
            "title": "Extract Custom Field from QnA",
            "macro_name": "jobvite_macros.extract_custom_field_from_qna",
            "macro_type": "transform",
            "supported_systems": [
              "jobvite"
            ],
            "supported_entity_types": [
              "application"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "question_id",
                  "key"
                ],
                "properties": {
                  "question_id": {
                    "type": "string",
                    "description": "Unique identifier of the question to be used to extract the value to be set in custom field.",
                    "examples": [
                      "referral_name"
                    ]
                  },
                  "key": {
                    "type": "string",
                    "description": "Key to set in custom field"
                  },
                  "field_code": {
                    "type": "string",
                    "description": "Jobvite fieldCode to set in custom field"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "jobvite_macros.extract_custom_field_from_qna"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Custom Field from QnA"
                ],
                "default": "jobvite_macros.extract_custom_field_from_qna",
                "const": "jobvite_macros.extract_custom_field_from_qna",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract answer from job question, given a specific question Id. Returns value of #text key for matching question ID\n",
            "title": "Extract Answer from Job Question (Kenexa)",
            "macro_name": "kenexa_macros.extract_answer_from_job_ques",
            "macro_type": "transform",
            "supported_systems": [
              "kenexa"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "question_id"
                ],
                "properties": {
                  "question_id": {
                    "title": "Question Id",
                    "description": "the job question ID for which we want to extract the answer",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "kenexa_macros.extract_answer_from_job_ques"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Answer from Job Question (Kenexa)"
                ],
                "default": "kenexa_macros.extract_answer_from_job_ques",
                "const": "kenexa_macros.extract_answer_from_job_ques",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract application answer data given two required inputs - question and form_type.\n",
            "title": "Extract Application Answer Data (Kenexa)",
            "macro_name": "kenexa_macros.extract_appl_answer_form_data",
            "macro_type": "transform",
            "supported_systems": [
              "kenexa"
            ],
            "supported_entity_types": [
              "application"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "question",
                  "form_type"
                ],
                "properties": {
                  "question": {
                    "description": "enter the question",
                    "type": "string"
                  },
                  "form_type": {
                    "description": "enter the form_type",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "kenexa_macros.extract_appl_answer_form_data"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Application Answer Data (Kenexa)"
                ],
                "default": "kenexa_macros.extract_appl_answer_form_data",
                "const": "kenexa_macros.extract_appl_answer_form_data",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract application question and answer form data. Returns a list\n",
            "title": "Extract Application Question Answer Form Data",
            "macro_name": "kenexa_macros.extract_appl_qna_form_data",
            "macro_type": "transform",
            "supported_systems": [
              "kenexa"
            ],
            "supported_entity_types": [
              "application"
            ],
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "kenexa_macros.extract_appl_qna_form_data"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Application Question Answer Form Data"
                ],
                "default": "kenexa_macros.extract_appl_qna_form_data",
                "const": "kenexa_macros.extract_appl_qna_form_data",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract application scorecards data. \n",
            "title": "Extract Application Scorecard Form Data (Kenexa)",
            "macro_name": "kenexa_macros.extract_appl_scorecards_form_data",
            "macro_type": "transform",
            "supported_entity_types": [
              "application"
            ],
            "supported_systems": [
              "kenexa"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "interview_name_question": {
                    "description": "the interview_name for scorecard",
                    "type": "string"
                  },
                  "description_question": {
                    "description": "the description for scorecard",
                    "type": "string"
                  },
                  "overall_rating_question": {
                    "description": "the rating for scorecard",
                    "type": "string"
                  },
                  "interviewed_at_question": {
                    "description": "the interviewed_at timestamp for scorecard",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "kenexa_macros.extract_appl_scorecards_form_data"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Application Scorecard Form Data (Kenexa)"
                ],
                "default": "kenexa_macros.extract_appl_scorecards_form_data",
                "const": "kenexa_macros.extract_appl_scorecards_form_data",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract application answer data given two required inputs - question and form_type. It returns False if the answer starts with 'no', else True\n",
            "title": "Extract Boolean Application Answer (Kenexa)",
            "macro_name": "kenexa_macros.extract_boolean_appl_answer",
            "macro_type": "transform",
            "supported_systems": [
              "kenexa"
            ],
            "supported_entity_types": [
              "application"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "question",
                  "form_type"
                ],
                "properties": {
                  "question": {
                    "description": "enter the question",
                    "type": "string"
                  },
                  "form_type": {
                    "description": "enter the form_type",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "kenexa_macros.extract_boolean_appl_answer"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Boolean Application Answer (Kenexa)"
                ],
                "default": "kenexa_macros.extract_boolean_appl_answer",
                "const": "kenexa_macros.extract_boolean_appl_answer",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract boolean job question for Kenexa for a given question_id. Returns a boolean flag - True if answer is 'yes' else False\n",
            "title": "Extract Boolean Job Question (Kenexa)",
            "macro_name": "kenexa_macros.extract_boolean_job_question",
            "macro_type": "transform",
            "supported_systems": [
              "kenexa"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "question_id"
                ],
                "properties": {
                  "question_id": {
                    "title": "Question Id",
                    "description": "the job question ID for which we want to extract job question",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "kenexa_macros.extract_boolean_job_question"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Boolean Job Question (Kenexa)"
                ],
                "default": "kenexa_macros.extract_boolean_job_question",
                "const": "kenexa_macros.extract_boolean_job_question",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract application answer data given two required inputs - question and form_type. It returns 'male' if the answer is male, 'female' if the answer is female or 'decline to self identify' if its neither\n",
            "title": "Extract Gender Application Answer (Kenexa)",
            "macro_name": "kenexa_macros.extract_gender_appl_answer",
            "macro_type": "transform",
            "supported_systems": [
              "kenexa"
            ],
            "supported_entity_types": [
              "application"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "question",
                  "form_type"
                ],
                "properties": {
                  "question": {
                    "description": "enter the question",
                    "type": "string"
                  },
                  "form_type": {
                    "description": "enter the form_type",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "kenexa_macros.extract_gender_appl_answer"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Gender Application Answer (Kenexa)"
                ],
                "default": "kenexa_macros.extract_gender_appl_answer",
                "const": "kenexa_macros.extract_gender_appl_answer",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract job description for Kenexa for a given field. Returns a job description of string format\n",
            "title": "Extract Job Description (Kenexa)",
            "macro_name": "kenexa_macros.extract_job_description",
            "macro_type": "transform",
            "supported_systems": [
              "kenexa"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "field"
                ],
                "properties": {
                  "field": {
                    "title": "Field",
                    "description": "the name of the field which contains the job description",
                    "type": "string"
                  },
                  "question_id": {
                    "title": "Question Id",
                    "description": "[optional] Enter a question Id",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "kenexa_macros.extract_job_description"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Job Description (Kenexa)"
                ],
                "default": "kenexa_macros.extract_job_description",
                "const": "kenexa_macros.extract_job_description",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract job followers for Kenexa for a given question_id. Returns a list of AtsUser(s).\n",
            "title": "Extract Job Followers (Kenexa)",
            "macro_name": "kenexa_macros.extract_job_followers",
            "macro_type": "transform",
            "supported_systems": [
              "kenexa"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "question_id"
                ],
                "properties": {
                  "question_id": {
                    "title": "Question Id",
                    "description": "the job question ID for which we want to extract job followers",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "kenexa_macros.extract_job_followers"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Job Followers (Kenexa)"
                ],
                "default": "kenexa_macros.extract_job_followers",
                "const": "kenexa_macros.extract_job_followers",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro takes in a list and returns it's length.\n",
            "title": "List to Length",
            "macro_name": "list_to_length",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "data_path"
                ],
                "properties": {
                  "data_path": {
                    "title": "Data Path",
                    "type": "string",
                    "description": "the string used for lookup.",
                    "examples": [
                      "skills"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "list_to_length"
                ],
                "readOnly": true,
                "enumNames": [
                  "List to Length"
                ],
                "default": "list_to_length",
                "const": "list_to_length",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to convert a string to lowercase.\n",
            "title": "Lowercase",
            "macro_name": "lowercase",
            "macro_type": "transform",
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "lowercase"
                ],
                "readOnly": true,
                "enumNames": [
                  "Lowercase"
                ],
                "default": "lowercase",
                "const": "lowercase",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch current info object from a list of objects under a field 'key' in the response json(ORC)\n",
            "macro_name": "orc_macros.extract_current_info_from_payload",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "orc"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Name of the field containing list of objects on which filtering is to be done"
                  },
                  "date_field": {
                    "type": "string",
                    "description": "Checks for date field to get latest object in response object list"
                  },
                  "is_primary": {
                    "type": "boolean",
                    "description": "Checks for primary key in response object list",
                    "default": false
                  },
                  "payload": {
                    "title": "Payload",
                    "type": "string",
                    "description": "the 'object' latest value will be extracted from. Can support chained_macros",
                    "examples": [
                      "{{ {'custom_info': {'mentor_data': 'some_value'}} }}"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "orc_macros.extract_current_info_from_payload"
                ],
                "readOnly": true,
                "enumNames": [
                  null
                ],
                "default": "orc_macros.extract_current_info_from_payload",
                "const": "orc_macros.extract_current_info_from_payload",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch latest info object from a list of objects under a field 'key' in the response json(ORC)\n",
            "macro_name": "orc_macros.extract_latest_info_from_payload",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "orc"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Name of the field containing list of objects on which filtering is to be done"
                  },
                  "date_field": {
                    "type": "string",
                    "description": "Checks for date field to get latest object in response object list"
                  },
                  "secondary_date_field": {
                    "type": "string",
                    "description": "Checks for secondary date field in response object list"
                  },
                  "is_primary": {
                    "type": "boolean",
                    "description": "Checks for primary key in response object list",
                    "default": false
                  },
                  "payload": {
                    "title": "Payload",
                    "type": "string",
                    "description": "the 'object' latest value will be extracted from. Can support chained_macros",
                    "examples": [
                      "{{ {'custom_info': {'mentor_data': 'some_value'}} }}"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "orc_macros.extract_latest_info_from_payload"
                ],
                "readOnly": true,
                "enumNames": [
                  null
                ],
                "default": "orc_macros.extract_latest_info_from_payload",
                "const": "orc_macros.extract_latest_info_from_payload",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract locations for ORC.\n",
            "title": "Extract Location (ORC)",
            "macro_name": "orc_macros.extract_location",
            "macro_type": "transform",
            "supported_systems": [
              "orc"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "location_key": {
                    "type": "string",
                    "description": "location key containing location data"
                  },
                  "secondary_location_keys": {
                    "type": "array",
                    "description": "list of secondary keys containing data for secondary locations",
                    "items": {
                      "type": "string"
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "orc_macros.extract_location"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Location (ORC)"
                ],
                "default": "orc_macros.extract_location",
                "const": "orc_macros.extract_location",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch list of ats users using person id(ORC)\n",
            "macro_name": "orc_macros.fetch_ats_users_by_person_id",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "orc"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "person_id_or_list": {
                    "description": "person id/ids for which we need to fetch user",
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "person id"
                      },
                      {
                        "type": "array",
                        "description": "list of person ids",
                        "items": {
                          "type": "string",
                          "description": "person id"
                        }
                      }
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "orc_macros.fetch_ats_users_by_person_id"
                ],
                "readOnly": true,
                "enumNames": [
                  null
                ],
                "default": "orc_macros.fetch_ats_users_by_person_id",
                "const": "orc_macros.fetch_ats_users_by_person_id",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch field meanings from field code for ORC using get_common_lookups_meaning::commonLookupsLOV.\n",
            "title": "Extract Meanings From Field Id (ORC)",
            "macro_name": "orc_macros.fetch_common_lookups_by_code",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "orc"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "lookup_type": {
                    "type": "string",
                    "description": "Lookup type for common lookups supported in orc"
                  },
                  "lookup_code": {
                    "type": "string",
                    "description": "Field in entity_json containing lookup code"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "orc_macros.fetch_common_lookups_by_code"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Meanings From Field Id (ORC)"
                ],
                "default": "orc_macros.fetch_common_lookups_by_code",
                "const": "orc_macros.fetch_common_lookups_by_code",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch ORC supported entities(eg: Jobs, workers, grades, jobFamilies, etc) provided with a query parameter from config(ORC)\n",
            "macro_name": "orc_macros.fetch_entity_from_endpoint",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "orc"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "entity": {
                    "type": "string",
                    "description": "ORC entity type",
                    "examples": [
                      "Jobs",
                      "grades",
                      "jobFamilies",
                      "workers"
                    ]
                  },
                  "query_param": {
                    "type": "string",
                    "description": "Query param i.e. (?q={parameter}={entity_id}) required for the entity fetch"
                  },
                  "entity_id": {
                    "type": "string",
                    "description": "entity id used to query the entity"
                  },
                  "extra_filters": {
                    "type": "array",
                    "description": "list of params to be passed",
                    "items": {
                      "type": "string",
                      "description": "params"
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "orc_macros.fetch_entity_from_endpoint"
                ],
                "readOnly": true,
                "enumNames": [
                  null
                ],
                "default": "orc_macros.fetch_entity_from_endpoint",
                "const": "orc_macros.fetch_entity_from_endpoint",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch requisition DFF specific fields for ORC and map to position enitity.\n",
            "title": "Extract RequisitionDFF Specific Fields (ORC)",
            "macro_name": "orc_macros.fetch_field_from_requisitionDFF",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "orc"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field": {
                    "type": "string",
                    "description": "field which needs to be extracted from response"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "orc_macros.fetch_field_from_requisitionDFF"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract RequisitionDFF Specific Fields (ORC)"
                ],
                "default": "orc_macros.fetch_field_from_requisitionDFF",
                "const": "orc_macros.fetch_field_from_requisitionDFF",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch person id for extracted person number(ORC)\n",
            "macro_name": "orc_macros.fetch_person_id_using_person_number",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "orc"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "person_number": {
                    "description": "person number for which we need to fetch person id",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "orc_macros.fetch_person_id_using_person_number"
                ],
                "readOnly": true,
                "enumNames": [
                  null
                ],
                "default": "orc_macros.fetch_person_id_using_person_number",
                "const": "orc_macros.fetch_person_id_using_person_number",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to generate JSON payload for posting data to ORC\n",
            "title": "Post data payload (ORC)",
            "macro_name": "orc_macros.post_data_payload",
            "macro_type": "transform",
            "supported_systems": [
              "orc"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "external_section_name",
                  "external_section_id",
                  "external_section_item_name",
                  "external_section_item_key_name",
                  "payload"
                ],
                "properties": {
                  "external_section_name": {
                    "type": "string",
                    "description": "Name of the section in ORC HRIS corresponding to Eightfold standard profile section or profile_data namespace\n",
                    "examples": [
                      "educationSections",
                      "membershipSections"
                    ]
                  },
                  "external_section_id": {
                    "oneOf": [
                      {
                        "type": "string",
                        "title": "Section ID (String)"
                      },
                      {
                        "type": "integer",
                        "title": "Section ID (Integer)"
                      }
                    ],
                    "description": "Section ID integer or string needed to create talent profile specific section under which items can be added",
                    "examples": [
                      300000568960817,
                      "300000568960817"
                    ]
                  },
                  "external_section_item_name": {
                    "type": "string",
                    "description": "Name of section items pertaining to this section",
                    "examples": [
                      "educationItems",
                      "membershipItems"
                    ]
                  },
                  "external_section_item_key_name": {
                    "type": "string",
                    "description": "Key name used to lookup unique key created in ORC HRIS for this particular section item",
                    "examples": [
                      "EducationId",
                      "MembershipId"
                    ]
                  },
                  "payload": {
                    "type": "object",
                    "description": "Mappings from payload field to dictionary object determining how to obtain its value",
                    "propertyNames": {
                      "type": "string",
                      "key_title": "Name of the payload field",
                      "value_title": "Dictionary object containing how to obtain this payload field's value"
                    },
                    "patternProperties": {
                      "": {
                        "anyOf": [
                          {
                            "type": "object"
                          },
                          {
                            "type": "array"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "examples": [
                      "{'payload_key1': {'value': 'N/A'}, 'payload_key2': {'field_name': 'current_work', 'apply_base64_encode': true}}"
                    ]
                  },
                  "child_section_payload": {
                    "type": "object",
                    "description": "Same as payload(Mappings from child section field to dictionary object determining its payload data) for child sections. This is to add child sections(DFF fields).",
                    "propertyNames": {
                      "type": "string",
                      "key_title": "Name of the child section",
                      "value_title": "Dictionary object containing how to obtain this payload field's value"
                    },
                    "patternProperties": {
                      "": {
                        "type": "object",
                        "description": "Payload details to be used for child section",
                        "patternProperties": {
                          "": {
                            "type": "object",
                            "patternProperties": {
                              "": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "examples": [
                      "{'payload_key1': {'value': 'N/A'}, 'payload_key2': {'field_name': 'current_work', 'apply_base64_encode': true}}"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "orc_macros.post_data_payload"
                ],
                "readOnly": true,
                "enumNames": [
                  "Post data payload (ORC)"
                ],
                "default": "orc_macros.post_data_payload",
                "const": "orc_macros.post_data_payload",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to display data in pipeline. It converts the input into a dict having two keys upper_value and lower_value.\n",
            "title": "Pipeline Display Two Rows",
            "macro_name": "pipeline_display_two_rows",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "upper_field": {
                    "type": "string",
                    "description": "key for upper_field"
                  },
                  "lower_field": {
                    "type": "string",
                    "description": "key for lower_field"
                  },
                  "upper_field_mapping": {
                    "type": "string",
                    "description": "dict for mapping upper_field"
                  },
                  "lower_field_mapping": {
                    "type": "string",
                    "description": "dict for mapping lower_field"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "pipeline_display_two_rows"
                ],
                "readOnly": true,
                "enumNames": [
                  "Pipeline Display Two Rows"
                ],
                "default": "pipeline_display_two_rows",
                "const": "pipeline_display_two_rows",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to add prefix, suffix to text. If there are multiple values, then we use plural_suffix/plural_prefix, otherwise we use prefix/suffix. If the return type is string, we use the separator join the elements together, otherwise we return a simple list.\n",
            "title": "Prepend and Append Field Value",
            "macro_name": "prepend_and_append_field_value",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "return_type": {
                    "title": "Return Type",
                    "type": "string",
                    "default": "list",
                    "description": "the return type of macro - can be list, string etc"
                  },
                  "separator": {
                    "title": "Separator",
                    "type": "string",
                    "default": ", ",
                    "description": "the separator between multiple dates. this needs to be configured only if the return type is string."
                  },
                  "prefix": {
                    "title": "Prefix",
                    "type": "string",
                    "description": "prefix for text"
                  },
                  "suffix": {
                    "title": "Suffix",
                    "type": "string",
                    "description": "suffix for text"
                  },
                  "plural_prefix": {
                    "title": "Plural Prefix",
                    "type": "string",
                    "description": "plural prefix for text"
                  },
                  "plural_suffix": {
                    "title": "Plural Suffix",
                    "type": "string",
                    "description": "plural suffix for text"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "prepend_and_append_field_value"
                ],
                "readOnly": true,
                "enumNames": [
                  "Prepend and Append Field Value"
                ],
                "default": "prepend_and_append_field_value",
                "const": "prepend_and_append_field_value",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This is a display macro that splits the input value by specified separator and returns the specified part of the split up value.\n",
            "title": "Split and Extract Field",
            "macro_name": "split_and_extract_field_value",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "separator": {
                    "description": "separator string to be used to split the value",
                    "type": "string",
                    "default": ":"
                  },
                  "part_index": {
                    "description": "based index of part to return after split",
                    "type": "number",
                    "default": 0
                  },
                  "strip_value": {
                    "description": "whether to strip the value or not",
                    "type": "boolean",
                    "default": false
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "split_and_extract_field_value"
                ],
                "readOnly": true,
                "enumNames": [
                  "Split and Extract Field"
                ],
                "default": "split_and_extract_field_value",
                "const": "split_and_extract_field_value",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro invokes multiple macros in a sequence and stores their values in a list called macro_values. The output of say, first two macros is available for the third as macro_values[0], macro_values[1] and so on. By this approach the user can tweak any combination while making use of dynamically available results to infer final macro value\n",
            "title": "Chained macro for transformation",
            "macro_name": "standard_macros.chained_macro",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "inner_macro_list"
                ],
                "properties": {
                  "inner_macro_list": {
                    "title": "Inner macro list",
                    "description": "List of dictionary each containing macro name and its arguments (kwargs object) for respective macro in chain",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "macro"
                      ],
                      "properties": {
                        "macro": {
                          "type": "string",
                          "description": "Macro name corresponding to this inner macro in chain"
                        },
                        "kwargs": {
                          "type": "object",
                          "additionalProperties": true,
                          "description": "Arguments (kwargs dictionary) corresponding to this inner macro\n"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "registry": {
                    "title": "Registry name",
                    "description": "Should be one of the valid custom fields registries",
                    "type": "string",
                    "default": "ADAPTER_TRANSFORM_REGISTRY"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.chained_macro"
                ],
                "readOnly": true,
                "enumNames": [
                  "Chained macro for transformation"
                ],
                "default": "standard_macros.chained_macro",
                "const": "standard_macros.chained_macro",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to extract all matches from multiple paths.\n",
            "title": "Extract All From Multiple Paths",
            "macro_name": "standard_macros.extract_all_from_multiple_paths",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "data_paths"
                ],
                "properties": {
                  "data_paths": {
                    "title": "Data Paths",
                    "type": "array",
                    "description": "a list of strings used for lookup",
                    "items": {
                      "type": "string",
                      "description": "data path for lookup",
                      "examples": [
                        "data_json.custom_info.primary_sector"
                      ]
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.extract_all_from_multiple_paths"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract All From Multiple Paths"
                ],
                "default": "standard_macros.extract_all_from_multiple_paths",
                "const": "standard_macros.extract_all_from_multiple_paths",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to extract data for a given path from multiple entities and combine them using a separator\n",
            "title": "Extract and Format",
            "macro_name": "standard_macros.extract_and_format_from_entity",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "fields": {
                    "title": "Fields",
                    "type": "array",
                    "description": "a list of simple string used for lookup. use this if the path to be extracted is a top level field.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data_paths": {
                    "title": "Data Paths",
                    "type": "array",
                    "description": "a list of strings used for lookup. use this for nested checks",
                    "items": {
                      "type": "string"
                    }
                  },
                  "separator": {
                    "type": "string",
                    "title": "Separator",
                    "description": "a separator used between the extracted values.",
                    "default": " - "
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.extract_and_format_from_entity"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract and Format"
                ],
                "default": "standard_macros.extract_and_format_from_entity",
                "const": "standard_macros.extract_and_format_from_entity",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to find the result at a given path and fallback to a safe default with necessary type checks to make sure wrong data does not enter the system. We give three inputs - the path of the element to be extracted, a default value and the data type of extracted value\n",
            "title": "Extract and Transform",
            "macro_name": "standard_macros.extract_and_transform_from_entity",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "field"
                ],
                "properties": {
                  "field": {
                    "title": "Field",
                    "type": "string",
                    "description": "the string used for lookup",
                    "examples": [
                      "custom_info.mentor_option"
                    ]
                  },
                  "data_type": {
                    "type": "string",
                    "title": "Data Type",
                    "description": "the data_type of expected value at path",
                    "default": "string",
                    "enum": [
                      "string",
                      "int",
                      "bool",
                      "date",
                      "datetime",
                      "float"
                    ],
                    "enumNames": [
                      "String",
                      "Integer",
                      "Boolean",
                      "Date",
                      "Datetime",
                      "Float"
                    ]
                  },
                  "base64_decode": {
                    "title": "Base64 Decode",
                    "description": "Decode base64 value to str",
                    "default": false,
                    "type": "boolean"
                  },
                  "default": {
                    "title": "Default",
                    "type": "string",
                    "description": "the default result if no value is found for expression",
                    "examples": [
                      "No"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.extract_and_transform_from_entity"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract and Transform"
                ],
                "default": "standard_macros.extract_and_transform_from_entity",
                "const": "standard_macros.extract_and_transform_from_entity",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to find the first result at a given path from multiple possible matches. We can also fallback to a default, if needed.\n",
            "title": "Extract First from Multiple Paths",
            "macro_name": "standard_macros.extract_from_multiple_paths",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "data_paths"
                ],
                "properties": {
                  "data_paths": {
                    "title": "Data Paths",
                    "type": "array",
                    "description": "a list of strings used for lookup",
                    "items": {
                      "type": "string"
                    }
                  },
                  "default": {
                    "type": "string",
                    "description": "the default result if no value is found for expression",
                    "examples": [
                      "No"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.extract_from_multiple_paths"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract First from Multiple Paths"
                ],
                "default": "standard_macros.extract_from_multiple_paths",
                "const": "standard_macros.extract_from_multiple_paths",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to extract any nested path. Returns a single object found at the path.\n",
            "title": "Extract Path Macro",
            "macro_name": "standard_macros.extract_path",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "expr": {
                    "title": "Expression",
                    "type": "string",
                    "description": "the string used for lookup",
                    "examples": [
                      "custom_info.mentor_data"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.extract_path"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Path Macro"
                ],
                "default": "standard_macros.extract_path",
                "const": "standard_macros.extract_path",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to extract any nested path. This will return a list of multiple objects which match the path\n",
            "title": "Extract Path Macro",
            "macro_name": "standard_macros.extract_path_all",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "expr": {
                    "title": "Expression",
                    "type": "string",
                    "description": "the string used for lookup",
                    "examples": [
                      "custom_info.mentor_data"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.extract_path_all"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Path Macro"
                ],
                "default": "standard_macros.extract_path_all",
                "const": "standard_macros.extract_path_all",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to verify the result at a given path for all elements in a list. We give two inputs, the path of the element to be extracted and the expected_value at the path. Returns a list of flags which is of the same size as the input list - true if the value at path matches with the expected_result, else False\n",
            "title": "Extract Path and Match",
            "macro_name": "standard_macros.extract_path_all_and_match",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "expr": {
                    "type": "string",
                    "title": "Expression",
                    "description": "the string used for lookup",
                    "examples": [
                      "custom_info.mentor_data"
                    ]
                  },
                  "expected_result": {
                    "type": "string",
                    "title": "Expected Value",
                    "description": "the expected result for value at path",
                    "examples": [
                      "FALSE"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.extract_path_all_and_match"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Path and Match"
                ],
                "default": "standard_macros.extract_path_all_and_match",
                "const": "standard_macros.extract_path_all_and_match",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to find the result at a given path and fallback to a safe default, if no value is found at the path. We give two inputs - the path of the element to be extracted and a default to be used as a fallback if no value is found.\n",
            "title": "Extract Path and Default",
            "macro_name": "standard_macros.extract_path_and_default",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "expr": {
                    "title": "Expression",
                    "type": "string",
                    "description": "the string used for lookup",
                    "examples": [
                      "custom_info.mentor_option"
                    ]
                  },
                  "default": {
                    "type": "string",
                    "description": "the default result if no value is found for expression",
                    "examples": [
                      "No"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.extract_path_and_default"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Path and Default"
                ],
                "default": "standard_macros.extract_path_and_default",
                "const": "standard_macros.extract_path_and_default",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to verify the result at a given path. We give two inputs, the path of the element to be extracted and the expected_value at the path. Returns true if the value at path matches with the expected_result, else returns False\n",
            "title": "Extract Path and Match",
            "macro_name": "standard_macros.extract_path_and_match",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "expr": {
                    "type": "string",
                    "title": "Expression",
                    "description": "the string used for lookup",
                    "examples": [
                      "custom_info.mentor_data"
                    ]
                  },
                  "expected_result": {
                    "type": "string",
                    "title": "Expected Value",
                    "description": "the expected result for value at path",
                    "examples": [
                      "True"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.extract_path_and_match"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Path and Match"
                ],
                "default": "standard_macros.extract_path_and_match",
                "const": "standard_macros.extract_path_and_match",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to extract any nested path from an object passed in kwargs['payload']. Returns a single object found at the path.\n",
            "title": "Extract Path From Payload Macro",
            "macro_name": "standard_macros.extract_path_from_payload",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "payload": {
                    "title": "Payload",
                    "type": "string",
                    "description": "the 'object' a value will be extracted from",
                    "examples": [
                      {
                        "custom_info": {
                          "mentor_data": "some_value"
                        }
                      }
                    ]
                  },
                  "expr": {
                    "title": "Expression",
                    "type": "string",
                    "description": "the string used for lookup",
                    "examples": [
                      "custom_info.mentor_data"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.extract_path_from_payload"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Path From Payload Macro"
                ],
                "default": "standard_macros.extract_path_from_payload",
                "const": "standard_macros.extract_path_from_payload",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to index smart apply questions of a profile associated with positions for filtering. This is only for default smart apply questions, doesn't cover the position specific questions.\n",
            "title": "Indexing smart apply questions.",
            "macro_name": "standard_macros.get_default_smartapply_questions_using_question_id",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "string",
                "required": [
                  "ques_id"
                ],
                "properties": {
                  "ques_id": {
                    "type": "string",
                    "description": "Question id for which answers needs to be fetched for all positions."
                  },
                  "pr_id": {
                    "type": "string",
                    "description": "Profile id of candidate"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.get_default_smartapply_questions_using_question_id"
                ],
                "readOnly": true,
                "enumNames": [
                  "Indexing smart apply questions."
                ],
                "default": "standard_macros.get_default_smartapply_questions_using_question_id",
                "const": "standard_macros.get_default_smartapply_questions_using_question_id",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is for group_ids using the common forms infra to get the counts of forms for a profile. Optionally filtered by template_id (type of form) or the status of the Form.\n",
            "title": "Get forms count",
            "macro_name": "standard_macros.get_forms_count_by_template_id_and_status",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "template_id": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Template ID"
                    },
                    "description": "Template IDs of the forms to count."
                  },
                  "status": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Status string"
                    },
                    "description": "Statuses filter for the forms to count."
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.get_forms_count_by_template_id_and_status"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get forms count"
                ],
                "default": "standard_macros.get_forms_count_by_template_id_and_status",
                "const": "standard_macros.get_forms_count_by_template_id_and_status",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to get the list of the pool_type in all talent plans for a particular employee\n",
            "title": "Get pool types for employees in talent plans",
            "macro_name": "standard_macros.get_pool_type_data_for_talent_plan_employee",
            "macro_type": "transform",
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.get_pool_type_data_for_talent_plan_employee"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get pool types for employees in talent plans"
                ],
                "default": "standard_macros.get_pool_type_data_for_talent_plan_employee",
                "const": "standard_macros.get_pool_type_data_for_talent_plan_employee",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch positions from a given facet field passed in the kwargs and return the pipeline link, display name and id for the position\n",
            "title": "Find position by field",
            "macro_name": "standard_macros.get_positions_by_field",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field": {
                    "title": "Facet field",
                    "type": "string",
                    "default": "None",
                    "description": "Facet field to search position with.",
                    "examples": [
                      "position.ats_data.job_id"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.get_positions_by_field"
                ],
                "readOnly": true,
                "enumNames": [
                  "Find position by field"
                ],
                "default": "standard_macros.get_positions_by_field",
                "const": "standard_macros.get_positions_by_field",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to get the list of the status in all talent plans for a particular employee\n",
            "title": "Get employee status in talent plans",
            "macro_name": "standard_macros.get_talent_plan_employee_data",
            "macro_type": "transform",
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.get_talent_plan_employee_data"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get employee status in talent plans"
                ],
                "default": "standard_macros.get_talent_plan_employee_data",
                "const": "standard_macros.get_talent_plan_employee_data",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to group the values in the list with respect to the value of a specified field. This key_field_path value acts as the key and all the value_field_path values will be captured as a list.\n",
            "title": "Grouping list based on a field.",
            "macro_name": "standard_macros.group_list_by_field_path",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "key_field_path",
                  "value_field_path",
                  "grouped_field_path"
                ],
                "properties": {
                  "key_field_path": {
                    "type": "string",
                    "description": "Field path whose value should act as a key during grouping."
                  },
                  "value_field_path": {
                    "type": "string",
                    "description": "Field path whose value would be captured in the output object as a list."
                  },
                  "grouped_field_path": {
                    "type": "string",
                    "description": "Field path where grouped values would be set in the object."
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.group_list_by_field_path"
                ],
                "readOnly": true,
                "enumNames": [
                  "Grouping list based on a field."
                ],
                "default": "standard_macros.group_list_by_field_path",
                "const": "standard_macros.group_list_by_field_path",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to map a given string to an integer value.",
            "title": "Map value",
            "macro_name": "standard_macros.map_string_to_int_value",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "mapping": {
                    "title": "Mapping",
                    "description": "Define mapping for string to int",
                    "type": "object",
                    "patternProperties": {
                      "^.*$": {
                        "type": "integer",
                        "description": "Integer value corresponding to the string key",
                        "default": 0
                      }
                    },
                    "examples": [
                      {
                        "a": 1,
                        "b": 2
                      }
                    ]
                  },
                  "default_value": {
                    "title": "Default value",
                    "description": "Default value to return if key is not found in mapping",
                    "type": "string",
                    "default": "None",
                    "examples": [
                      999
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.map_string_to_int_value"
                ],
                "readOnly": true,
                "enumNames": [
                  "Map value"
                ],
                "default": "standard_macros.map_string_to_int_value",
                "const": "standard_macros.map_string_to_int_value",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to merge some data at a given data_path from duplicate profiles.\n",
            "title": "Merge From Duplicate Profiles",
            "macro_name": "standard_macros.merge_from_duplicate_profiles",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "data_path"
                ],
                "properties": {
                  "data_path": {
                    "title": "Data Path",
                    "type": "string",
                    "description": "the string used for lookup.",
                    "examples": [
                      "ats_data[?info_type=='candidate_info'].employee_info.level"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.merge_from_duplicate_profiles"
                ],
                "readOnly": true,
                "enumNames": [
                  "Merge From Duplicate Profiles"
                ],
                "default": "standard_macros.merge_from_duplicate_profiles",
                "const": "standard_macros.merge_from_duplicate_profiles",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to add parent dictionaries to a list of dictionaries. example, when we have a list of dictionaries as [dict1, dict2], using expr as 'path1.path2' will convert orignal list to [{path1: {path2: {dict1}}}, {path1: {path2: {dict2}}}]\n",
            "title": "Pack Path Macro",
            "macro_name": "standard_macros.pack_path_all",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "expr": {
                    "type": "string",
                    "title": "Expression",
                    "description": "the name of dict(s) which will be added as a parent dict, to every dict in the list.",
                    "examples": [
                      "e:JobInformation.e:JobInformationGroup"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "standard_macros.pack_path_all"
                ],
                "readOnly": true,
                "enumNames": [
                  "Pack Path Macro"
                ],
                "default": "standard_macros.pack_path_all",
                "const": "standard_macros.pack_path_all",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to split a string to a list based on a separator. By default the separator is ','\n",
            "title": "String to list split based on separator",
            "macro_name": "string_to_list_by_separator",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "separator": {
                    "title": "String separator",
                    "type": "string",
                    "description": "the string used for separating the string.",
                    "default": ",",
                    "examples": [
                      ","
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "string_to_list_by_separator"
                ],
                "readOnly": true,
                "enumNames": [
                  "String to list split based on separator"
                ],
                "default": "string_to_list_by_separator",
                "const": "string_to_list_by_separator",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "Macro to compute application rank based on weighted scores for specified fields and  bucketing them in specified ranges. The macro returns a string with prefix prepended to the rank value.\n",
            "title": "Compute Application Rank",
            "macro_name": "successfactor_macros.calc_app_rank",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "supported_entity_types": [
              "application"
            ],
            "required": [
              "kwargs"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "fields",
                  "ranking",
                  "prefix"
                ],
                "properties": {
                  "fields": {
                    "type": "object",
                    "propertyNames": {
                      "type": "string",
                      "key_title": "Field Name",
                      "value_title": "Field Value",
                      "description": "Name of the field\n"
                    },
                    "patternProperties": {
                      "": {
                        "type": "object",
                        "properties": {
                          "field_type": {
                            "type": "string"
                          },
                          "weight": {
                            "type": "number"
                          },
                          "scores": {
                            "type": "object",
                            "patternProperties": {
                              "": {
                                "type": "number"
                              }
                            }
                          },
                          "propertyNames": {
                            "type": "string",
                            "key_title": "Value",
                            "value_title": "Score",
                            "description": "Name of the value that the score should be assigned to\n"
                          },
                          "patternProperties": {
                            "": {
                              "type": "integer",
                              "description": "The value of the score\n"
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "ranking": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "lower_incl": {
                          "type": "integer"
                        },
                        "upper_excl": {
                          "type": "integer"
                        },
                        "rank": {
                          "type": "integer"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "prefix": {
                    "type": "string",
                    "description": "Field-name to prepend\n",
                    "examples": [
                      "jobReqId"
                    ]
                  },
                  "lowercase": {
                    "type": "boolean",
                    "description": "Will convert to lowercase if set to true.",
                    "default": false
                  },
                  "separator": {
                    "type": "string",
                    "default": ":",
                    "description": "Separator between the prefix and the rank returned type: object\n"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.calc_app_rank"
                ],
                "readOnly": true,
                "enumNames": [
                  "Compute Application Rank"
                ],
                "default": "successfactor_macros.calc_app_rank",
                "const": "successfactor_macros.calc_app_rank",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to generate JSON payload for section for SF\n",
            "title": "candidate background elements",
            "macro_name": "successfactor_macros.candidate_background_elements",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "section_obj_template_str",
                  "field_mapping"
                ],
                "properties": {
                  "section_obj_template_str": {
                    "type": "string",
                    "description": "Template string to evaluate the section_obj",
                    "examples": [
                      "experience",
                      "education",
                      "candidate(if the fields are not modeled as sections but are available as custom_info fields)"
                    ]
                  },
                  "field_mapping": {
                    "type": "object",
                    "description": "Mappings from external section item field to dictionary object determining how to obtain its value"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.candidate_background_elements"
                ],
                "readOnly": true,
                "enumNames": [
                  "candidate background elements"
                ],
                "default": "successfactor_macros.candidate_background_elements",
                "const": "successfactor_macros.candidate_background_elements",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to convert an EF date field value to SF date format. For example, convert timestamp 6111111111 to /Date(6111111111000)/\n",
            "title": "Substitute Template and Convert to SF Date Format",
            "macro_name": "successfactor_macros.convert_to_sf_date",
            "macro_type": "transform",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "template_string"
                ],
                "properties": {
                  "template_string": {
                    "type": "string",
                    "description": "Template to substitute the value of the fields in and then convert it to SF date format.",
                    "examples": [
                      {
                        "{{ entity_obj.start_ts if entity_obj.start_ts else 0 }}": "If start_ts = 11111111, this will yield '/Date(11111111000)/', if start_ts is None then '/Date(0000)/'"
                      }
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.convert_to_sf_date"
                ],
                "readOnly": true,
                "enumNames": [
                  "Substitute Template and Convert to SF Date Format"
                ],
                "default": "successfactor_macros.convert_to_sf_date",
                "const": "successfactor_macros.convert_to_sf_date",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "supported_systems": [
              "successfactor"
            ],
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to add fields to the URL.\n",
            "title": "Get Extra Fields For endpoint",
            "macro_name": "successfactor_macros.default_fetch_macro",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "successfactors"
            ],
            "type": "object",
            "properties": {
              "field": {
                "type": "string",
                "description": "The extra field to be added to the URL",
                "title": "Extra Field"
              },
              "skip_field": {
                "type": "boolean",
                "description": "If we want to skip this field",
                "title": "Skip Field",
                "default": false
              },
              "skip_expand": {
                "type": "boolean",
                "description": "If we want to skip expanding this field",
                "title": "Skip Expand",
                "default": false
              },
              "select_fields": {
                "type": "array",
                "description": "List of select fields to be added to the URL",
                "title": "Select Fields",
                "items": {
                  "type": "string",
                  "description": "field name to be selected"
                },
                "examples": [
                  [
                    "fileName",
                    "resume/fileName"
                  ]
                ]
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.default_fetch_macro"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Extra Fields For endpoint"
                ],
                "default": "successfactor_macros.default_fetch_macro",
                "const": "successfactor_macros.default_fetch_macro",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Extract and map contact consent. We look for \"shareProfile\" inside the raw value passed to this macro. Then, we use the extracted value for \"shareProfile\" and look for it inside the map you have created for Contact Consent. We return None if the entity is not found inside this mapping.\n",
            "title": "Extract Field List",
            "macro_name": "successfactor_macros.extract_and_map_contact_consent",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "contact_consent_mapping"
                ],
                "properties": {
                  "contact_consent_mapping": {
                    "type": "object",
                    "propertyNames": {
                      "type": "string",
                      "key_title": "Share Profile",
                      "value_title": "Contact Consent"
                    },
                    "patternProperties": {
                      "": {
                        "type": "string"
                      }
                    },
                    "description": "it will be a map of key: value pairs.\n"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_and_map_contact_consent"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Field List"
                ],
                "default": "successfactor_macros.extract_and_map_contact_consent",
                "const": "successfactor_macros.extract_and_map_contact_consent",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "Return True if value matches expected_result. Only one of picklist_field or field or data_path should be specified to extract the value.\n",
            "title": "Extract and Match",
            "macro_name": "successfactor_macros.extract_and_match",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "expected_result"
                ],
                "properties": {
                  "picklist_field": {
                    "type": "string",
                    "description": "Picklist Field Name. We use the macro \"extract_picklist_field\" to find the value if this input is specified.",
                    "examples": [
                      "confidencial"
                    ]
                  },
                  "field": {
                    "type": "string",
                    "description": "Field Name. If field name is specified, we look for the field recursively inside the entity object until we find it."
                  },
                  "data_path": {
                    "type": "string",
                    "description": "Data path in entity json data."
                  },
                  "expected_result": {
                    "type": "string",
                    "description": "Expected Result.",
                    "examples": [
                      "yes"
                    ]
                  },
                  "lowercase": {
                    "type": "boolean",
                    "description": "Will convert to lowercase if set to true.",
                    "default": false
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_and_match"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract and Match"
                ],
                "default": "successfactor_macros.extract_and_match",
                "const": "successfactor_macros.extract_and_match",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "value can be extracted using picklist_field or field or data_path. extracted value will be remapped using value_map\n",
            "title": "Extract and Remap",
            "macro_name": "successfactor_macros.extract_and_remap",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "value_map"
                ],
                "properties": {
                  "picklist_field": {
                    "type": "string",
                    "description": "Picklist Field Name.",
                    "examples": [
                      "confidencial"
                    ]
                  },
                  "field": {
                    "type": "string",
                    "description": "Field Name."
                  },
                  "lowercase": {
                    "type": "boolean",
                    "description": "Will convert to lowercase if set to true.",
                    "default": false
                  },
                  "data_path": {
                    "type": "string",
                    "description": "Data path in entity json data."
                  },
                  "value_map": {
                    "type": "object",
                    "propertyNames": {
                      "type": "string",
                      "key_title": "Map (From)",
                      "value_title": "Map (To)"
                    },
                    "patternProperties": {
                      "": {
                        "type": "string"
                      }
                    },
                    "description": "it will be a map of key: value pairs.\n",
                    "examples": [
                      "{'m': 'Male', 'f': 'Female'}"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_and_remap"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract and Remap"
                ],
                "default": "successfactor_macros.extract_and_remap",
                "const": "successfactor_macros.extract_and_remap",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "extract application assessment details. it will output the list of value of vendor_code, score, recommendation_details, completed_evaluations, last_updated\n",
            "title": "Extract app assessment details",
            "macro_name": "successfactor_macros.extract_app_assessment_details",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "expr": {
                    "type": "string",
                    "description": "expression to find job application assessment order\n",
                    "examples": [
                      "jobApplicationAssessmentOrder"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_app_assessment_details"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract app assessment details"
                ],
                "default": "successfactor_macros.extract_app_assessment_details",
                "const": "successfactor_macros.extract_app_assessment_details",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract application question and answer values. We can specify picklist_label, picklist or picklist_id or picklist_code. This returns a string, if you do not specify either of picklist, picklist_label, picklist_code OR picklist_id. Otherwise, it returns a dictionary of the format {'id': value}.\n",
            "title": "Extract Answer (Application Questions)",
            "macro_name": "successfactor_macros.extract_app_qna_value",
            "macro_type": "write_back",
            "supported_systems": [
              "successfactors"
            ],
            "supported_entity_types": [
              "candidate"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "question_id"
                ],
                "properties": {
                  "question_id": {
                    "type": "string",
                    "description": "Unique identifier of the question",
                    "examples": [
                      "q_city"
                    ]
                  },
                  "question_id_suffixes": {
                    "type": "array",
                    "title": "List of suffix",
                    "description": "If an answer for the 'question_id' is missing, then it looks for > an answer using question_id + suffix combination",
                    "items": {
                      "title": "Question id suffix",
                      "type": "string"
                    },
                    "examples": [
                      [
                        "_KR",
                        "_GB",
                        "_US"
                      ]
                    ]
                  },
                  "picklist": {
                    "type": "string",
                    "description": "the picklist field value to be extracted"
                  },
                  "picklist_code": {
                    "type": "string",
                    "description": "the picklist code for value to be extracted"
                  },
                  "picklist_id": {
                    "type": "string",
                    "description": "the picklist Id field for value to be extracted"
                  },
                  "picklist_label": {
                    "type": "string",
                    "description": "the picklist label for value to be extracted"
                  },
                  "default": {
                    "oneOf": [
                      {
                        "type": "string",
                        "title": "Enter String",
                        "description": "the default string value to be used if no value is not found"
                      },
                      {
                        "type": "integer",
                        "title": "Enter Integer",
                        "description": "the default integer value to be used if no value is not found"
                      }
                    ]
                  },
                  "is_date": {
                    "type": "boolean",
                    "description": "convert date to format with miliseconds"
                  },
                  "is_date_notime": {
                    "type": "boolean",
                    "description": "convert date to format with seconds"
                  },
                  "not_required_field": {
                    "type": "boolean",
                    "description": "If true and value is empty then the field will not be added in the payload",
                    "default": false
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_app_qna_value"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Answer (Application Questions)"
                ],
                "default": "successfactor_macros.extract_app_qna_value",
                "const": "successfactor_macros.extract_app_qna_value",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "Extract attachment payload\n",
            "title": "Extract attachment payload",
            "macro_name": "successfactor_macros.extract_attachment_payload",
            "macro_type": "write_back",
            "supported_systems": [
              "successfactors"
            ],
            "supported_entity_types": [
              "candidate"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "question_id": {
                    "type": "string",
                    "description": "question_id corresponding to attachments\n",
                    "examples": [
                      "q_attachment5"
                    ]
                  },
                  "default": {
                    "type": "string",
                    "description": "Fallback value in case data is not found\n",
                    "examples": [
                      56768
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_attachment_payload"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract attachment payload"
                ],
                "default": "successfactor_macros.extract_attachment_payload",
                "const": "successfactor_macros.extract_attachment_payload",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract attribute value. It follows the same signature as adapter_macros.extract_attr_and_default We can specify picklist or picklist_label or picklist_id or picklist_code. This returns a string, if you do not specify either of picklist, picklist_label, picklist_code OR picklist_id. Otherwise, it returns a dictionary of the format {'id': value}.\n",
            "title": "Extract Attribute Value",
            "macro_name": "successfactor_macros.extract_attr_value",
            "macro_type": "write_back",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "attr"
                ],
                "properties": {
                  "attr": {
                    "type": "string",
                    "description": "the field name whose value needs to be remapped.",
                    "examples": [
                      "gender"
                    ]
                  },
                  "picklist": {
                    "type": "string",
                    "description": "the picklist field value to be extracted"
                  },
                  "picklist_code": {
                    "type": "string",
                    "description": "the picklist code for value to be extracted"
                  },
                  "picklist_id": {
                    "type": "string",
                    "description": "the picklist Id field for value to be extracted"
                  },
                  "picklist_label": {
                    "type": "string",
                    "description": "the picklist label for value to be extracted"
                  },
                  "default": {
                    "type": "string",
                    "description": "the default value to be used if no attribute value is found"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_attr_value"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Attribute Value"
                ],
                "default": "successfactor_macros.extract_attr_value",
                "const": "successfactor_macros.extract_attr_value",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "Macro to fetch any custom date for any string date field. It converts the specified date field into date object using the date format given.\n",
            "title": "Extract Date Field",
            "macro_name": "successfactor_macros.extract_date_field",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "field_name"
                ],
                "properties": {
                  "field_name": {
                    "description": "The jsonpath of the specified field in the raw_value object.\n",
                    "type": "string"
                  },
                  "date_format": {
                    "description": "The date format of the field specified.\n",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_date_field"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Date Field"
                ],
                "default": "successfactor_macros.extract_date_field",
                "const": "successfactor_macros.extract_date_field",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract education values from custom education results, given 4 required inputs - education_key, school_key, degree_key, and major_key. Returns a list of AtsEducation objects.\n",
            "title": "Extract Custom Education",
            "macro_name": "successfactor_macros.extract_education",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "education_key",
                  "school_key",
                  "degree_key",
                  "major_key"
                ],
                "properties": {
                  "education_key": {
                    "type": "string",
                    "description": "Custom Education Key"
                  },
                  "school_key": {
                    "type": "string",
                    "description": "School key"
                  },
                  "degree_key": {
                    "type": "string",
                    "description": "Degree key"
                  },
                  "major_key": {
                    "type": "string",
                    "description": "Major key"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_education"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Custom Education"
                ],
                "default": "successfactor_macros.extract_education",
                "const": "successfactor_macros.extract_education",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "value can be extracted using picklist_field or data_path. first non empty field value will be returned. if field ends with '/picklistLabels' it will be treated as picklist field else it is data_path.\n",
            "title": "Extract Field List",
            "macro_name": "successfactor_macros.extract_from_field_list",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "field_list"
                ],
                "properties": {
                  "field_list": {
                    "type": "array",
                    "description": "List of Fields. if field ends with '/picklistLabels' it will be treated as picklist field else it is data_path.\n",
                    "items": {
                      "type": "string",
                      "examples": [
                        "hiringBand/picklistLabels",
                        "subbands/picklistLabels",
                        "filter13/picklistLabels"
                      ]
                    }
                  },
                  "lowercase": {
                    "type": "boolean",
                    "description": "Will convert to lowercase if set to true.",
                    "default": false
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_from_field_list"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Field List"
                ],
                "default": "successfactor_macros.extract_from_field_list",
                "const": "successfactor_macros.extract_from_field_list",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract inside work experience value, given 5 required inputs - inside_exp_key, company_key, title_key, description_key and location_key. Returns a list of AtsExperience objects.\n",
            "title": "Extract Inside Work Experience",
            "macro_name": "successfactor_macros.extract_inside_work_experience",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "inside_exp_key",
                  "company_key",
                  "title_key",
                  "description_key",
                  "location_key"
                ],
                "properties": {
                  "inside_exp_key": {
                    "type": "string",
                    "description": "Inside experience key"
                  },
                  "company_key": {
                    "type": "string",
                    "description": "Company key"
                  },
                  "title_key": {
                    "type": "string",
                    "description": "Title key"
                  },
                  "description_key": {
                    "type": "string",
                    "description": "Description key"
                  },
                  "location_key": {
                    "type": "string",
                    "description": "Location key"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_inside_work_experience"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Inside Work Experience"
                ],
                "default": "successfactor_macros.extract_inside_work_experience",
                "const": "successfactor_macros.extract_inside_work_experience",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro parses the location_objlist field in the position entity to provide meaningful locations. Within each entry in location_obj_list, we iterate over every location attr and join the results with a ','. If location attr is not specified, we look for \"name\" and \"externalCode\". Please add the fields that are to be expanded in the position entity at custom_fields_v2.position._fetch.jr and custom_fields_v2.position._fetch.jr_batch in ats_config.\n",
            "title": "Fetch Location",
            "macro_name": "successfactor_macros.extract_location_objlist",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "supported_entity_types": [
              "position"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "location_attrs": {
                    "type": "array",
                    "description": "ordered list of various attributes that comprise a location, their values will be obtained from fields expanded and joined by ', '\n",
                    "items": {
                      "type": "string",
                      "examples": [
                        "city",
                        "state",
                        "country"
                      ]
                    }
                  },
                  "primary_first": {
                    "type": "boolean",
                    "default": false,
                    "description": "This property helps deal with positions that have multiple locations If true, locations having isPrimary set to True will appear first in the returned list.\n"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_location_objlist"
                ],
                "readOnly": true,
                "enumNames": [
                  "Fetch Location"
                ],
                "default": "successfactor_macros.extract_location_objlist",
                "const": "successfactor_macros.extract_location_objlist",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "Extract the value of picklist field at a parent level\n",
            "title": "Extract Picklist Field at Level",
            "macro_name": "successfactor_macros.extract_parent_picklist_field",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "picklist_field",
                  "parent_levels"
                ],
                "properties": {
                  "picklist_field": {
                    "type": "string",
                    "description": "Picklist Field Name.",
                    "examples": [
                      "city",
                      "state"
                    ]
                  },
                  "parent_levels": {
                    "type": "integer",
                    "description": "Parent Level.",
                    "examples": [
                      "city",
                      "state"
                    ]
                  },
                  "lowercase": {
                    "type": "boolean",
                    "description": "Will convert to lowercase if set to true.",
                    "default": false
                  },
                  "separator": {
                    "type": "string",
                    "description": "separator used to join the multiple values.",
                    "default": ","
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_parent_picklist_field"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Picklist Field at Level"
                ],
                "default": "successfactor_macros.extract_parent_picklist_field",
                "const": "successfactor_macros.extract_parent_picklist_field",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "Extract the value of picklist field. We look for the specific picklist field (input) inside the entity_json. We fetch results inside it. Then, we iterate over this and look for \"results\" key inside \"picklistLabels\". We return the first \"value\" where the \"locale\" starts with \"en_\"\n",
            "title": "Extract Picklist Field",
            "macro_name": "successfactor_macros.extract_picklist_field",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "picklist_field"
                ],
                "properties": {
                  "picklist_field": {
                    "type": "string",
                    "description": "Picklist Field Name.",
                    "examples": [
                      "city",
                      "state"
                    ]
                  },
                  "lowercase": {
                    "type": "boolean",
                    "description": "Will convert to lowercase if set to true.",
                    "default": false
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_picklist_field"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Picklist Field"
                ],
                "default": "successfactor_macros.extract_picklist_field",
                "const": "successfactor_macros.extract_picklist_field",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "Macro to extract recruiting team followers and assign role to team members\n",
            "title": "Extract Recruiting Team Followers",
            "macro_name": "successfactor_macros.extract_recruiting_team_followers",
            "macro_type": "transform",
            "supported_entity_types": [
              "position"
            ],
            "supported_systems": [
              "successfactors"
            ],
            "required": [
              "kwargs"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "recruiting_teams"
                ],
                "properties": {
                  "recruiting_teams": {
                    "anyOf": [
                      {
                        "type": "array",
                        "title": "List of teams",
                        "items": {
                          "title": "Team Name",
                          "type": "string"
                        }
                      },
                      {
                        "type": "object",
                        "title": "Map of team name to role",
                        "propertyNames": {
                          "key_title": "Team Name",
                          "value_title": "Role",
                          "type": "string"
                        },
                        "patternProperties": {
                          "": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  },
                  "role": {
                    "type": "string",
                    "description": "(Optional) This role will be applied if the recruiting teams is a list\n",
                    "examples": [
                      "recruiter",
                      "hiring_manager"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_recruiting_team_followers"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Recruiting Team Followers"
                ],
                "default": "successfactor_macros.extract_recruiting_team_followers",
                "const": "successfactor_macros.extract_recruiting_team_followers",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "Macro to fetch any custom date field in STANDARD successfactors date format for any date field in eightfold \"/Date(1397433600000)/\"\n",
            "title": "Extract Standard Date Field",
            "macro_name": "successfactor_macros.extract_standard_date_field",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "field_name"
                ],
                "properties": {
                  "field_name": {
                    "description": "The jsonpath of the specified field in the raw_value object.\n",
                    "type": "string"
                  },
                  "date_format": {
                    "description": "Configure this if you need the date in a specific format. Else it return the date object.\n",
                    "type": "string"
                  },
                  "timezone": {
                    "description": "The timezone is used for adding offset to the UTC timestamp. All available timezones are present in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones , TZ identifier represent timezone and UTC offset (STD) will be added to the timestamp. The default value of timezone is UTC having STD of 0.\n",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_standard_date_field"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Standard Date Field"
                ],
                "default": "successfactor_macros.extract_standard_date_field",
                "const": "successfactor_macros.extract_standard_date_field",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "Macro to retrieve SF state_picklist id for state location in candidate.address We can specify picklist or picklist_label or picklist_id or picklist_code. This returns a string, if you do not specify either of picklist, picklist_code, picklist_label OR picklist_id. Otherwise, it returns a dictionary of the format {'id': value}.\n",
            "title": "Extract state (picklist ID)",
            "macro_name": "successfactor_macros.extract_state_id_from_candidate_location",
            "macro_type": "write_back",
            "supported_systems": [
              "successfactors"
            ],
            "supported_entity_types": [
              "candidate"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "picklist": {
                    "type": "string",
                    "description": "picklist\n"
                  },
                  "picklist_id": {
                    "type": "string",
                    "description": "picklist id\n",
                    "examples": [
                      "state"
                    ]
                  },
                  "picklist_code": {
                    "type": "string",
                    "description": "picklist code\n"
                  },
                  "default": {
                    "type": "string",
                    "description": "Fallback value in case data is not found\n",
                    "examples": [
                      56768
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.extract_state_id_from_candidate_location"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract state (picklist ID)"
                ],
                "default": "successfactor_macros.extract_state_id_from_candidate_location",
                "const": "successfactor_macros.extract_state_id_from_candidate_location",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch extra information about employee from SF during sync.\n",
            "title": "fetch data from endpoint",
            "macro_name": "successfactor_macros.fetch_employee_data_from_endpoint",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "field_mapping",
                  "endpoint"
                ],
                "properties": {
                  "field_mapping": {
                    "type": "object",
                    "description": "Mapping to construct the final object from data fetched from ATS. Keys in the map are the fields in the final object to be returned and values have the logic to retrieve the data field. If a key is empty (''), then instead of returning a dict of key-value pairs, the value retrieved from empty key's mapping is returned. Logic to retrieve the value can be via: 1. Macro with kwargs.\n    example:\n    field_mapping: {\n        'target_field_path': {\n            'macro': 'macro_name',\n            'kwargs': {\n                'args_field_1': 'args_input_1'\n            }\n        }\n    }\n2. source_field_path: Simple source_field path in the ats content from which the value can be retrieved.\n    example:\n    field_mapping: {\n        'target_field_path': {\n            'source_field_path': 'field_path'\n        }\n    }\n3. picklist_field: Name of the picklist field from whose labels the value will be extracted. If mentioned,\n   this will override the source_field_path.\n    example:\n    field_mapping: {\n        'target_field_path': {\n            'picklist_field': 'field_name'\n        }\n    }\n"
                  },
                  "endpoint": {
                    "type": "string",
                    "description": "The endpoint from which the data would be fetched from SF. Format of the URL would be <harvest_api_url>/<endpoint>?$filter=userId eq {employee_id}&$format=json&$expand={fetch_fields}\n"
                  },
                  "group_by": {
                    "type": "object",
                    "description": "Indicates what fields are to be grouped and which field acts as the select field.\n",
                    "properties": {
                      "key_field_path": {
                        "type": "string",
                        "description": "The field by which grouping has to be done.\n"
                      },
                      "value_field_path": {
                        "type": "string",
                        "description": "The field which has to be grouped.\n"
                      },
                      "grouped_field_path": {
                        "type": "string",
                        "description": "Field path where grouped values would be set in the object."
                      }
                    },
                    "additionalProperties": false
                  },
                  "post_fetch_filters": {
                    "type": "array",
                    "description": "List of filters applied after fetching the data from the endpoint.\n",
                    "items": {
                      "type": "object",
                      "properties": {
                        "field_path": {
                          "type": "string",
                          "description": "Path of the field which is to be used as filter."
                        },
                        "field_value": {
                          "type": "string",
                          "description": "Value of the field to filter."
                        },
                        "picklist_field": {
                          "type": "string",
                          "description": "Name of the picklist field whose value is to be filtered."
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.fetch_employee_data_from_endpoint"
                ],
                "readOnly": true,
                "enumNames": [
                  "fetch data from endpoint"
                ],
                "default": "successfactor_macros.fetch_employee_data_from_endpoint",
                "const": "successfactor_macros.fetch_employee_data_from_endpoint",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "Description": "This macro is used to fetch application expiry for a corresponding applicant against a specific job id\n",
            "title": "Fetch Agency Application Expiry",
            "macro_name": "successfactor_macros.get_application_expiry_ts",
            "macro_type": "transform",
            "raw_value": "<list> of <string> where each element is a string representing <job_req_id>:<application_expiry_ts>",
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "job_req_id"
                ],
                "properties": {
                  "job_req_id": {
                    "type": "string",
                    "description": "The job id for which we want to fetch the application expiry time"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.get_application_expiry_ts"
                ],
                "readOnly": true,
                "enumNames": [
                  "Fetch Agency Application Expiry"
                ],
                "default": "successfactor_macros.get_application_expiry_ts",
                "const": "successfactor_macros.get_application_expiry_ts",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "supported_systems": [
              "successfactor"
            ],
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to get candidate candidate's current employer (company name) from the candidates first experience object. We fallback to default, if not employer is found. We can specify picklist or picklist_label or picklist_id or picklist_code. This returns a string, if you do not specify either of picklist, picklist_label, picklist_code OR picklist_id. Otherwise, it returns a dictionary of the format {'id': value}.\n",
            "title": "Get Candidate Current Employer",
            "macro_name": "successfactor_macros.get_cand_current_employer_value",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "supported_entity_types": [
              "candidate"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "picklist": {
                    "type": "string",
                    "description": "the picklist field value to be extracted"
                  },
                  "picklist_code": {
                    "type": "string",
                    "description": "the picklist code for value to be extracted"
                  },
                  "picklist_id": {
                    "type": "string",
                    "description": "the picklist Id field for value to be extracted"
                  },
                  "picklist_label": {
                    "type": "string",
                    "description": "the picklist label for value to be extracted"
                  },
                  "default": {
                    "type": "string",
                    "description": "the default value to be used if current employer is not found"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.get_cand_current_employer_value"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Candidate Current Employer"
                ],
                "default": "successfactor_macros.get_cand_current_employer_value",
                "const": "successfactor_macros.get_cand_current_employer_value",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract candidate experience months field value. We can specify picklist or picklist_label or picklist_id or picklist_code. This returns a string, if you do not specify either of picklist, picklist_label, picklist_code OR picklist_id. Otherwise, it returns a dictionary of the format {'id': value}.\n",
            "title": "Get Candidate Experience (in Months)",
            "macro_name": "successfactor_macros.get_cand_exp_months_field_value",
            "macro_type": "write_back",
            "supported_systems": [
              "successfactors"
            ],
            "supported_entity_types": [
              "candidate"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "picklist": {
                    "type": "string",
                    "description": "the picklist field value to be extracted"
                  },
                  "picklist_code": {
                    "type": "string",
                    "description": "the picklist code for value to be extracted"
                  },
                  "picklist_id": {
                    "type": "string",
                    "description": "the picklist Id field for value to be extracted"
                  },
                  "picklist_label": {
                    "type": "string",
                    "description": "the picklist label for value to be extracted"
                  },
                  "default": {
                    "type": "string",
                    "description": "the default value to be used if experience months are not found"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.get_cand_exp_months_field_value"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Candidate Experience (in Months)"
                ],
                "default": "successfactor_macros.get_cand_exp_months_field_value",
                "const": "successfactor_macros.get_cand_exp_months_field_value",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract candidate experience years field value. We can specify picklist or picklist_label or picklist_id or picklist_code. This returns a string, if you do not specify either of picklist,  picklist_code, picklist_label OR picklist_id. Otherwise, it returns a dictionary of the format {'id': value}.\n",
            "title": "Get Candidate Experience (in Years)",
            "macro_name": "successfactor_macros.get_cand_exp_years_field_value",
            "macro_type": "write_back",
            "supported_systems": [
              "successfactors"
            ],
            "supported_entity_types": [
              "candidate"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "picklist": {
                    "type": "string",
                    "description": "the picklist field value to be extracted"
                  },
                  "picklist_code": {
                    "type": "string",
                    "description": "the picklist code for value to be extracted"
                  },
                  "picklist_id": {
                    "type": "string",
                    "description": "the picklist Id field for value to be extracted"
                  },
                  "picklist_label": {
                    "type": "string",
                    "description": "the picklist label for value to be extracted"
                  },
                  "default": {
                    "type": "string",
                    "description": "the default value to be used if experience years are not found"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.get_cand_exp_years_field_value"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Candidate Experience (in Years)"
                ],
                "default": "successfactor_macros.get_cand_exp_years_field_value",
                "const": "successfactor_macros.get_cand_exp_years_field_value",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to get candidate location state value. We can specify picklist or picklist_label or picklist_id or picklist_code. This returns a string, if you do not specify either of picklist, picklist_label, picklist_code OR picklist_id. Otherwise, it returns a dictionary of the format {'id': value}.\n",
            "title": "Get Candidate Location State Value",
            "macro_name": "successfactor_macros.get_cand_location_state_value",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "supported_entity_types": [
              "candidate"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "picklist": {
                    "type": "string",
                    "description": "the picklist field value to be extracted",
                    "examples": [
                      "yesno"
                    ]
                  },
                  "picklist_code": {
                    "type": "string",
                    "description": "the picklist code for value to be extracted"
                  },
                  "picklist_id": {
                    "type": "string",
                    "description": "the picklist Id field for value"
                  },
                  "picklist_label": {
                    "type": "string",
                    "description": "the picklist label for value to be extracted"
                  },
                  "default": {
                    "type": "string",
                    "description": "the default value to be used if no location state is found"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.get_cand_location_state_value"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Candidate Location State Value"
                ],
                "default": "successfactor_macros.get_cand_location_state_value",
                "const": "successfactor_macros.get_cand_location_state_value",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "Get disclaim date. returns '/Date({}000+0000)/'.format(int(time.time()))\n",
            "title": "Get disclaim date",
            "macro_name": "successfactor_macros.get_disclaim_date",
            "macro_type": "write_back",
            "supported_systems": [
              "successfactors"
            ],
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.get_disclaim_date"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get disclaim date"
                ],
                "default": "successfactor_macros.get_disclaim_date",
                "const": "successfactor_macros.get_disclaim_date",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Returns true if any application source or source_type is employee or applied\n",
            "title": "Get disclaim sign",
            "macro_name": "successfactor_macros.get_disclaim_sign",
            "macro_type": "write_back",
            "supported_systems": [
              "successfactors"
            ],
            "supported_entity_types": [
              "candidate"
            ],
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.get_disclaim_sign"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get disclaim sign"
                ],
                "default": "successfactor_macros.get_disclaim_sign",
                "const": "successfactor_macros.get_disclaim_sign",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract IJP value if candidate has IJP Application. We can specify picklist or picklist_label or picklist_id or picklist_code. This returns a string, if you do not specify either of picklist, picklist_label, picklist_code OR picklist_id. Otherwise, it returns a dictionary of the format {'id': value}.\n",
            "title": "Get IJP Value",
            "macro_name": "successfactor_macros.get_ijp_value",
            "macro_type": "write_back",
            "supported_systems": [
              "successfactors"
            ],
            "supported_entity_types": [
              "candidate"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "picklist": {
                    "type": "string",
                    "description": "the picklist field value to be extracted",
                    "examples": [
                      "yesno"
                    ]
                  },
                  "picklist_code": {
                    "type": "string",
                    "description": "the picklist code for value to be extracted"
                  },
                  "picklist_id": {
                    "type": "string",
                    "description": "the picklist Id field for value to be extracted"
                  },
                  "picklist_label": {
                    "type": "string",
                    "description": "the picklist label for value to be extracted"
                  },
                  "default": {
                    "type": "string",
                    "description": "the default value to be used if no IJP value is found"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.get_ijp_value"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get IJP Value"
                ],
                "default": "successfactor_macros.get_ijp_value",
                "const": "successfactor_macros.get_ijp_value",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is meant for fetching HTTP response from a url (and other parameters) provided to the macro.\n",
            "title": "Get (json) content from URL",
            "macro_name": "successfactor_macros.get_url_content",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "description": "The url which we want to fetch the content from",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.get_url_content"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get (json) content from URL"
                ],
                "default": "successfactor_macros.get_url_content",
                "const": "successfactor_macros.get_url_content",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to set the application status as withdrawn by looking for the specified withdraw_status in the withdraw_status_path.\n",
            "title": "Remap status for withdrawn application",
            "macro_name": "successfactor_macros.remap_status_for_withdrawn_application",
            "macro_type": "transform",
            "supported_systems": [
              "successfactors"
            ],
            "supported_entity_types": [
              "application"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "application_status_to_remap",
                  "withdraw_status"
                ],
                "properties": {
                  "application_status_to_remap": {
                    "type": "string",
                    "description": "The value of the application status that is to be remapped to withdraw",
                    "examples": [
                      "Disqualified"
                    ]
                  },
                  "withdraw_status_path": {
                    "type": "string",
                    "description": "The json path in entity json to look for the specified withdraw_status",
                    "default": "jobAppStatus.appStatusName"
                  },
                  "withdraw_status": {
                    "type": "string",
                    "description": "Custom status name representing the withdrawn status",
                    "examples": [
                      "Withdrawn by Candidate - EF"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.remap_status_for_withdrawn_application"
                ],
                "readOnly": true,
                "enumNames": [
                  "Remap status for withdrawn application"
                ],
                "default": "successfactor_macros.remap_status_for_withdrawn_application",
                "const": "successfactor_macros.remap_status_for_withdrawn_application",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to transform any field. We can specify picklist or picklist_label or picklist_id or picklist_code. This returns a string, if you do not specify either of picklist, picklist_label, picklist_code OR picklist_id. Otherwise, it returns a dictionary of the format {'id': value}.\n",
            "title": "Transorm Value Field",
            "macro_name": "successfactor_macros.transform_value_field",
            "macro_type": "write_back",
            "supported_systems": [
              "successfactors"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "the value of field to be extracted",
                    "examples": [
                      "N/A"
                    ]
                  },
                  "picklist": {
                    "type": "string",
                    "description": "the picklist field value to be extracted"
                  },
                  "picklist_code": {
                    "type": "string",
                    "description": "the picklist code for value to be extracted"
                  },
                  "picklist_id": {
                    "type": "string",
                    "description": "the picklist Id field for value to be extracted"
                  },
                  "picklist_label": {
                    "type": "string",
                    "description": "the picklist label for value to be extracted"
                  },
                  "default": {
                    "type": "string",
                    "description": "the default value to be used if no transform value is found"
                  },
                  "value_remap": {
                    "type": "object",
                    "propertyNames": {
                      "type": "string",
                      "key_title": "Map (From)",
                      "value_title": "Map(To)"
                    },
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "it will be a map of key: value pairs.\n",
                    "examples": [
                      "{'Yes': 'yesno_Yes', 'No': 'yesno_No'}",
                      "{'m': 'Male', 'f': 'Female'}"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "successfactor_macros.transform_value_field"
                ],
                "readOnly": true,
                "enumNames": [
                  "Transorm Value Field"
                ],
                "default": "successfactor_macros.transform_value_field",
                "const": "successfactor_macros.transform_value_field",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "field_path required when proj_clause not specified proj_clause and alias kwarg (optional) proj_clause is only the inner projection query, eg. DEFAULT_PROJ_CLAUSE\n",
            "title": "Get Projection Clause",
            "macro_name": "taleo_fetch_macros.get_proj_clause",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "taleo"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field_path": {
                    "type": "string",
                    "description": "Field path, can have comma separated values",
                    "examples": [
                      "Internal_20Business_20Unit,Description"
                    ]
                  },
                  "proj_clause": {
                    "type": "string",
                    "description": "projection query inside <quer:projection>"
                  },
                  "alias": {
                    "type": "string",
                    "description": "Alias for the query (optional). when alias is present, it as added as projectedField param of <quer:projection>"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "taleo_fetch_macros.get_proj_clause"
                ],
                "readOnly": true,
                "enumNames": [
                  "Get Projection Clause"
                ],
                "default": "taleo_fetch_macros.get_proj_clause",
                "const": "taleo_fetch_macros.get_proj_clause",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract diversity answers XML given a list of question IDs. Returns an XML.\n",
            "title": "Extract Diversity Answers XML",
            "macro_name": "taleo_macros.extract_diversity_answers_xml",
            "macro_type": "transform",
            "supported_entity_types": [
              "application"
            ],
            "supported_systems": [
              "taleo"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "diversity_question_ids": {
                    "type": "array",
                    "description": "A list of question IDs for diversity",
                    "items": {
                      "type": "string",
                      "description": "Question ID for which XML needs to be extracted"
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "taleo_macros.extract_diversity_answers_xml"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Diversity Answers XML"
                ],
                "default": "taleo_macros.extract_diversity_answers_xml",
                "const": "taleo_macros.extract_diversity_answers_xml",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to populate the Job Description If External Description Present return External Description Else If Internal Description Present return External Description Else return default configured value\n",
            "title": "Extract Job Description",
            "macro_name": "taleo_macros.extract_job_description",
            "macro_type": "transform",
            "supported_entity_types": [
              "position"
            ],
            "supported_systems": [
              "taleo"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "default_job_desc": {
                    "type": "string",
                    "description": "Default job description if no job descriptoin is found"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "taleo_macros.extract_job_description"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Job Description"
                ],
                "default": "taleo_macros.extract_job_description",
                "const": "taleo_macros.extract_job_description",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract locations for Taleo.\n",
            "title": "Extract Location (Taleo)",
            "macro_name": "taleo_macros.extract_location",
            "macro_type": "transform",
            "supported_systems": [
              "taleo"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "fields": {
                    "description": "The fields which need to be added to extract locations",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "location_level_mapping": {
                    "type": "object",
                    "propertyNames": {
                      "type": "string",
                      "key_title": "Location Level",
                      "value_title": "Mapping Level"
                    },
                    "patternProperties": {
                      "": {
                        "type": "string",
                        "description": "Mapping for location level"
                      }
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "taleo_macros.extract_location"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Location (Taleo)"
                ],
                "default": "taleo_macros.extract_location",
                "const": "taleo_macros.extract_location",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract position questions for positions given \n",
            "title": "Extract Position Questions",
            "macro_name": "taleo_macros.extract_position_questions",
            "macro_type": "transform",
            "supported_entity_types": [
              "position"
            ],
            "supported_systems": [
              "taleo"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "questions": {
                    "type": "array",
                    "description": "A list of metadata for questions.",
                    "items": {
                      "type": "object",
                      "required": [
                        "posting_type",
                        "question_id",
                        "question",
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "the type of question",
                          "examples": [
                            "instruction",
                            "dropdown",
                            "text-row"
                          ]
                        },
                        "posting_type": {
                          "type": "string",
                          "description": "posting type",
                          "enum": [
                            "internal",
                            "external",
                            "all"
                          ],
                          "enumNames": [
                            "Internal",
                            "External",
                            "All"
                          ]
                        },
                        "is_required": {
                          "type": "boolean",
                          "description": "is the question required or not"
                        },
                        "question": {
                          "type": "string",
                          "description": "question in string format"
                        },
                        "question_id": {
                          "type": "string",
                          "description": "question Id in ATS"
                        },
                        "max_length": {
                          "type": "integer",
                          "description": "maximum length of input for question"
                        },
                        "choices_v2": {
                          "description": "choices for given question. valid for question type - dropdown",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "label": {
                                "type": "string",
                                "description": "label for choice"
                              },
                              "value": {
                                "type": "string",
                                "description": "value for choice"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "display_order": {
                          "description": "display order for question",
                          "type": "integer"
                        },
                        "countries": {
                          "type": "array",
                          "description": "list of countries where the question should be used",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "taleo_macros.extract_position_questions"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Position Questions"
                ],
                "default": "taleo_macros.extract_position_questions",
                "const": "taleo_macros.extract_position_questions",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract proj alias field. It has 3 inputs - alias, default and data type. It returns the value for the alias if it is found, otherwise returns the configured default value\n",
            "title": "Extract Projection Alias Field",
            "macro_name": "taleo_macros.extract_proj_alias_field",
            "macro_type": "transform",
            "supported_systems": [
              "taleo"
            ],
            "properties": {
              "kwargs": {
                "required": [
                  "alias"
                ],
                "type": "object",
                "properties": {
                  "alias": {
                    "type": "string",
                    "description": "The field for which we need to configure an alias"
                  },
                  "data_type": {
                    "type": "string",
                    "title": "Data Type",
                    "description": "the data_type to convert the value into",
                    "default": "string",
                    "enum": [
                      "string",
                      "int",
                      "bool",
                      "date",
                      "datetime",
                      "float"
                    ],
                    "enumNames": [
                      "String",
                      "Integer",
                      "Boolean",
                      "Date",
                      "Datetime",
                      "Float"
                    ]
                  },
                  "default": {
                    "type": "string",
                    "description": "Safe fallback value to use if no value is found for given alias field"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "taleo_macros.extract_proj_alias_field"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Projection Alias Field"
                ],
                "default": "taleo_macros.extract_proj_alias_field",
                "const": "taleo_macros.extract_proj_alias_field",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract source reference XML for applications\n",
            "title": "Extract Source Reference XML",
            "macro_name": "taleo_macros.extract_source_reference_xml",
            "macro_type": "transform",
            "supported_entity_types": [
              "application"
            ],
            "supported_systems": [
              "taleo"
            ],
            "properties": {
              "kwargs": {
                "required": [
                  "field_list"
                ],
                "type": "object",
                "properties": {
                  "field_list": {
                    "type": "array",
                    "description": "A list of question IDs for diversity",
                    "items": {
                      "type": "object",
                      "properties": {
                        "question_id": {
                          "type": "string",
                          "description": "Question ID used to create the XML"
                        },
                        "exclude_from_qna": {
                          "description": "Flag to exclude field from QnA when fetching all questions for applications",
                          "type": "boolean"
                        },
                        "conditional_values": {
                          "type": "array",
                          "description": "Conditional source values",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "taleo_macros.extract_source_reference_xml"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Source Reference XML"
                ],
                "default": "taleo_macros.extract_source_reference_xml",
                "const": "taleo_macros.extract_source_reference_xml",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract UDF value. There are three inputs - udf_name, default and extractor. Returns a single value.\n",
            "title": "Extract UDF Value",
            "macro_name": "taleo_macros.extract_udf_value",
            "macro_type": "transform",
            "supported_systems": [
              "taleo"
            ],
            "properties": {
              "kwargs": {
                "required": [
                  "udf_name"
                ],
                "type": "object",
                "properties": {
                  "udf_name": {
                    "description": "The udf_name of value to be extracted",
                    "type": "string"
                  },
                  "default": {
                    "description": "Default value to return if udf_value is not found",
                    "type": "string"
                  },
                  "extractor": {
                    "description": "The key where the udf value is present",
                    "type": "string",
                    "default": "e:Code"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "taleo_macros.extract_udf_value"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract UDF Value"
                ],
                "default": "taleo_macros.extract_udf_value",
                "const": "taleo_macros.extract_udf_value",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract value by level for 3 inputs - fields, level and field_name\n",
            "title": "Extract Value by Level",
            "macro_name": "taleo_macros.extract_value_by_level",
            "macro_type": "transform",
            "supported_systems": [
              "taleo"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "fields": {
                    "description": "The fields which need to be added to extract locations",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "level": {
                    "type": "integer",
                    "description": "level of location"
                  },
                  "field_name": {
                    "type": "string",
                    "description": "field name containing data to be extracted",
                    "examples": [
                      "e:Location",
                      "e:JobField"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "taleo_macros.extract_value_by_level"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Value by Level"
                ],
                "default": "taleo_macros.extract_value_by_level",
                "const": "taleo_macros.extract_value_by_level",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract Visa status from questions\n",
            "title": "Extract Visa Status from Questions",
            "macro_name": "taleo_macros.extract_visa_statuses_from_questions",
            "macro_type": "transform",
            "supported_entity_types": [
              "candidate"
            ],
            "supported_systems": [
              "taleo"
            ],
            "properties": {
              "kwargs": {
                "required": [
                  "question_to_visa_status"
                ],
                "type": "object",
                "properties": {
                  "question_to_visa_status": {
                    "type": "object",
                    "propertyNames": {
                      "type": "string",
                      "key_title": "Country Code",
                      "value_title": "Conditional Keys"
                    },
                    "patternProperties": {
                      "": {
                        "type": "object",
                        "properties": {
                          "Yes": {
                            "type": "string",
                            "description": "Value to return if answer for question is Yes"
                          },
                          "No": {
                            "type": "string",
                            "description": "Value to return if answer for question is No"
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "taleo_macros.extract_visa_statuses_from_questions"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Visa Status from Questions"
                ],
                "default": "taleo_macros.extract_visa_statuses_from_questions",
                "const": "taleo_macros.extract_visa_statuses_from_questions",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to generate additional fields XML\n",
            "title": "Generate Additional Fields XML",
            "macro_name": "taleo_macros.generate_additional_fields_xml",
            "macro_type": "transform",
            "supported_entity_types": [
              "candidate",
              "application"
            ],
            "supported_systems": [
              "taleo"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field_list": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "udf_name": {
                          "description": "The udf name of value to be extracted. This can be skipped if field_name is configured",
                          "type": "string"
                        },
                        "field_name": {
                          "description": "The field name of value to be extracted. This can be skipped if udf_name is configured",
                          "type": "string"
                        },
                        "question_id": {
                          "description": "The question ID used to extract the value. This can be skipped if field is configured",
                          "type": "string"
                        },
                        "field": {
                          "description": "The value of field to be extracted from candidate object. This can be skipped if question_id or data_path is configured",
                          "type": "string"
                        },
                        "data_path": {
                          "description": "Data path to be extracted from candidate object. This can be skipped if question_id or field is configured",
                          "type": "string"
                        },
                        "delimiter": {
                          "description": "The delimiter used to split multiple values into smaller parts",
                          "type": "string",
                          "default": ","
                        },
                        "index": {
                          "description": "If the value is a string then this kwarg is the index of element to be used after the value is split using the delimiter. If the value is a list then this kwargs is the index of the element in the list.",
                          "type": "integer",
                          "default": -1
                        },
                        "exclude_from_qna": {
                          "description": "Flag to exclude field from QnA when fetching all questions for applications",
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "taleo_macros.generate_additional_fields_xml"
                ],
                "readOnly": true,
                "enumNames": [
                  "Generate Additional Fields XML"
                ],
                "default": "taleo_macros.generate_additional_fields_xml",
                "const": "taleo_macros.generate_additional_fields_xml",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to generate UDF XML.\n",
            "title": "Generate UDF XML",
            "macro_name": "taleo_macros.generate_udf_xml",
            "macro_type": "transform",
            "supported_entity_types": [
              "candidate"
            ],
            "supported_systems": [
              "taleo"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field_list": {
                    "required": [
                      "udf_name",
                      "field"
                    ],
                    "type": "object",
                    "properties": {
                      "udf_name": {
                        "description": "The udf name of value to be extracted",
                        "type": "string"
                      },
                      "field": {
                        "description": "The value of field to be extracted from candidate object",
                        "type": "string"
                      },
                      "data_path": {
                        "description": "Data path to be extracted from candidate object",
                        "type": "string"
                      },
                      "delimiter": {
                        "description": "The delimiter used to split multiple values into smaller parts",
                        "type": "string",
                        "default": ","
                      },
                      "index": {
                        "description": "The index of element to be used after it splitting with delimiter",
                        "type": "integer",
                        "default": 0
                      }
                    },
                    "additionalProperties": false
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "taleo_macros.generate_udf_xml"
                ],
                "readOnly": true,
                "enumNames": [
                  "Generate UDF XML"
                ],
                "default": "taleo_macros.generate_udf_xml",
                "const": "taleo_macros.generate_udf_xml",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to set restrict_access flag based on the list of User Group\n",
            "title": "Set Confidential Flag",
            "macro_name": "taleo_macros.set_confidential_flag",
            "macro_type": "transform",
            "supported_systems": [
              "taleo"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "confidential_user_groups": {
                    "type": "array",
                    "description": "A list of strings which will be set as Confidential",
                    "items": {
                      "type": "string"
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "taleo_macros.set_confidential_flag"
                ],
                "readOnly": true,
                "enumNames": [
                  "Set Confidential Flag"
                ],
                "default": "taleo_macros.set_confidential_flag",
                "const": "taleo_macros.set_confidential_flag",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to split UDF value. It has 3 inputs - alias, default and data type. It returns the value for the alias if it is found, otherwise returns the configured default value\n",
            "title": "Split UDF Value",
            "macro_name": "taleo_macros.split_udf_value",
            "macro_type": "transform",
            "supported_systems": [
              "taleo"
            ],
            "properties": {
              "kwargs": {
                "required": [
                  "udf_name"
                ],
                "type": "object",
                "properties": {
                  "udf_name": {
                    "description": "The udf_name of value to be split",
                    "type": "string"
                  },
                  "default": {
                    "description": "Default value to return if udf_value is not found",
                    "type": "string"
                  },
                  "extractor": {
                    "description": "The key where the udf value is present",
                    "type": "string",
                    "default": "e:Code"
                  },
                  "delimiter": {
                    "description": "The delimiter used to split multiple values into smaller parts",
                    "type": "string",
                    "default": ","
                  },
                  "index": {
                    "description": "The index of element to return after splitting the value using the delimiter",
                    "type": "integer",
                    "default": 0
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "taleo_macros.split_udf_value"
                ],
                "readOnly": true,
                "enumNames": [
                  "Split UDF Value"
                ],
                "default": "taleo_macros.split_udf_value",
                "const": "taleo_macros.split_udf_value",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to convert a string to titlecase.\n",
            "title": "Titlecase",
            "macro_name": "titlecase",
            "macro_type": "transform",
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "titlecase"
                ],
                "readOnly": true,
                "enumNames": [
                  "Titlecase"
                ],
                "default": "titlecase",
                "const": "titlecase",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to convert a str | int | list[str|int] to titlecase w2v form.\n",
            "title": "Titlecase W2V",
            "macro_name": "titlecase_w2v",
            "macro_type": "transform",
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "titlecase_w2v"
                ],
                "readOnly": true,
                "enumNames": [
                  "Titlecase W2V"
                ],
                "default": "titlecase_w2v",
                "const": "titlecase_w2v",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to convert a string to uppercase.\n",
            "title": "Uppercase",
            "macro_name": "uppercase",
            "macro_type": "transform",
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "uppercase"
                ],
                "readOnly": true,
                "enumNames": [
                  "Uppercase"
                ],
                "default": "uppercase",
                "const": "uppercase",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to extract data from multiple entities in the report data and combine them using a separator\n",
            "title": "Extract and Format",
            "macro_name": "workday_macros.extract_and_format_fields_from_report",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "fields": {
                    "title": "Fields",
                    "type": "array",
                    "description": "a list of simple string used for lookup. use this if the path to be extracted is a top level field.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data_paths": {
                    "title": "Data Paths",
                    "type": "array",
                    "description": "a list of strings used for lookup. use this for nested checks",
                    "items": {
                      "type": "string"
                    }
                  },
                  "separator": {
                    "type": "string",
                    "title": "Separator",
                    "description": "a separator used between the extracted values.",
                    "default": " - "
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_and_format_fields_from_report"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract and Format"
                ],
                "default": "workday_macros.extract_and_format_fields_from_report",
                "const": "workday_macros.extract_and_format_fields_from_report",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to find the result at a given path and fallback to a safe default with necessary type checks to make sure wrong data does not enter the system. We give three inputs - the path of the element to be extracted, a default value and the data type of extracted value\n",
            "title": "Extract and Transform",
            "macro_name": "workday_macros.extract_and_transform_field_from_report",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "field"
                ],
                "properties": {
                  "field": {
                    "title": "Field",
                    "type": "string",
                    "description": "the string used for lookup",
                    "examples": [
                      "custom_info.mentor_option"
                    ]
                  },
                  "data_type": {
                    "type": "string",
                    "title": "Data Type",
                    "description": "the data_type of expected value at path",
                    "default": "string",
                    "enum": [
                      "string",
                      "int",
                      "bool",
                      "date",
                      "datetime",
                      "float"
                    ],
                    "enumNames": [
                      "String",
                      "Integer",
                      "Boolean",
                      "Date",
                      "Datetime",
                      "Float"
                    ]
                  },
                  "default": {
                    "title": "Default",
                    "type": "string",
                    "description": "the default result if no value is found for expression",
                    "examples": [
                      "No"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_and_transform_field_from_report"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract and Transform"
                ],
                "default": "workday_macros.extract_and_transform_field_from_report",
                "const": "workday_macros.extract_and_transform_field_from_report",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch question and answer for a given question id. Given a question_id, return the matching answer(value) from application questions. If prefix_field is present then prepend the value to the answer else only return the answer Also one should provide the separator if prefix_field is available. For answers, if multiple answers are present separate them via \", \" If prefix_separator arg is present use it to join prefix_field and answer\n",
            "title": "Extract Answer from Question",
            "macro_name": "workday_macros.extract_answer_from_ques",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "supported_entity_types": [
              "application",
              "candidate"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "question_id",
                  "entity_type"
                ],
                "properties": {
                  "question_id": {
                    "type": "string",
                    "description": "Unique identifier of the question.",
                    "examples": [
                      "q_source"
                    ]
                  },
                  "entity_type": {
                    "type": "string",
                    "description": "Entity type",
                    "enum": [
                      "application",
                      "candidate"
                    ],
                    "enumNames": [
                      "Application",
                      "Candidate"
                    ]
                  },
                  "use_descriptor": {
                    "type": "boolean",
                    "description": "Use workday reference descriptor flag",
                    "default": false
                  },
                  "prefix_field": {
                    "type": "string",
                    "description": "If prefix_field is present then prepend the value to the answer else only return the answer"
                  },
                  "prefix_separator": {
                    "type": "string",
                    "description": "Separator for multiple answers"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_answer_from_ques"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Answer from Question"
                ],
                "default": "workday_macros.extract_answer_from_ques",
                "const": "workday_macros.extract_answer_from_ques",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract the answer value of a specific application question on the candidate object. Given a question_id, return the matching answer(value) from application questions\n",
            "title": "Extract Answer (Application Questions)",
            "macro_name": "workday_macros.extract_answer_id_from_qna",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "supported_entity_types": [
              "application"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "question_id"
                ],
                "properties": {
                  "question_id": {
                    "type": "string",
                    "description": "Unique identifier of the question.",
                    "examples": [
                      "q_source"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_answer_id_from_qna"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Answer (Application Questions)"
                ],
                "default": "workday_macros.extract_answer_id_from_qna",
                "const": "workday_macros.extract_answer_id_from_qna",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract the employee id from referred employee email and if an employee id\n could be extracted it is directly placed in the write-back payload.\nThis has a dependency on the answer value for Applicant_Source_ID question. This also has a dependency on the RAAS report for fetch_employee_id_from_email to be configured.\n",
            "title": "Extract Employee ID using Referred Email (Application Questions)",
            "macro_name": "workday_macros.extract_app_referred_by_worker_from_qna",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "supported_entity_types": [
              "application"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "question_id",
                  "applicant_source_template"
                ],
                "properties": {
                  "question_id": {
                    "type": "string",
                    "description": "Unique identifier of the question.",
                    "examples": [
                      "q_source"
                    ]
                  },
                  "applicant_source_template": {
                    "type": "string",
                    "description": "Template to obtain the applicant source id"
                  },
                  "applicant_source_value": {
                    "type": "string",
                    "description": "The applicant source value for applicant source id",
                    "default": "Referral_Self_Identified"
                  },
                  "use_descriptor": {
                    "type": "boolean",
                    "description": "if employee id not found, use descriptor to send employee email",
                    "default": false
                  },
                  "use_raas_lookup": {
                    "type": "boolean",
                    "description": "If true , raas lookup is used to fetch employee_id instead of solr lookup",
                    "default": true
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_app_referred_by_worker_from_qna"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Employee ID using Referred Email (Application Questions)"
                ],
                "default": "workday_macros.extract_app_referred_by_worker_from_qna",
                "const": "workday_macros.extract_app_referred_by_worker_from_qna",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to find id for given field from qna and return a populated xml field reference Requires a question_id and field to be present in kwargs. Also consists of optional field_id_type kwarg. Absence of 'field_id_type' indicates that macro should treat this as a non-ID field\n",
            "title": "Extract XML Field Reference",
            "macro_name": "workday_macros.extract_application_field_from_qna",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "supported_entity_types": [
              "application"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "question_id",
                  "field"
                ],
                "properties": {
                  "question_id": {
                    "type": "string",
                    "description": "Unique identifier of the question.",
                    "examples": [
                      "q_source"
                    ]
                  },
                  "field": {
                    "type": "string",
                    "description": "used as <bsvc:{}> tag"
                  },
                  "field_id_type": {
                    "type": "string",
                    "description": "[optional] used as <bsvc:ID bsvc:type={}> tag. If this field is not configured, we treat it as non-ID field"
                  },
                  "wrap_all_field_ids": {
                    "type": "boolean",
                    "default": false,
                    "description": "[optional] If set to true , each <bsvc:ID bsvc:type={}> tag would be wrapped by individually <bsvc:{}>"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_application_field_from_qna"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract XML Field Reference"
                ],
                "default": "workday_macros.extract_application_field_from_qna",
                "const": "workday_macros.extract_application_field_from_qna",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch and set the Applicant Source ID from answer for a given Question ID. Requires a question_id to be present in kwargs\n",
            "title": "Extract Application Source ID",
            "macro_name": "workday_macros.extract_application_source_from_qna",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "supported_entity_types": [
              "application"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "question_id"
                ],
                "properties": {
                  "question_id": {
                    "type": "string",
                    "description": "Unique identifier of the question.",
                    "examples": [
                      "q_source"
                    ]
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_application_source_from_qna"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Application Source ID"
                ],
                "default": "workday_macros.extract_application_source_from_qna",
                "const": "workday_macros.extract_application_source_from_qna",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to return location/location_country based on fields specified in kwargs\n",
            "title": "Extracts location and location_country for an employee",
            "macro_name": "workday_macros.extract_employee_location",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field": {
                    "description": "The field of an employee(location/location_country) which is to be overridden",
                    "type": "string"
                  },
                  "prefer_personal_address": {
                    "description": "The field which determines whether location preference is personal, by default it will be business",
                    "type": "boolean",
                    "default": false
                  },
                  "communication_usage_priority": {
                    "description": "The fields which contains the priority of communication usage type in descending order. If this field is not passed priority will be ['business', 'work] by default in adapter code.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Communication usage type",
                      "enum": [
                        "work",
                        "business",
                        "home"
                      ]
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_employee_location"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extracts location and location_country for an employee"
                ],
                "default": "workday_macros.extract_employee_location",
                "const": "workday_macros.extract_employee_location",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract exactly one field from RAAS report data.\n",
            "title": "Extract Field From Report (Workday)",
            "macro_name": "workday_macros.extract_field_from_report",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field": {
                    "title": "Field",
                    "description": "The report field that contains the information",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_field_from_report"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Field From Report (Workday)"
                ],
                "default": "workday_macros.extract_field_from_report",
                "const": "workday_macros.extract_field_from_report",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract exactly one field from RAAS report data.\n",
            "title": "Extract Field From Report (Workday) using given timezone",
            "macro_name": "workday_macros.extract_field_from_report_with_timezone",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field": {
                    "title": "Field",
                    "description": "The report field that contains the information",
                    "type": "string"
                  },
                  "timezone": {
                    "title": "Timezone",
                    "description": "The incoming timezone for the field",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_field_from_report_with_timezone"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Field From Report (Workday) using given timezone"
                ],
                "default": "workday_macros.extract_field_from_report_with_timezone",
                "const": "workday_macros.extract_field_from_report_with_timezone",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch the text for an existing field. If use_descriptor is provided then it will retrieve the wd:descriptor value instead of the text value\n",
            "title": "Extract Field Text",
            "macro_name": "workday_macros.extract_field_text",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "field_type"
                ],
                "properties": {
                  "field_type": {
                    "type": "string",
                    "description": "Unique identifier of the question.",
                    "examples": [
                      "q_source"
                    ]
                  },
                  "use_descriptor": {
                    "type": "boolean",
                    "description": "Use workday reference descriptor flag",
                    "default": false
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_field_text"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Field Text"
                ],
                "default": "workday_macros.extract_field_text",
                "const": "workday_macros.extract_field_text",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch data as list\n",
            "title": "Extract Fields as list",
            "macro_name": "workday_macros.extract_fields_as_list",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "fields": {
                    "title": "Fields",
                    "description": "The fields which contains the information to be fetched as list",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_fields_as_list"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Fields as list"
                ],
                "default": "workday_macros.extract_fields_as_list",
                "const": "workday_macros.extract_fields_as_list",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract data as a list from RAAS report data fields.\n",
            "title": "Extract Field From Report (Workday)",
            "macro_name": "workday_macros.extract_fields_as_list_from_report",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "fields": {
                    "title": "Fields",
                    "description": "The report fields that contain the information to be extracted as a list",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_fields_as_list_from_report"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Field From Report (Workday)"
                ],
                "default": "workday_macros.extract_fields_as_list_from_report",
                "const": "workday_macros.extract_fields_as_list_from_report",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract multiple integration fields\n",
            "title": "Extract Integration Field List",
            "macro_name": "workday_macros.extract_integration_field_list",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "fields": {
                    "title": "Fields",
                    "description": "The fields which contains the information",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_integration_field_list"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Integration Field List"
                ],
                "default": "workday_macros.extract_integration_field_list",
                "const": "workday_macros.extract_integration_field_list",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract multiple integration fields. Returns csv strings of all the value if data is available else None\n",
            "title": "Extract Integration Field As CSV",
            "macro_name": "workday_macros.extract_integration_fields_as_csv",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "fields": {
                    "title": "Fields",
                    "description": "The fields which contains the information",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "separator": {
                    "description": "the separator used to join multiple fields into a string",
                    "type": "string",
                    "default": ","
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_integration_fields_as_csv"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Integration Field As CSV"
                ],
                "default": "workday_macros.extract_integration_fields_as_csv",
                "const": "workday_macros.extract_integration_fields_as_csv",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract locations for Workday.\n",
            "title": "Extract Location (Workday)",
            "macro_name": "workday_macros.extract_location",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "fields": {
                    "title": "Fields",
                    "description": "The fields which contains the information to extract locations",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "use_descriptor": {
                    "description": "Use @wd:Descriptor field to extract location from location fields",
                    "type": "boolean",
                    "default": true
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_location"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Location (Workday)"
                ],
                "default": "workday_macros.extract_location",
                "const": "workday_macros.extract_location",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract primary and additional locations from report\n",
            "title": "Extract Primary and Additional Locations from Report",
            "macro_name": "workday_macros.extract_locations_from_report_multiple_rows",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "primary_city_field",
                  "primary_state_field",
                  "primary_country_field",
                  "additional_city_field",
                  "additional_state_field",
                  "additional_country_field"
                ],
                "properties": {
                  "primary_city_field": {
                    "description": "The field which contains the primary location city",
                    "type": "string"
                  },
                  "primary_state_field": {
                    "description": "The field which contains the primary location state",
                    "type": "string"
                  },
                  "primary_country_field": {
                    "description": "The field which contains the primary location country",
                    "type": "string"
                  },
                  "additional_city_field": {
                    "description": "The field which contains the additional location city",
                    "type": "string"
                  },
                  "additional_state_field": {
                    "description": "The field which contains the additional location state",
                    "type": "string"
                  },
                  "additional_country_field": {
                    "description": "The field which contains the additional location country",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_locations_from_report_multiple_rows"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Primary and Additional Locations from Report"
                ],
                "default": "workday_macros.extract_locations_from_report_multiple_rows",
                "const": "workday_macros.extract_locations_from_report_multiple_rows",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to to return list of past stages from RAAS report fields specified in kwargs.\n",
            "title": "Extract past stages for the application",
            "macro_name": "workday_macros.extract_past_stages_from_report",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field_stage_name": {
                    "description": "The report field which contains the stage name",
                    "type": "string"
                  },
                  "field_stage_ts": {
                    "description": "The report field which contains the stage timestamp",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_past_stages_from_report"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract past stages for the application"
                ],
                "default": "workday_macros.extract_past_stages_from_report",
                "const": "workday_macros.extract_past_stages_from_report",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to return personal location/location_country from employee RAAS report\n",
            "title": "Extracts personal location and location_country for an employee from employee RAAS report",
            "macro_name": "workday_macros.extract_personal_employee_location_from_raas",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field": {
                    "description": "The field of an employee(location/location_country) which is to be overridden",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_personal_employee_location_from_raas"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extracts personal location and location_country for an employee from employee RAAS report"
                ],
                "default": "workday_macros.extract_personal_employee_location_from_raas",
                "const": "workday_macros.extract_personal_employee_location_from_raas",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to extract User from integration fields by fetching first name, last name and email. kwargs has an optional parameter 'role' which can be used to set the role of user.\n",
            "title": "Extract User from Integration Fields",
            "macro_name": "workday_macros.extract_user_from_integration_fields",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field_first_name": {
                    "description": "The field which contains the first name",
                    "type": "string"
                  },
                  "field_last_name": {
                    "description": "The field which contains the last name",
                    "type": "string"
                  },
                  "field_email": {
                    "description": "The field which contains the email of the user",
                    "type": "string"
                  },
                  "role": {
                    "description": "The role of user",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_user_from_integration_fields"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract User from Integration Fields"
                ],
                "default": "workday_macros.extract_user_from_integration_fields",
                "const": "workday_macros.extract_user_from_integration_fields",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to to return AtsUser by fetching first name, last name and email. kwargs has an optional parameter 'role' which can be used to set the role of user.\n",
            "title": "Extract User from Name Email",
            "macro_name": "workday_macros.extract_user_from_name_email",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field_first_name": {
                    "description": "The field which contains the first name",
                    "type": "string"
                  },
                  "field_last_name": {
                    "description": "The field which contains the last name",
                    "type": "string"
                  },
                  "field_email": {
                    "description": "The field which contains the email of the user",
                    "type": "string"
                  },
                  "role": {
                    "description": "The role of user",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_user_from_name_email"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract User from Name Email"
                ],
                "default": "workday_macros.extract_user_from_name_email",
                "const": "workday_macros.extract_user_from_name_email",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to to return AtsUser by fetching first name, last name and email from RAAS report fields specified in kwargs. kwargs has an optional parameter 'role' which can be used to set the role of user.\n",
            "title": "Extract User from Name Email",
            "macro_name": "workday_macros.extract_user_from_report",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field_first_name": {
                    "description": "The report field which contains the first name",
                    "type": "string"
                  },
                  "field_last_name": {
                    "description": "The report field which contains the last name",
                    "type": "string"
                  },
                  "field_email": {
                    "description": "The report field which contains the email of the user",
                    "type": "string"
                  },
                  "role": {
                    "description": "The role of user",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_user_from_report"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract User from Name Email"
                ],
                "default": "workday_macros.extract_user_from_report",
                "const": "workday_macros.extract_user_from_report",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to to return list of AtsUsers by fetching emails and names of users(secondary recruiters) from RAAS report fields specified in kwargs. kwargs has an optional parameter 'role' which can be used to set the role of user.\n",
            "title": "Extracts secondary recruiters from raas report of position",
            "macro_name": "workday_macros.extract_user_list_by_email_field_from_report",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field_email": {
                    "description": "The field which contains the user email",
                    "type": "string"
                  },
                  "field_first_name": {
                    "description": "The field which contains the first name",
                    "type": "string"
                  },
                  "field_last_name": {
                    "description": "The field which contains the last name",
                    "type": "string"
                  },
                  "role": {
                    "description": "The role of user",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_user_list_by_email_field_from_report"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extracts secondary recruiters from raas report of position"
                ],
                "default": "workday_macros.extract_user_list_by_email_field_from_report",
                "const": "workday_macros.extract_user_list_by_email_field_from_report",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to to return list of AtsUser by fetching names, and emails from RAAS report fields specified in kwargs. kwargs has an optional parameter 'role' which can be used to set the role of user.\n",
            "title": "Extract Users from Names and Emails",
            "macro_name": "workday_macros.extract_users_from_report",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "properties": {
                  "field_names": {
                    "description": "The report field which contains the names of the users",
                    "type": "string"
                  },
                  "field_emails": {
                    "description": "The report field which contains the emails of the users",
                    "type": "string"
                  },
                  "role": {
                    "description": "The role of user",
                    "type": "string"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.extract_users_from_report"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract Users from Names and Emails"
                ],
                "default": "workday_macros.extract_users_from_report",
                "const": "workday_macros.extract_users_from_report",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to determine if we will fetch assessments for candidates. The Caller ID of the field must be fetch_assessments for this macro to work. It requires no other inputs.\n",
            "title": "Fetch Assessments",
            "macro_name": "workday_macros.fetch_assessments",
            "macro_type": "ats_fetch",
            "supported_entity_types": [
              "candidate"
            ],
            "supported_systems": [
              "workday"
            ],
            "type": "object",
            "properties": {
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.fetch_assessments"
                ],
                "readOnly": true,
                "enumNames": [
                  "Fetch Assessments"
                ],
                "default": "workday_macros.fetch_assessments",
                "const": "workday_macros.fetch_assessments",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch RAAS report content for a given entity (candidate/position/employee/application). This can also be used to fetch RAAS report content for finding employee id using employee email (this special case can be activated by using the key \"fetch_employee_id_from_email\" instead of \"fetch_employee\", \"fetch_candidate\", etc). If get_all_rows is sent as True in kwargs it will return every row otherwise it will return only first row from report.\n",
            "title": "Fetch Report Per Entity",
            "macro_name": "workday_macros.fetch_report_per_entity",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "report_url"
                ],
                "properties": {
                  "report_url": {
                    "type": "string",
                    "description": "URL Path (jinja template) to fetch report from",
                    "examples": [
                      "https://services1.myworkday.com/ccx/service/customreport2/micron/Eightfold_ISU/INT046_Workday_To_EightFold_Outbound_Non_Evergreen?&format=csv&Requisition_Number={{ position.job_id }}"
                    ]
                  },
                  "report_type": {
                    "type": "string",
                    "description": "Type of report to fetch. It can be one of raas, evergreen",
                    "default": "raas",
                    "enum": [
                      "raas",
                      "evergreen"
                    ],
                    "examples": [
                      "raas, evergreen"
                    ]
                  },
                  "filter_by": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string",
                      "description": "Used to select right row from report"
                    }
                  },
                  "get_all_rows": {
                    "description": "The field which decides whether we want single or every row from report(by default it returns single row)",
                    "type": "boolean",
                    "default": false
                  },
                  "fetch_once": {
                    "description": "The field which decides whether we want to fetch report only once or not for application fetch report (applicable only if report uses candidate_id to fetch all applications in one report)",
                    "type": "boolean",
                    "default": false
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.fetch_report_per_entity"
                ],
                "readOnly": true,
                "enumNames": [
                  "Fetch Report Per Entity"
                ],
                "default": "workday_macros.fetch_report_per_entity",
                "const": "workday_macros.fetch_report_per_entity",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used to fetch RAAS report content for a given entity (candidate/position/employee/application) when a timezone-aware timestamp is needed in the RAAS URL. This can also be used to fetch RAAS report content for finding employee id using employee email (this special case can be activated by using the key \"fetch_employee_id_from_email\" instead of \"fetch_employee\", \"fetch_candidate\", etc).\n",
            "title": "Fetch Report Per Entity With Timestamp",
            "macro_name": "workday_macros.fetch_report_per_entity_with_timestamp",
            "macro_type": "ats_fetch",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "report_url",
                  "ts_field"
                ],
                "properties": {
                  "report_url": {
                    "type": "string",
                    "description": "URL Path (jinja template) to fetch report from. Must contain the jinja field \"ts_field\".",
                    "examples": [
                      "https://wd2-impl-services1.workday.com/ccx/service/customreport2/paypal5/ISU_Eightfold/CRINT421E_EF_Job_Application_NDA_Status?format=csv&Created_Date={{ ts_field }}&Job_Application_ID={{ application.application_id }}"
                    ]
                  },
                  "ts_field": {
                    "type": "string",
                    "description": "Jinja template string containig path to entity's property that is to be used for timestamp",
                    "examples": [
                      "{{ application.application_ts }}"
                    ]
                  },
                  "ts_format": {
                    "type": "string",
                    "description": "Format of timestamp expected to be substituted in the URL in place of ts_field",
                    "examples": [
                      "%Y-%m-%d"
                    ],
                    "default": "%Y-%m-%d"
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.fetch_report_per_entity_with_timestamp"
                ],
                "readOnly": true,
                "enumNames": [
                  "Fetch Report Per Entity With Timestamp"
                ],
                "default": "workday_macros.fetch_report_per_entity_with_timestamp",
                "const": "workday_macros.fetch_report_per_entity_with_timestamp",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          {
            "description": "This macro is used when we want to extract data from multiple entities in the report data and combine them using a separator\n",
            "title": "Extract and Format",
            "macro_name": "workday_macros.generate_education_data_xml",
            "macro_type": "transform",
            "supported_systems": [
              "workday"
            ],
            "properties": {
              "kwargs": {
                "type": "object",
                "required": [
                  "education_list"
                ],
                "properties": {
                  "education_list": {
                    "type": "array",
                    "description": "list of education fields to be mapped",
                    "items": {
                      "type": "object",
                      "required": [
                        "field_list"
                      ],
                      "properties": {
                        "field_list": {
                          "type": "array",
                          "description": "list of fields to be mapped in a single education xml",
                          "items": {
                            "type": "object",
                            "required": [
                              "macro",
                              "kwargs"
                            ],
                            "properties": {
                              "macro": {
                                "description": "The macro to be used to convert the value for column",
                                "type": "string",
                                "default": "workday_macros.extract_application_field_from_qna"
                              },
                              "kwargs": {
                                "type": "object",
                                "description": "[optional] kwargs for macro"
                              }
                            },
                            "additionalProperties": false
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "_append_list_attr": {
                    "type": "boolean",
                    "default": true,
                    "description": "set this flag to true if the value at existing location is a list and you want to add items to it. set this to false if you want to override the value. this has no impact if the existing value is not a list."
                  }
                },
                "additionalProperties": false,
                "title": "Parameters",
                "description": "Parameters passed to the macro function"
              },
              "macro": {
                "type": "string",
                "enum": [
                  "workday_macros.generate_education_data_xml"
                ],
                "readOnly": true,
                "enumNames": [
                  "Extract and Format"
                ],
                "default": "workday_macros.generate_education_data_xml",
                "const": "workday_macros.generate_education_data_xml",
                "description": "The title of the macro",
                "title": "Title"
              },
              "description": {
                "type": "string",
                "description": "The description of the macro"
              }
            },
            "type": "object",
            "additionalProperties": false
          }
        ]
      }
    },
    "caller_ids": {
      "taleo": [
        "fetch_application_history",
        "fetch_candidate",
        "fetch_application_integration_response",
        "fetch_position",
        "fetch_application",
        "position",
        "fetch_posting"
      ],
      "successfactors": [
        "jr",
        "jr_batch",
        "jobs_applied_by_candidate",
        "employee_additional_fields",
        "candidate",
        "list_positions",
        "education",
        "mobility",
        "employee_criticality",
        "performance_ratings",
        "certificates",
        "linkedin_urls",
        "languages",
        "fetch_candidate",
        "fetch_job_template",
        "fetch_internal_experience",
        "fetch_external_experience",
        "jp",
        "fetch_education"
      ],
      "workday": [
        "fetch_assessments",
        "fetch_employee",
        "fetch_position",
        "fetch_candidate",
        "fetch_employee_id_from_email",
        "fetch_application",
        "fetch_role"
      ],
      "kenexa": [
        "jr"
      ],
      "orc": [
        "candidate",
        "position",
        "workers"
      ],
      "greenhouse": [
        "education"
      ],
      "icims": [
        "fetch_candidate",
        "fetch_position",
        "fetch_application"
      ]
    },
    "fields": {
      "existing_configured_fields": [
        {
          "field_path": "business_unit",
          "entity_type": "position",
          "count": 236,
          "ats_system_stats": {
            "greenhouse": 8,
            "workday": 85,
            "taleo": 12,
            "successfactors": 94,
            "icims": 16,
            "lever": 10,
            "kenexa": 5,
            "cornerstone": 3,
            "adp": 2,
            "volkscience": 1
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 114,
            "workday_macros.extract_integration_fields_as_csv": 19,
            "workday_macros.extract_field_from_report": 50,
            "successfactor_macros.extract_picklist_field": 18,
            "standard_macros.chained_macro": 12,
            "kenexa_macros.extract_answer_from_job_ques": 5,
            "adapter_macros.substitute_template": 6,
            "adp_macros.extract_custom_field": 2,
            "taleo_macros.extract_udf_value": 2,
            "taleo_macros.extract_proj_alias_field": 8
          }
        },
        {
          "field_path": "job_function",
          "entity_type": "position",
          "count": 204,
          "ats_system_stats": {
            "greenhouse": 2,
            "workday": 61,
            "taleo": 9,
            "successfactors": 95,
            "orc": 15,
            "icims": 3,
            "lever": 11,
            "kenexa": 3,
            "cornerstone": 3,
            "volkscience": 1,
            "ukg": 1
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 7,
            "workday_macros.extract_integration_fields_as_csv": 16,
            "workday_macros.extract_field_from_report": 40,
            "standard_macros.extract_path": 78,
            "successfactor_macros.extract_picklist_field": 30,
            "orc_macros.fetch_common_lookups_by_code": 8,
            "adapter_macros.remap_value": 5,
            "standard_macros.chained_macro": 10,
            "kenexa_macros.extract_answer_from_job_ques": 3,
            "successfactor_macros.extract_from_field_list": 2,
            "taleo_macros.extract_value_by_level": 2,
            "taleo_macros.extract_proj_alias_field": 3
          }
        },
        {
          "field_path": "location_country",
          "entity_type": "position",
          "count": 190,
          "ats_system_stats": {
            "workday": 81,
            "taleo": 12,
            "successfactors": 86,
            "kenexa": 5,
            "orc": 2,
            "cornerstone": 1,
            "ukg": 1,
            "peoplesoft": 2
          },
          "transform_macro_stats": {
            "workday_macros.extract_integration_fields_as_csv": 25,
            "workday_macros.extract_field_from_report": 53,
            "adapter_macros.substitute_template": 2,
            "taleo_macros.extract_value_by_level": 3,
            "standard_macros.extract_path": 86,
            "successfactor_macros.extract_picklist_field": 6,
            "kenexa_macros.extract_answer_from_job_ques": 5,
            "standard_macros.chained_macro": 2,
            "taleo_macros.extract_proj_alias_field": 8
          }
        },
        {
          "field_path": "location_city",
          "entity_type": "position",
          "count": 180,
          "ats_system_stats": {
            "workday": 73,
            "taleo": 11,
            "successfactors": 84,
            "orc": 4,
            "kenexa": 7,
            "ukg": 1
          },
          "transform_macro_stats": {
            "workday_macros.extract_integration_fields_as_csv": 26,
            "workday_macros.extract_field_from_report": 47,
            "taleo_macros.extract_value_by_level": 3,
            "standard_macros.extract_path": 61,
            "adapter_macros.substitute_template": 5,
            "successfactor_macros.extract_picklist_field": 21,
            "kenexa_macros.extract_answer_from_job_ques": 7,
            "standard_macros.chained_macro": 2,
            "taleo_macros.extract_proj_alias_field": 8
          }
        },
        {
          "field_path": "location",
          "entity_type": "position",
          "count": 174,
          "ats_system_stats": {
            "greenhouse": 8,
            "workday": 79,
            "taleo": 17,
            "successfactors": 45,
            "orc": 17,
            "cornerstone": 2,
            "icims": 4,
            "kenexa": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 13,
            "workday_macros.extract_integration_fields_as_csv": 17,
            "workday_macros.extract_location": 46,
            "taleo_macros.extract_location": 10,
            "workday_macros.extract_field_from_report": 1,
            "orc_macros.extract_location": 17,
            "successfactor_macros.extract_location_objlist": 12,
            "successfactor_macros.extract_parent_picklist_field": 9,
            "standard_macros.chained_macro": 19,
            "workday_macros.extract_and_format_fields_from_report": 3,
            "workday_macros.extract_locations_from_report_multiple_rows": 2,
            "standard_macros.extract_path_all": 1,
            "adapter_macros.substitute_template": 8,
            "greenhouse_macros.extract_location": 1,
            "kenexa_macros.extract_answer_from_job_ques": 1
          }
        },
        {
          "field_path": "hiring_band",
          "entity_type": "position",
          "count": 153,
          "ats_system_stats": {
            "taleo": 9,
            "workday": 59,
            "successfactors": 53,
            "icims": 11,
            "greenhouse": 13,
            "orc": 4,
            "jobvite": 2,
            "cornerstone": 1,
            "adp": 1
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 38,
            "standard_macros.chained_macro": 11,
            "workday_macros.extract_integration_fields_as_csv": 10,
            "standard_macros.extract_path": 67,
            "standard_macros.extract_path_and_default": 4,
            "adapter_macros.substitute_template": 12,
            "successfactor_macros.extract_picklist_field": 2,
            "taleo_macros.extract_udf_value": 3,
            "successfactor_macros.extract_from_field_list": 1
          }
        },
        {
          "field_path": "location_state",
          "entity_type": "position",
          "count": 144,
          "ats_system_stats": {
            "workday": 69,
            "taleo": 11,
            "successfactors": 53,
            "orc": 4,
            "kenexa": 6,
            "ukg": 1
          },
          "transform_macro_stats": {
            "workday_macros.extract_integration_fields_as_csv": 24,
            "workday_macros.extract_field_from_report": 45,
            "taleo_macros.extract_value_by_level": 3,
            "standard_macros.extract_path": 45,
            "adapter_macros.substitute_template": 3,
            "successfactor_macros.extract_picklist_field": 6,
            "kenexa_macros.extract_answer_from_job_ques": 6,
            "standard_macros.chained_macro": 2,
            "taleo_macros.extract_proj_alias_field": 8,
            "geocode_macros.get_state_location_from_geocode": 1
          }
        },
        {
          "field_path": "followers",
          "entity_type": "position",
          "count": 129,
          "ats_system_stats": {
            "workday": 48,
            "successfactors": 70,
            "icims": 5,
            "kenexa": 2,
            "orc": 2,
            "taleo": 2
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 12,
            "successfactor_macros.extract_recruiting_team_followers": 69,
            "workday_macros.extract_users_from_report": 15,
            "icims_macros.extract_all_users": 3,
            "workday_macros.extract_user_list_by_email_field_from_report": 4,
            "kenexa_macros.extract_job_followers": 2,
            "adapter_macros.substitute_template": 18,
            "adapter_macros.set_ats_user_roles_for_position": 2,
            "workday_macros.extract_user_from_report": 4
          }
        },
        {
          "field_path": "recruiter",
          "entity_type": "position",
          "count": 124,
          "ats_system_stats": {
            "workday": 114,
            "successfactors": 6,
            "icims": 4
          },
          "transform_macro_stats": {
            "workday_macros.extract_user_from_integration_fields": 31,
            "workday_macros.extract_user_from_report": 81,
            "standard_macros.chained_macro": 2,
            "icims_macros.extract_user": 4,
            "standard_macros.extract_path": 2
          }
        },
        {
          "field_path": "hiring_manager",
          "entity_type": "position",
          "count": 120,
          "ats_system_stats": {
            "workday": 115,
            "successfactors": 4,
            "lever": 1
          },
          "transform_macro_stats": {
            "workday_macros.extract_user_from_integration_fields": 33,
            "workday_macros.extract_user_from_report": 80,
            "standard_macros.chained_macro": 2,
            "standard_macros.extract_path": 5
          }
        },
        {
          "field_path": "bu",
          "entity_type": "employee",
          "count": 100,
          "ats_system_stats": {
            "workday": 39,
            "successfactors": 61
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 28,
            "standard_macros.extract_path": 68,
            "standard_macros.chained_macro": 4
          }
        },
        {
          "field_path": "level",
          "entity_type": "employee",
          "count": 96,
          "ats_system_stats": {
            "successfactors": 56,
            "workday": 37,
            "orc": 2,
            "ukg": 1
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 21,
            "workday_macros.extract_field_from_report": 17,
            "standard_macros.extract_path": 42,
            "standard_macros.extract_and_format_from_entity": 2,
            "adapter_macros.substitute_template": 14
          }
        },
        {
          "field_path": "is_open",
          "entity_type": "position",
          "count": 88,
          "ats_system_stats": {
            "workday": 11,
            "successfactors": 51,
            "volkscience": 2,
            "orc": 17,
            "taleo": 2,
            "icims": 5
          },
          "transform_macro_stats": {
            "adapter_macros.map_open_positions": 26,
            "adapter_macros.substitute_template": 59,
            "standard_macros.extract_path": 1,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "title",
          "entity_type": "employee",
          "count": 76,
          "ats_system_stats": {
            "workday": 36,
            "orc": 3,
            "successfactors": 37
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 52,
            "workday_macros.extract_field_from_report": 7,
            "standard_macros.chained_macro": 11,
            "adapter_macros.substitute_template": 6
          }
        },
        {
          "field_path": "location",
          "entity_type": "employee",
          "count": 75,
          "ats_system_stats": {
            "workday": 17,
            "successfactors": 56,
            "orc": 2
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 10,
            "standard_macros.extract_path": 43,
            "standard_macros.chained_macro": 14,
            "workday_macros.extract_employee_location": 1,
            "adapter_macros.substitute_template": 5
          }
        },
        {
          "field_path": "custom_raas_fetch_report",
          "entity_type": "position",
          "count": 72,
          "ats_system_stats": {
            "workday": 72
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "email",
          "entity_type": "employee",
          "count": 67,
          "ats_system_stats": {
            "workday": 36,
            "successfactors": 31
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 14,
            "standard_macros.extract_path": 33,
            "standard_macros.chained_macro": 11,
            "adapter_macros.substitute_template": 9
          }
        },
        {
          "field_path": "lob",
          "entity_type": "employee",
          "count": 66,
          "ats_system_stats": {
            "successfactors": 53,
            "orc": 2,
            "workday": 11
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 55,
            "standard_macros.chained_macro": 4,
            "workday_macros.extract_field_from_report": 7
          }
        },
        {
          "field_path": "job_description",
          "entity_type": "position",
          "count": 59,
          "ats_system_stats": {
            "taleo": 1,
            "workday": 15,
            "orc": 15,
            "successfactors": 11,
            "kenexa": 7,
            "lever": 2,
            "icims": 6,
            "adp": 2
          },
          "transform_macro_stats": {
            "taleo_macros.extract_job_description": 1,
            "standard_macros.extract_path": 8,
            "standard_macros.extract_and_transform_from_entity": 3,
            "adapter_macros.substitute_template": 17,
            "kenexa_macros.extract_job_description": 6,
            "standard_macros.chained_macro": 24
          }
        },
        {
          "field_path": "company",
          "entity_type": "position",
          "count": 58,
          "ats_system_stats": {
            "workday": 17,
            "successfactors": 31,
            "orc": 1,
            "cornerstone": 2,
            "icims": 2,
            "taleo": 3,
            "kenexa": 2
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 9,
            "standard_macros.extract_path": 26,
            "adapter_macros.substitute_template": 17,
            "standard_macros.chained_macro": 2,
            "kenexa_macros.extract_answer_from_job_ques": 2
          }
        },
        {
          "field_path": "recruiterTeam",
          "entity_type": "position",
          "count": 58,
          "ats_system_stats": {
            "successfactors": 58
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "country",
          "entity_type": "add_application",
          "count": 57,
          "ats_system_stats": {
            "successfactors": 52,
            "icims": 3,
            "adp": 2
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 41,
            "standard_macros.chained_macro": 9,
            "adapter_macros.substitute_template": 2,
            "adapter_macros.extract_attr_and_default": 1,
            "adapter_macros.extract_answer_id_from_qna": 2,
            "adapter_macros.set_additional_fields": 2
          }
        },
        {
          "field_path": "race",
          "entity_type": "application",
          "count": 56,
          "ats_system_stats": {
            "icims": 6,
            "kenexa": 6,
            "successfactors": 36,
            "workday": 6,
            "volkscience": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 4,
            "kenexa_macros.extract_appl_answer_form_data": 6,
            "successfactor_macros.extract_picklist_field": 25,
            "standard_macros.extract_and_format_from_entity": 5,
            "adapter_macros.substitute_template": 6,
            "workday_macros.extract_field_from_report": 3,
            "adapter_macros.extract_candidate_qna": 2
          }
        },
        {
          "field_path": "city",
          "entity_type": "add_application",
          "count": 55,
          "ats_system_stats": {
            "successfactors": 55
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 51,
            "adapter_macros.substitute_template": 3,
            "successfactor_macros.transform_value_field": 1
          }
        },
        {
          "field_path": "restrict_access",
          "entity_type": "position",
          "count": 54,
          "ats_system_stats": {
            "successfactors": 22,
            "icims": 10,
            "taleo": 4,
            "orc": 10,
            "kenexa": 2,
            "workday": 6
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 26,
            "taleo_macros.set_confidential_flag": 4,
            "standard_macros.chained_macro": 13,
            "standard_macros.extract_path": 5,
            "kenexa_macros.extract_boolean_job_question": 2,
            "successfactor_macros.extract_and_match": 4
          }
        },
        {
          "field_path": "city",
          "entity_type": "add_candidate",
          "count": 53,
          "ats_system_stats": {
            "successfactors": 53
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 46,
            "adapter_macros.extract_app_qna": 1,
            "standard_macros.chained_macro": 3,
            "adapter_macros.substitute_template": 3
          }
        },
        {
          "field_path": "country",
          "entity_type": "add_candidate",
          "count": 53,
          "ats_system_stats": {
            "successfactors": 53
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 33,
            "standard_macros.chained_macro": 15,
            "successfactor_macros.extract_attr_value": 2,
            "adapter_macros.substitute_template": 2
          }
        },
        {
          "field_path": "gender",
          "entity_type": "application",
          "count": 53,
          "ats_system_stats": {
            "icims": 7,
            "kenexa": 6,
            "successfactors": 35,
            "volkscience": 2,
            "workday": 3
          },
          "transform_macro_stats": {
            "kenexa_macros.extract_gender_appl_answer": 6,
            "standard_macros.chained_macro": 13,
            "adapter_macros.substitute_template": 8,
            "successfactor_macros.extract_and_remap": 7,
            "successfactor_macros.extract_picklist_field": 6,
            "adapter_macros.extract_candidate_qna": 2,
            "standard_macros.extract_path": 4
          }
        },
        {
          "field_path": "job_code",
          "entity_type": "employee",
          "count": 52,
          "ats_system_stats": {
            "successfactors": 38,
            "orc": 3,
            "workday": 11
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 23,
            "adapter_macros.substitute_template": 19,
            "standard_macros.extract_path_and_default": 2,
            "standard_macros.chained_macro": 1,
            "workday_macros.extract_field_from_report": 7
          }
        },
        {
          "field_path": "zip",
          "entity_type": "add_candidate",
          "count": 52,
          "ats_system_stats": {
            "successfactors": 52
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 45,
            "standard_macros.chained_macro": 3,
            "adapter_macros.substitute_template": 3,
            "successfactor_macros.transform_value_field": 1
          }
        },
        {
          "field_path": "zip",
          "entity_type": "add_application",
          "count": 51,
          "ats_system_stats": {
            "successfactors": 51
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 47,
            "adapter_macros.substitute_template": 3,
            "successfactor_macros.transform_value_field": 1
          }
        },
        {
          "field_path": "state",
          "entity_type": "add_application",
          "count": 50,
          "ats_system_stats": {
            "successfactors": 48,
            "adp": 2
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 27,
            "successfactor_macros.extract_app_qna_value": 19,
            "adapter_macros.substitute_template": 2,
            "adapter_macros.set_additional_fields": 2
          }
        },
        {
          "field_path": "state",
          "entity_type": "add_candidate",
          "count": 50,
          "ats_system_stats": {
            "successfactors": 50
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 29,
            "successfactor_macros.extract_attr_value": 2,
            "successfactor_macros.extract_app_qna_value": 14,
            "successfactor_macros.extract_state_id_from_candidate_location": 2,
            "adapter_macros.substitute_template": 2,
            "successfactor_macros.transform_value_field": 1
          }
        },
        {
          "field_path": "first_name",
          "entity_type": "employee",
          "count": 49,
          "ats_system_stats": {
            "successfactors": 32,
            "workday": 13,
            "orc": 2,
            "ukg": 2
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 10,
            "standard_macros.extract_path": 21,
            "standard_macros.chained_macro": 15,
            "workday_macros.extract_field_from_report": 1
          }
        },
        {
          "field_path": "address",
          "entity_type": "add_candidate",
          "count": 48,
          "ats_system_stats": {
            "successfactors": 48
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 42,
            "standard_macros.chained_macro": 3,
            "adapter_macros.substitute_template": 2,
            "successfactor_macros.extract_attr_value": 1
          }
        },
        {
          "field_path": "termination_date",
          "entity_type": "employee",
          "count": 47,
          "ats_system_stats": {
            "workday": 10,
            "successfactors": 37
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 10,
            "successfactor_macros.extract_standard_date_field": 14,
            "standard_macros.extract_path": 3,
            "successfactor_macros.extract_date_field": 18,
            "workday_macros.extract_field_from_report": 1,
            "adapter_macros.substitute_template": 1
          }
        },
        {
          "field_path": "role_change_date",
          "entity_type": "employee",
          "count": 47,
          "ats_system_stats": {
            "successfactors": 34,
            "workday": 13
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 24,
            "standard_macros.chained_macro": 7,
            "successfactor_macros.extract_date_field": 8,
            "standard_macros.extract_path": 4,
            "workday_macros.extract_field_from_report": 4
          }
        },
        {
          "field_path": "workflow_template_id",
          "entity_type": "position",
          "count": 46,
          "ats_system_stats": {
            "workday": 22,
            "orc": 11,
            "icims": 7,
            "volkscience": 4,
            "peoplesoft": 2
          },
          "transform_macro_stats": {
            "workday_macros.extract_integration_fields_as_csv": 1,
            "standard_macros.extract_path": 10,
            "workday_macros.extract_field_from_report": 1,
            "adapter_macros.substitute_template": 19,
            "standard_macros.chained_macro": 12,
            "standard_macros.extract_path_and_default": 3
          }
        },
        {
          "field_path": "gender",
          "entity_type": "candidate",
          "count": 45,
          "ats_system_stats": {
            "taleo": 16,
            "workday": 3,
            "icims": 4,
            "successfactors": 18,
            "cornerstone": 2,
            "volkscience": 2
          },
          "transform_macro_stats": {
            "adapter_macros.extract_candidate_qna": 13,
            "workday_macros.extract_field_from_report": 1,
            "standard_macros.extract_path": 18,
            "successfactor_macros.extract_picklist_field": 3,
            "standard_macros.chained_macro": 5,
            "adapter_macros.substitute_template": 3,
            "adapter_macros.extract_app_qna": 2
          }
        },
        {
          "field_path": "internal_posting_url",
          "entity_type": "position",
          "count": 45,
          "ats_system_stats": {
            "workday": 37,
            "successfactors": 3,
            "orc": 3,
            "icims": 2
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 25,
            "workday_macros.extract_integration_fields_as_csv": 5,
            "standard_macros.chained_macro": 3,
            "adapter_macros.substitute_template": 5,
            "standard_macros.extract_path": 7
          }
        },
        {
          "field_path": "last_name",
          "entity_type": "employee",
          "count": 44,
          "ats_system_stats": {
            "orc": 3,
            "workday": 15,
            "successfactors": 26
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 11,
            "standard_macros.extract_path": 24,
            "adapter_macros.substitute_template": 6,
            "workday_macros.extract_field_from_report": 3
          }
        },
        {
          "field_path": "custom_raas_fetch_report",
          "entity_type": "employee",
          "count": 43,
          "ats_system_stats": {
            "workday": 43
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "address",
          "entity_type": "add_application",
          "count": 43,
          "ats_system_stats": {
            "successfactors": 43
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 40,
            "adapter_macros.substitute_template": 2,
            "successfactor_macros.extract_attr_value": 1
          }
        },
        {
          "field_path": "manager_email",
          "entity_type": "employee",
          "count": 42,
          "ats_system_stats": {
            "workday": 13,
            "orc": 5,
            "successfactors": 24
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 10,
            "standard_macros.chained_macro": 9,
            "standard_macros.extract_path": 20,
            "adapter_macros.substitute_template": 3
          }
        },
        {
          "field_path": "job_code",
          "entity_type": "position",
          "count": 42,
          "ats_system_stats": {
            "orc": 4,
            "successfactors": 12,
            "greenhouse": 4,
            "icims": 12,
            "workday": 4,
            "kenexa": 1,
            "taleo": 3,
            "ukg": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 23,
            "adapter_macros.substitute_template": 5,
            "standard_macros.extract_path_and_default": 2,
            "standard_macros.chained_macro": 7,
            "kenexa_macros.extract_answer_from_job_ques": 1,
            "workday_macros.extract_field_from_report": 2
          }
        },
        {
          "field_path": "role",
          "entity_type": "employee",
          "count": 42,
          "ats_system_stats": {
            "successfactors": 34,
            "workday": 8
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 33,
            "workday_macros.extract_field_from_report": 4,
            "standard_macros.chained_macro": 2,
            "adapter_macros.substitute_template": 3
          }
        },
        {
          "field_path": "degree_nav",
          "entity_type": "employee",
          "count": 41,
          "ats_system_stats": {
            "successfactors": 41
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "last_name",
          "entity_type": "candidate",
          "count": 39,
          "ats_system_stats": {
            "workday": 35,
            "successfactors": 4
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 24,
            "standard_macros.chained_macro": 8,
            "standard_macros.extract_path": 5,
            "workday_macros.extract_field_from_report": 2
          }
        },
        {
          "field_path": "sourcers",
          "entity_type": "position",
          "count": 39,
          "ats_system_stats": {
            "workday": 31,
            "successfactors": 4,
            "orc": 2,
            "icims": 2
          },
          "transform_macro_stats": {
            "workday_macros.extract_user_from_integration_fields": 10,
            "workday_macros.extract_user_from_report": 6,
            "workday_macros.extract_users_from_report": 14,
            "successfactor_macros.extract_recruiting_team_followers": 2,
            "standard_macros.chained_macro": 3,
            "icims_macros.extract_user": 2,
            "adapter_macros.substitute_template": 2
          }
        },
        {
          "field_path": "hiringManagerTeam",
          "entity_type": "position",
          "count": 39,
          "ats_system_stats": {
            "successfactors": 39
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "race",
          "entity_type": "add_application",
          "count": 39,
          "ats_system_stats": {
            "successfactors": 31,
            "volkscience": 7,
            "icims": 1
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 29,
            "standard_macros.extract_path": 1,
            "adapter_macros.substitute_template": 6,
            "adapter_macros.extract_answer_id_from_qna": 1,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "coordinators",
          "entity_type": "position",
          "count": 38,
          "ats_system_stats": {
            "workday": 27,
            "successfactors": 9,
            "orc": 2
          },
          "transform_macro_stats": {
            "workday_macros.extract_user_list_by_email_field_from_report": 3,
            "workday_macros.extract_users_from_report": 11,
            "workday_macros.extract_user_from_integration_fields": 2,
            "successfactor_macros.extract_recruiting_team_followers": 7,
            "workday_macros.extract_user_from_report": 8,
            "standard_macros.chained_macro": 5
          }
        },
        {
          "field_path": "title",
          "entity_type": "position",
          "count": 37,
          "ats_system_stats": {
            "taleo": 5,
            "successfactors": 16,
            "kenexa": 7,
            "workday": 6,
            "cornerstone": 1,
            "adp": 2
          },
          "transform_macro_stats": {
            "taleo_macros.extract_udf_value": 2,
            "standard_macros.extract_path": 20,
            "kenexa_macros.extract_answer_from_job_ques": 7,
            "workday_macros.extract_field_from_report": 6,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "posting_url",
          "entity_type": "position",
          "count": 36,
          "ats_system_stats": {
            "taleo": 9,
            "workday": 11,
            "orc": 7,
            "successfactors": 7,
            "icims": 2
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 20,
            "workday_macros.extract_field_from_report": 2,
            "standard_macros.extract_path": 7,
            "standard_macros.chained_macro": 7
          }
        },
        {
          "field_path": "major",
          "entity_type": "employee.education",
          "count": 36,
          "ats_system_stats": {
            "successfactors": 36
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 19,
            "standard_macros.extract_path": 17
          }
        },
        {
          "field_path": "ethnicity",
          "entity_type": "add_application",
          "count": 36,
          "ats_system_stats": {
            "successfactors": 35,
            "icims": 1
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 33,
            "standard_macros.chained_macro": 2,
            "adapter_macros.extract_answer_id_from_qna": 1
          }
        },
        {
          "field_path": "is_private",
          "entity_type": "position",
          "count": 36,
          "ats_system_stats": {
            "successfactors": 24,
            "workday": 10,
            "greenhouse": 2
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 27,
            "standard_macros.extract_path": 1
          }
        },
        {
          "field_path": "degree",
          "entity_type": "employee.education",
          "count": 35,
          "ats_system_stats": {
            "successfactors": 35
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 21,
            "standard_macros.extract_path": 14
          }
        },
        {
          "field_path": "custom_raas_fetch_report",
          "entity_type": "candidate",
          "count": 35,
          "ats_system_stats": {
            "workday": 35
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "coordinator",
          "entity_type": "position",
          "count": 34,
          "ats_system_stats": {
            "successfactors": 31,
            "icims": 3
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "disability_status",
          "entity_type": "application",
          "count": 34,
          "ats_system_stats": {
            "workday": 2,
            "successfactors": 23,
            "icims": 3,
            "kenexa": 6
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 7,
            "successfactor_macros.extract_picklist_field": 6,
            "standard_macros.chained_macro": 8,
            "kenexa_macros.extract_boolean_appl_answer": 6,
            "adapter_macros.substitute_template": 2,
            "standard_macros.extract_and_format_from_entity": 5
          }
        },
        {
          "field_path": "first_name",
          "entity_type": "candidate",
          "count": 33,
          "ats_system_stats": {
            "workday": 30,
            "successfactors": 3
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 21,
            "standard_macros.chained_macro": 5,
            "standard_macros.extract_path": 5,
            "workday_macros.extract_field_from_report": 2
          }
        },
        {
          "field_path": "Veterans_Status_Reference",
          "entity_type": "add_application",
          "count": 33,
          "ats_system_stats": {
            "workday": 33
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 33
          }
        },
        {
          "field_path": "race",
          "entity_type": "candidate",
          "count": 33,
          "ats_system_stats": {
            "taleo": 16,
            "workday": 6,
            "icims": 4,
            "successfactors": 5,
            "volkscience": 2
          },
          "transform_macro_stats": {
            "adapter_macros.extract_candidate_qna": 15,
            "workday_macros.extract_field_from_report": 1,
            "standard_macros.extract_path": 6,
            "standard_macros.chained_macro": 5,
            "adapter_macros.substitute_template": 6
          }
        },
        {
          "field_path": "contact_consent",
          "entity_type": "candidate",
          "count": 33,
          "ats_system_stats": {
            "taleo": 2,
            "successfactors": 27,
            "volkscience": 2,
            "icims": 1,
            "workday": 1
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 5,
            "successfactor_macros.extract_and_map_contact_consent": 27,
            "adapter_macros.substitute_template": 1
          }
        },
        {
          "field_path": "last_modified_ts",
          "entity_type": "position",
          "count": 33,
          "ats_system_stats": {
            "workday": 33
          },
          "transform_macro_stats": {
            "workday_macros.extract_and_transform_field_from_report": 23,
            "workday_macros.extract_integration_fields_as_csv": 8,
            "workday_macros.extract_field_from_report_with_timezone": 2
          }
        },
        {
          "field_path": "middleName",
          "entity_type": "add_application",
          "count": 33,
          "ats_system_stats": {
            "successfactors": 31,
            "adp": 2
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 29,
            "adapter_macros.substitute_template": 2,
            "adapter_macros.set_additional_fields": 2
          }
        },
        {
          "field_path": "veteran_status",
          "entity_type": "application",
          "count": 33,
          "ats_system_stats": {
            "icims": 3,
            "kenexa": 6,
            "successfactors": 20,
            "workday": 4
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 4,
            "kenexa_macros.extract_boolean_appl_answer": 6,
            "standard_macros.chained_macro": 8,
            "adapter_macros.substitute_template": 4,
            "successfactor_macros.extract_picklist_field": 7,
            "successfactor_macros.extract_and_match": 1,
            "workday_macros.extract_field_from_report": 3
          }
        },
        {
          "field_path": "secondRecruiter",
          "entity_type": "position",
          "count": 33,
          "ats_system_stats": {
            "successfactors": 33
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "Source_Reference",
          "entity_type": "add_application",
          "count": 32,
          "ats_system_stats": {
            "workday": 32
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_source_from_qna": 22,
            "standard_macros.chained_macro": 5,
            "workday_macros.extract_application_field_from_qna": 5
          }
        },
        {
          "field_path": "Gender_Reference",
          "entity_type": "add_application",
          "count": 32,
          "ats_system_stats": {
            "workday": 32
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 32
          }
        },
        {
          "field_path": "Ethnicity_Reference",
          "entity_type": "add_application",
          "count": 32,
          "ats_system_stats": {
            "workday": 32
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 30,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "source",
          "entity_type": "application",
          "count": 32,
          "ats_system_stats": {
            "successfactors": 8,
            "workday": 6,
            "icims": 9,
            "taleo": 1,
            "orc": 4,
            "jobvite": 3,
            "kenexa": 1
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 18,
            "standard_macros.extract_path": 5,
            "standard_macros.extract_and_format_from_entity": 2,
            "standard_macros.extract_path_and_default": 3,
            "successfactor_macros.extract_picklist_field": 2
          }
        },
        {
          "field_path": "location_country",
          "entity_type": "employee",
          "count": 31,
          "ats_system_stats": {
            "successfactors": 23,
            "orc": 2,
            "workday": 6
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 7,
            "standard_macros.extract_path": 19,
            "workday_macros.extract_employee_location": 1,
            "workday_macros.extract_field_from_report": 4
          }
        },
        {
          "field_path": "work_location_option",
          "entity_type": "position",
          "count": 28,
          "ats_system_stats": {
            "taleo": 2,
            "workday": 12,
            "orc": 4,
            "successfactors": 7,
            "cornerstone": 1,
            "ukg": 2
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 11,
            "taleo_macros.extract_udf_value": 1,
            "standard_macros.chained_macro": 8,
            "successfactor_macros.extract_picklist_field": 4,
            "standard_macros.extract_path": 2,
            "orc_macros.fetch_field_from_requisitionDFF": 2
          }
        },
        {
          "field_path": "disabilityStatus",
          "entity_type": "add_application",
          "count": 28,
          "ats_system_stats": {
            "successfactors": 28
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 28
          }
        },
        {
          "field_path": "gender",
          "entity_type": "add_application",
          "count": 28,
          "ats_system_stats": {
            "volkscience": 7,
            "successfactors": 20,
            "icims": 1
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 1,
            "successfactor_macros.extract_app_qna_value": 20,
            "adapter_macros.substitute_template": 6,
            "adapter_macros.extract_answer_id_from_qna": 1
          }
        },
        {
          "field_path": "dateOfBirth",
          "entity_type": "add_application",
          "count": 28,
          "ats_system_stats": {
            "successfactors": 28
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 13,
            "successfactor_macros.extract_app_qna_value": 14,
            "successfactor_macros.transform_value_field": 1
          }
        },
        {
          "field_path": "phone",
          "entity_type": "employee",
          "count": 27,
          "ats_system_stats": {
            "workday": 10,
            "successfactors": 17
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 7,
            "standard_macros.extract_path": 13,
            "standard_macros.chained_macro": 7
          }
        },
        {
          "field_path": "manager_fullname",
          "entity_type": "employee",
          "count": 27,
          "ats_system_stats": {
            "workday": 9,
            "orc": 5,
            "successfactors": 13
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 5,
            "standard_macros.chained_macro": 10,
            "standard_macros.extract_path": 12
          }
        },
        {
          "field_path": "posting_title",
          "entity_type": "position",
          "count": 27,
          "ats_system_stats": {
            "taleo": 8,
            "orc": 1,
            "successfactors": 12,
            "icims": 2,
            "workday": 2,
            "kenexa": 2
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 6,
            "standard_macros.extract_path": 19,
            "kenexa_macros.extract_answer_from_job_ques": 2
          }
        },
        {
          "field_path": "location_country",
          "entity_type": "candidate",
          "count": 27,
          "ats_system_stats": {
            "taleo": 2,
            "successfactors": 7,
            "workday": 13,
            "icims": 5
          },
          "transform_macro_stats": {
            "taleo_macros.extract_proj_alias_field": 2,
            "standard_macros.extract_path": 14,
            "workday_macros.extract_field_from_report": 10,
            "standard_macros.chained_macro": 1
          }
        },
        {
          "field_path": "veteran_status",
          "entity_type": "candidate",
          "count": 27,
          "ats_system_stats": {
            "taleo": 16,
            "icims": 4,
            "successfactors": 2,
            "workday": 5
          },
          "transform_macro_stats": {
            "adapter_macros.extract_candidate_qna": 13,
            "standard_macros.extract_path": 7,
            "standard_macros.chained_macro": 3,
            "adapter_macros.substitute_template": 4
          }
        },
        {
          "field_path": "title",
          "entity_type": "employee.internal_experience",
          "count": 26,
          "ats_system_stats": {
            "successfactors": 21,
            "workday": 5
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 23,
            "standard_macros.chained_macro": 3
          }
        },
        {
          "field_path": "major_nav",
          "entity_type": "employee",
          "count": 25,
          "ats_system_stats": {
            "successfactors": 25
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "employment_type",
          "entity_type": "position",
          "count": 25,
          "ats_system_stats": {
            "successfactors": 13,
            "icims": 3,
            "cornerstone": 3,
            "taleo": 3,
            "workday": 1,
            "kenexa": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 9,
            "standard_macros.extract_path_and_default": 2,
            "successfactor_macros.extract_picklist_field": 5,
            "adapter_macros.substitute_template": 2,
            "taleo_macros.extract_udf_value": 3,
            "kenexa_macros.extract_answer_from_job_ques": 2
          }
        },
        {
          "field_path": "secondRecruiterTeam",
          "entity_type": "position",
          "count": 25,
          "ats_system_stats": {
            "successfactors": 25
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "veteranStatus",
          "entity_type": "add_application",
          "count": 24,
          "ats_system_stats": {
            "successfactors": 24
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 22,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "agreeToPrivacyStatement",
          "entity_type": "add_candidate",
          "count": 24,
          "ats_system_stats": {
            "successfactors": 24
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 8,
            "successfactor_macros.extract_app_qna_value": 16
          }
        },
        {
          "field_path": "applicationDate",
          "entity_type": "application",
          "count": 24,
          "ats_system_stats": {
            "successfactors": 24
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "school",
          "entity_type": "candidate.education",
          "count": 24,
          "ats_system_stats": {
            "successfactors": 21,
            "taleo": 3
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 13,
            "successfactor_macros.extract_picklist_field": 8,
            "taleo_macros.extract_udf_value": 3
          }
        },
        {
          "field_path": "status",
          "entity_type": "position",
          "count": 23,
          "ats_system_stats": {
            "workday": 6,
            "successfactors": 11,
            "orc": 2,
            "lever": 2,
            "taleo": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 11,
            "standard_macros.chained_macro": 1,
            "adapter_macros.substitute_template": 3,
            "standard_macros.extract_and_format_from_entity": 2
          }
        },
        {
          "field_path": "sourcerTeam",
          "entity_type": "position",
          "count": 23,
          "ats_system_stats": {
            "successfactors": 23
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "education.degree",
          "entity_type": "employee",
          "count": 23,
          "ats_system_stats": {
            "successfactors": 23
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 23
          }
        },
        {
          "field_path": "education.school",
          "entity_type": "employee",
          "count": 22,
          "ats_system_stats": {
            "successfactors": 22
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 22
          }
        },
        {
          "field_path": "hiring_date",
          "entity_type": "employee",
          "count": 22,
          "ats_system_stats": {
            "workday": 4,
            "successfactors": 18
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 2,
            "successfactor_macros.extract_standard_date_field": 13,
            "adapter_macros.substitute_template": 2,
            "successfactor_macros.extract_date_field": 4,
            "standard_macros.extract_path": 1
          }
        },
        {
          "field_path": "location_obj",
          "entity_type": "position",
          "count": 22,
          "ats_system_stats": {
            "successfactors": 22
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "country",
          "entity_type": "position",
          "count": 22,
          "ats_system_stats": {
            "kenexa": 5,
            "successfactors": 17
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "company",
          "entity_type": "employee.internal_experience",
          "count": 21,
          "ats_system_stats": {
            "successfactors": 21
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 16,
            "standard_macros.extract_path": 5
          }
        },
        {
          "field_path": "businessUnit_obj",
          "entity_type": "position",
          "count": 21,
          "ats_system_stats": {
            "successfactors": 21
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "homePhone",
          "entity_type": "add_application",
          "count": 21,
          "ats_system_stats": {
            "successfactors": 21
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 18,
            "adapter_macros.substitute_template": 3
          }
        },
        {
          "field_path": "source_type",
          "entity_type": "application",
          "count": 21,
          "ats_system_stats": {
            "successfactors": 2,
            "workday": 6,
            "icims": 7,
            "orc": 2,
            "taleo": 3,
            "kenexa": 1
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 7,
            "standard_macros.chained_macro": 8,
            "adapter_macros.substitute_template": 5,
            "kenexa_macros.extract_appl_answer_form_data": 1
          }
        },
        {
          "field_path": "manager_userid",
          "entity_type": "employee",
          "count": 21,
          "ats_system_stats": {
            "orc": 5,
            "successfactors": 9,
            "workday": 7
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 5,
            "standard_macros.extract_path": 12,
            "workday_macros.extract_field_from_report": 4
          }
        },
        {
          "field_path": "cellPhone",
          "entity_type": "add_application",
          "count": 20,
          "ats_system_stats": {
            "successfactors": 20
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 18,
            "adapter_macros.substitute_template": 2
          }
        },
        {
          "field_path": "vpOfStaffing",
          "entity_type": "position",
          "count": 20,
          "ats_system_stats": {
            "successfactors": 20
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "degree",
          "entity_type": "candidate.education",
          "count": 20,
          "ats_system_stats": {
            "successfactors": 17,
            "taleo": 3
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 11,
            "standard_macros.extract_path": 6,
            "taleo_macros.extract_udf_value": 3
          }
        },
        {
          "field_path": "city",
          "entity_type": "position",
          "count": 20,
          "ats_system_stats": {
            "kenexa": 7,
            "successfactors": 13
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "Disability_Status_Reference",
          "entity_type": "add_application",
          "count": 19,
          "ats_system_stats": {
            "workday": 19
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 15,
            "standard_macros.chained_macro": 4
          }
        },
        {
          "field_path": "disability_status",
          "entity_type": "candidate",
          "count": 19,
          "ats_system_stats": {
            "taleo": 13,
            "icims": 4,
            "successfactors": 2
          },
          "transform_macro_stats": {
            "adapter_macros.extract_candidate_qna": 13,
            "standard_macros.extract_path": 5,
            "adapter_macros.substitute_template": 1
          }
        },
        {
          "field_path": "sourcer",
          "entity_type": "position",
          "count": 19,
          "ats_system_stats": {
            "successfactors": 19
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "questionnaire",
          "entity_type": "position",
          "count": 19,
          "ats_system_stats": {
            "successfactors": 15,
            "workday": 4
          },
          "transform_macro_stats": {
            "adapter_macros.extract_object_from_json": 19
          }
        },
        {
          "field_path": "attachment1",
          "entity_type": "add_application",
          "count": 19,
          "ats_system_stats": {
            "successfactors": 19
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 9,
            "successfactor_macros.extract_attachment_payload": 10
          }
        },
        {
          "field_path": "department",
          "entity_type": "employee.internal_experience",
          "count": 18,
          "ats_system_stats": {
            "successfactors": 18
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 18
          }
        },
        {
          "field_path": "reason",
          "entity_type": "application",
          "count": 18,
          "ats_system_stats": {
            "successfactors": 11,
            "icims": 3,
            "kenexa": 4
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 4,
            "successfactor_macros.extract_picklist_field": 6,
            "adapter_macros.substitute_template": 3,
            "standard_macros.chained_macro": 1,
            "kenexa_macros.extract_appl_answer_form_data": 4
          }
        },
        {
          "field_path": "division_obj",
          "entity_type": "position",
          "count": 18,
          "ats_system_stats": {
            "successfactors": 18
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "address2",
          "entity_type": "add_application",
          "count": 18,
          "ats_system_stats": {
            "successfactors": 13,
            "icims": 3,
            "adp": 2
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 11,
            "adapter_macros.substitute_template": 2,
            "adapter_macros.extract_attr_and_default": 3,
            "adapter_macros.set_additional_fields": 2
          }
        },
        {
          "field_path": "source_name",
          "entity_type": "application",
          "count": 18,
          "ats_system_stats": {
            "icims": 9,
            "jobvite": 1,
            "orc": 2,
            "taleo": 3,
            "workday": 3
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 8,
            "standard_macros.extract_path": 7,
            "standard_macros.extract_path_and_default": 1,
            "adapter_macros.substitute_template": 2
          }
        },
        {
          "field_path": "mfield1",
          "entity_type": "position",
          "count": 18,
          "ats_system_stats": {
            "successfactors": 18
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "referralSource",
          "entity_type": "add_application",
          "count": 18,
          "ats_system_stats": {
            "successfactors": 18
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 18
          }
        },
        {
          "field_path": "cust_gender",
          "entity_type": "add_application",
          "count": 18,
          "ats_system_stats": {
            "successfactors": 18
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 12,
            "standard_macros.chained_macro": 6
          }
        },
        {
          "field_path": "department",
          "entity_type": "position",
          "count": 18,
          "ats_system_stats": {
            "successfactors": 11,
            "workday": 3,
            "orc": 4
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 3,
            "standard_macros.extract_path": 7
          }
        },
        {
          "field_path": "education.major",
          "entity_type": "employee",
          "count": 18,
          "ats_system_stats": {
            "successfactors": 18
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 18
          }
        },
        {
          "field_path": "custom_raas_fetch_report",
          "entity_type": "application",
          "count": 18,
          "ats_system_stats": {
            "workday": 18
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "disabilityStatus",
          "entity_type": "application",
          "count": 18,
          "ats_system_stats": {
            "successfactors": 18
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "start_ts",
          "entity_type": "employee.internal_experience",
          "count": 17,
          "ats_system_stats": {
            "successfactors": 14,
            "workday": 3
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 14,
            "standard_macros.chained_macro": 3
          }
        },
        {
          "field_path": "school",
          "entity_type": "employee.education",
          "count": 17,
          "ats_system_stats": {
            "successfactors": 17
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 4,
            "standard_macros.extract_path": 13
          }
        },
        {
          "field_path": "disclaimerAcknowledge",
          "entity_type": "add_application",
          "count": 17,
          "ats_system_stats": {
            "successfactors": 17
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 15,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "personal_email",
          "entity_type": "employee",
          "count": 17,
          "ats_system_stats": {
            "workday": 9,
            "successfactors": 8
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 12,
            "adapter_macros.substitute_template": 4,
            "workday_macros.extract_field_from_report": 1
          }
        },
        {
          "field_path": "urls",
          "entity_type": "candidate",
          "count": 17,
          "ats_system_stats": {
            "workday": 2,
            "icims": 3,
            "successfactors": 12
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 5,
            "standard_macros.extract_path": 7,
            "standard_macros.chained_macro": 5
          }
        },
        {
          "field_path": "title",
          "entity_type": "employee.external_experience",
          "count": 17,
          "ats_system_stats": {
            "successfactors": 17
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 17
          }
        },
        {
          "field_path": "major",
          "entity_type": "candidate.education",
          "count": 17,
          "ats_system_stats": {
            "successfactors": 17
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 11,
            "standard_macros.extract_path": 6
          }
        },
        {
          "field_path": "is_internal",
          "entity_type": "candidate",
          "count": 17,
          "ats_system_stats": {
            "successfactors": 5,
            "workday": 9,
            "taleo": 3
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 8
          }
        },
        {
          "field_path": "jobApplicationStatusAuditTrail",
          "entity_type": "application",
          "count": 16,
          "ats_system_stats": {
            "successfactors": 16
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "jobApplicationComments",
          "entity_type": "application",
          "count": 16,
          "ats_system_stats": {
            "successfactors": 16
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "is_posted",
          "entity_type": "position",
          "count": 16,
          "ats_system_stats": {
            "workday": 12,
            "icims": 2,
            "lever": 2
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 8,
            "standard_macros.extract_path": 2,
            "adapter_macros.substitute_template": 6
          }
        },
        {
          "field_path": "business_email",
          "entity_type": "employee",
          "count": 16,
          "ats_system_stats": {
            "workday": 3,
            "successfactors": 13
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 12,
            "standard_macros.chained_macro": 2,
            "workday_macros.extract_field_from_report": 2
          }
        },
        {
          "field_path": "Country_Reference",
          "entity_type": "add_candidate",
          "count": 15,
          "ats_system_stats": {
            "workday": 15
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 15
          }
        },
        {
          "field_path": "end_ts",
          "entity_type": "employee.internal_experience",
          "count": 15,
          "ats_system_stats": {
            "workday": 1,
            "successfactors": 14
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 1,
            "successfactor_macros.extract_standard_date_field": 14
          }
        },
        {
          "field_path": "filter1",
          "entity_type": "position",
          "count": 15,
          "ats_system_stats": {
            "successfactors": 15
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "is_evergreen",
          "entity_type": "position",
          "count": 15,
          "ats_system_stats": {
            "successfactors": 11,
            "taleo": 3,
            "workday": 1
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 9,
            "adapter_macros.substitute_template": 2,
            "standard_macros.chained_macro": 4
          }
        },
        {
          "field_path": "language",
          "entity_type": "employee.languages",
          "count": 15,
          "ats_system_stats": {
            "successfactors": 15
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 13,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "source",
          "entity_type": "add_candidate",
          "count": 15,
          "ats_system_stats": {
            "icims": 15
          },
          "transform_macro_stats": {
            "adapter_macros.extract_attr_and_default": 15
          }
        },
        {
          "field_path": "coverLetter",
          "entity_type": "add_application",
          "count": 15,
          "ats_system_stats": {
            "successfactors": 15
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 11,
            "successfactor_macros.extract_attachment_payload": 2,
            "successfactor_macros.extract_app_qna_value": 1,
            "adapter_macros.extract_answer_id_from_qna": 1
          }
        },
        {
          "field_path": "userid",
          "entity_type": "employee",
          "count": 15,
          "ats_system_stats": {
            "workday": 6,
            "successfactors": 9
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 11,
            "workday_macros.extract_field_from_report": 4
          }
        },
        {
          "field_path": "shareProfile",
          "entity_type": "add_candidate",
          "count": 15,
          "ats_system_stats": {
            "successfactors": 15
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 14,
            "standard_macros.chained_macro": 1
          }
        },
        {
          "field_path": "questionnaires",
          "entity_type": "position",
          "count": 15,
          "ats_system_stats": {
            "workday": 15
          },
          "transform_macro_stats": {
            "adapter_macros.extract_object_from_json": 15
          }
        },
        {
          "field_path": "middleName",
          "entity_type": "add_candidate",
          "count": 15,
          "ats_system_stats": {
            "successfactors": 15
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 13,
            "adapter_macros.substitute_template": 2
          }
        },
        {
          "field_path": "custom_raas_fetch_report",
          "entity_type": "add_application",
          "count": 15,
          "ats_system_stats": {
            "workday": 15
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "Address_Line_1",
          "entity_type": "add_candidate",
          "count": 14,
          "ats_system_stats": {
            "workday": 14
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 14
          }
        },
        {
          "field_path": "Postal_Code",
          "entity_type": "add_candidate",
          "count": 14,
          "ats_system_stats": {
            "workday": 14
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 14
          }
        },
        {
          "field_path": "City",
          "entity_type": "add_candidate",
          "count": 14,
          "ats_system_stats": {
            "workday": 14
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 12,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "start_ts",
          "entity_type": "employee.education",
          "count": 14,
          "ats_system_stats": {
            "successfactors": 14
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 14
          }
        },
        {
          "field_path": "end_ts",
          "entity_type": "employee.education",
          "count": 14,
          "ats_system_stats": {
            "successfactors": 14
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 14
          }
        },
        {
          "field_path": "gender",
          "entity_type": "add_candidate",
          "count": 14,
          "ats_system_stats": {
            "successfactors": 5,
            "icims": 6,
            "volkscience": 3
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5,
            "adapter_macros.extract_app_qna": 6,
            "adapter_macros.substitute_template": 3
          }
        },
        {
          "field_path": "jobAppStatus",
          "entity_type": "application",
          "count": 14,
          "ats_system_stats": {
            "successfactors": 14
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "requisitionDFF",
          "entity_type": "position",
          "count": 14,
          "ats_system_stats": {
            "orc": 14
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "posted_for",
          "entity_type": "position",
          "count": 14,
          "ats_system_stats": {
            "successfactors": 2,
            "workday": 4,
            "cornerstone": 3,
            "icims": 3,
            "lever": 2
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_and_remap": 2,
            "adapter_macros.substitute_template": 4,
            "standard_macros.chained_macro": 5,
            "standard_macros.extract_path_and_default": 1,
            "standard_macros.extract_path": 2
          }
        },
        {
          "field_path": "veteranStatus",
          "entity_type": "application",
          "count": 14,
          "ats_system_stats": {
            "successfactors": 14
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "department_obj",
          "entity_type": "position",
          "count": 13,
          "ats_system_stats": {
            "successfactors": 13
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cellPhone",
          "entity_type": "add_candidate",
          "count": 13,
          "ats_system_stats": {
            "successfactors": 13
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 11,
            "adapter_macros.substitute_template": 2
          }
        },
        {
          "field_path": "languageNav",
          "entity_type": "employee",
          "count": 13,
          "ats_system_stats": {
            "successfactors": 13
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "ats_job_posts",
          "entity_type": "position",
          "count": 13,
          "ats_system_stats": {
            "orc": 7,
            "successfactors": 6
          },
          "transform_macro_stats": {
            "adapter_macros.append_to_job_post_description": 13
          }
        },
        {
          "field_path": "nationality",
          "entity_type": "add_application",
          "count": 13,
          "ats_system_stats": {
            "successfactors": 13
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 13
          }
        },
        {
          "field_path": "education.location",
          "entity_type": "employee",
          "count": 13,
          "ats_system_stats": {
            "successfactors": 13
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 13
          }
        },
        {
          "field_path": "ethnicity",
          "entity_type": "application",
          "count": 13,
          "ats_system_stats": {
            "successfactors": 10,
            "icims": 3
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "preferred_first_name",
          "entity_type": "employee",
          "count": 13,
          "ats_system_stats": {
            "orc": 2,
            "workday": 9,
            "ukg": 2
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 2,
            "standard_macros.extract_path": 4,
            "workday_macros.extract_field_from_report": 4,
            "adapter_macros.substitute_template": 3
          }
        },
        {
          "field_path": "mfield3",
          "entity_type": "position",
          "count": 12,
          "ats_system_stats": {
            "successfactors": 12
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "coordinatorTeam",
          "entity_type": "position",
          "count": 12,
          "ats_system_stats": {
            "successfactors": 12
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "location",
          "entity_type": "employee.internal_experience",
          "count": 12,
          "ats_system_stats": {
            "successfactors": 12
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 2,
            "standard_macros.extract_path": 10
          }
        },
        {
          "field_path": "gender",
          "entity_type": "employee",
          "count": 12,
          "ats_system_stats": {
            "successfactors": 12
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 12
          }
        },
        {
          "field_path": "outsideWorkExperience",
          "entity_type": "candidate",
          "count": 12,
          "ats_system_stats": {
            "successfactors": 12
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "vpOfStaffingTeam",
          "entity_type": "position",
          "count": 12,
          "ats_system_stats": {
            "successfactors": 12
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "homePhone",
          "entity_type": "add_candidate",
          "count": 12,
          "ats_system_stats": {
            "successfactors": 12
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 3,
            "successfactor_macros.extract_app_qna_value": 9
          }
        },
        {
          "field_path": "Country_Region_Reference",
          "entity_type": "add_candidate",
          "count": 11,
          "ats_system_stats": {
            "workday": 11
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 7,
            "standard_macros.chained_macro": 4
          }
        },
        {
          "field_path": "preferred_first_name",
          "entity_type": "candidate",
          "count": 11,
          "ats_system_stats": {
            "taleo": 1,
            "successfactors": 7,
            "workday": 3
          },
          "transform_macro_stats": {
            "taleo_macros.extract_udf_value": 1,
            "standard_macros.extract_path": 7,
            "adapter_macros.substitute_template": 3
          }
        },
        {
          "field_path": "preferredName",
          "entity_type": "add_application",
          "count": 11,
          "ats_system_stats": {
            "successfactors": 11
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 11
          }
        },
        {
          "field_path": "manager_contact_email",
          "entity_type": "employee",
          "count": 11,
          "ats_system_stats": {
            "orc": 5,
            "successfactors": 6
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 5,
            "standard_macros.extract_path": 6
          }
        },
        {
          "field_path": "legalEntity_obj",
          "entity_type": "position",
          "count": 11,
          "ats_system_stats": {
            "successfactors": 11
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "preferredLoc",
          "entity_type": "add_application",
          "count": 11,
          "ats_system_stats": {
            "successfactors": 11
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 11
          }
        },
        {
          "field_path": "employee_type",
          "entity_type": "employee",
          "count": 11,
          "ats_system_stats": {
            "successfactors": 7,
            "workday": 4
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 6,
            "adapter_macros.substitute_template": 2,
            "workday_macros.extract_field_from_report": 3
          }
        },
        {
          "field_path": "speakingProfNav",
          "entity_type": "employee",
          "count": 11,
          "ats_system_stats": {
            "successfactors": 11
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "is_internal",
          "entity_type": "employee.internal_experience",
          "count": 11,
          "ats_system_stats": {
            "successfactors": 11
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 11
          }
        },
        {
          "field_path": "education",
          "entity_type": "candidate",
          "count": 11,
          "ats_system_stats": {
            "successfactors": 11
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_education": 2
          }
        },
        {
          "field_path": "custGender",
          "entity_type": "add_application",
          "count": 11,
          "ats_system_stats": {
            "successfactors": 11
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 11
          }
        },
        {
          "field_path": "stateNav",
          "entity_type": "position",
          "count": 11,
          "ats_system_stats": {
            "successfactors": 11
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "creation_ts",
          "entity_type": "position",
          "count": 10,
          "ats_system_stats": {
            "workday": 10
          },
          "transform_macro_stats": {
            "workday_macros.extract_and_transform_field_from_report": 1,
            "workday_macros.extract_integration_fields_as_csv": 9
          }
        },
        {
          "field_path": "customLegalAuth",
          "entity_type": "add_application",
          "count": 10,
          "ats_system_stats": {
            "successfactors": 10
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 10
          }
        },
        {
          "field_path": "status",
          "entity_type": "application",
          "count": 10,
          "ats_system_stats": {
            "successfactors": 10
          },
          "transform_macro_stats": {
            "successfactor_macros.remap_status_for_withdrawn_application": 10
          }
        },
        {
          "field_path": "jobApplicationInterview",
          "entity_type": "application",
          "count": 10,
          "ats_system_stats": {
            "successfactors": 10
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "custom_evergreen_report",
          "entity_type": "position",
          "count": 10,
          "ats_system_stats": {
            "workday": 10
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "supervisory_org",
          "entity_type": "position",
          "count": 10,
          "ats_system_stats": {
            "successfactors": 8,
            "workday": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 8,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "address2",
          "entity_type": "add_candidate",
          "count": 10,
          "ats_system_stats": {
            "successfactors": 10
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 8,
            "adapter_macros.substitute_template": 2
          }
        },
        {
          "field_path": "locale",
          "entity_type": "position",
          "count": 10,
          "ats_system_stats": {
            "successfactors": 10
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 10
          }
        },
        {
          "field_path": "company",
          "entity_type": "employee.external_experience",
          "count": 10,
          "ats_system_stats": {
            "successfactors": 10
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 10
          }
        },
        {
          "field_path": "location_objlist.value",
          "entity_type": "position",
          "count": 10,
          "ats_system_stats": {
            "successfactors": 10
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "degreeNav",
          "entity_type": "employee",
          "count": 10,
          "ats_system_stats": {
            "successfactors": 10
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "majorNav",
          "entity_type": "employee",
          "count": 10,
          "ats_system_stats": {
            "successfactors": 10
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "emailNav",
          "entity_type": "employee",
          "count": 10,
          "ats_system_stats": {
            "successfactors": 10
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "city",
          "entity_type": "application",
          "count": 10,
          "ats_system_stats": {
            "successfactors": 10
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "brand",
          "entity_type": "position",
          "count": 10,
          "ats_system_stats": {
            "successfactors": 8,
            "kenexa": 2
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "costCenter_obj",
          "entity_type": "position",
          "count": 10,
          "ats_system_stats": {
            "successfactors": 10
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "visa_status",
          "entity_type": "application",
          "count": 9,
          "ats_system_stats": {
            "jobvite": 1,
            "kenexa": 6,
            "successfactors": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path_and_default": 1,
            "kenexa_macros.extract_appl_answer_form_data": 6,
            "successfactor_macros.extract_picklist_field": 2
          }
        },
        {
          "field_path": "Language_Reference",
          "entity_type": "add_candidate",
          "count": 9,
          "ats_system_stats": {
            "workday": 9
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 9
          }
        },
        {
          "field_path": "Country_Phone_Code_Reference",
          "entity_type": "add_candidate",
          "count": 9,
          "ats_system_stats": {
            "workday": 9
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 9
          }
        },
        {
          "field_path": "customVisa",
          "entity_type": "add_application",
          "count": 9,
          "ats_system_stats": {
            "successfactors": 9
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 9
          }
        },
        {
          "field_path": "business_unit",
          "entity_type": "employee",
          "count": 9,
          "ats_system_stats": {
            "successfactors": 2,
            "workday": 7
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 4,
            "workday_macros.extract_field_from_report": 3,
            "workday_macros.extract_integration_fields_as_csv": 2
          }
        },
        {
          "field_path": "address",
          "entity_type": "application",
          "count": 9,
          "ats_system_stats": {
            "successfactors": 9
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "nationality",
          "entity_type": "add_candidate",
          "count": 9,
          "ats_system_stats": {
            "icims": 3,
            "successfactors": 6
          },
          "transform_macro_stats": {
            "adapter_macros.extract_app_qna": 3,
            "successfactor_macros.extract_app_qna_value": 4,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "race",
          "entity_type": "add_candidate",
          "count": 9,
          "ats_system_stats": {
            "icims": 6,
            "volkscience": 3
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 6,
            "adapter_macros.extract_app_qna": 3
          }
        },
        {
          "field_path": "disability",
          "entity_type": "application",
          "count": 9,
          "ats_system_stats": {
            "icims": 7,
            "successfactors": 2
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "company_name",
          "entity_type": "employee",
          "count": 9,
          "ats_system_stats": {
            "workday": 4,
            "successfactors": 5
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 6,
            "workday_macros.extract_field_from_report": 1,
            "adapter_macros.substitute_template": 2
          }
        },
        {
          "field_path": "phones",
          "entity_type": "candidate",
          "count": 9,
          "ats_system_stats": {
            "successfactors": 2,
            "workday": 7
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 2,
            "adapter_macros.substitute_template": 2,
            "standard_macros.chained_macro": 4,
            "workday_macros.extract_field_from_report": 1
          }
        },
        {
          "field_path": "division",
          "entity_type": "position",
          "count": 9,
          "ats_system_stats": {
            "successfactors": 7,
            "icims": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 2
          }
        },
        {
          "field_path": "emails",
          "entity_type": "candidate",
          "count": 9,
          "ats_system_stats": {
            "workday": 3,
            "successfactors": 6
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 5,
            "adapter_macros.substitute_template": 3,
            "workday_macros.extract_field_from_report": 1
          }
        },
        {
          "field_path": "global",
          "entity_type": "update_application.required_field_defaults",
          "count": 9,
          "ats_system_stats": {
            "successfactors": 9
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "country",
          "entity_type": "application",
          "count": 9,
          "ats_system_stats": {
            "successfactors": 9
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "degreeNav",
          "entity_type": "candidate",
          "count": 9,
          "ats_system_stats": {
            "successfactors": 9
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "majorNav",
          "entity_type": "candidate",
          "count": 9,
          "ats_system_stats": {
            "successfactors": 9
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "is_contingent",
          "entity_type": "employee",
          "count": 9,
          "ats_system_stats": {
            "successfactors": 9
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 3,
            "standard_macros.chained_macro": 6
          }
        },
        {
          "field_path": "sourcename",
          "entity_type": "add_candidate",
          "count": 9,
          "ats_system_stats": {
            "icims": 9
          },
          "transform_macro_stats": {
            "adapter_macros.extract_attr_and_default": 9
          }
        },
        {
          "field_path": "preferred_last_name",
          "entity_type": "employee",
          "count": 9,
          "ats_system_stats": {
            "workday": 9
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 2,
            "workday_macros.extract_field_from_report": 4,
            "adapter_macros.substitute_template": 3
          }
        },
        {
          "field_path": "customSourcePrimary",
          "entity_type": "add_application",
          "count": 9,
          "ats_system_stats": {
            "successfactors": 9
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 9
          }
        },
        {
          "field_path": "customFieldClause",
          "entity_type": "add_candidate",
          "count": 9,
          "ats_system_stats": {
            "taleo": 9
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 7,
            "taleo_macros.generate_additional_fields_xml": 2
          }
        },
        {
          "field_path": "sourceReferenceClause",
          "entity_type": "add_application",
          "count": 9,
          "ats_system_stats": {
            "taleo": 9
          },
          "transform_macro_stats": {
            "taleo_macros.extract_source_reference_xml": 6,
            "adapter_macros.substitute_template": 3
          }
        },
        {
          "field_path": "candidate_id",
          "entity_type": "candidate",
          "count": 9,
          "ats_system_stats": {
            "workday": 9
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 9
          }
        },
        {
          "field_path": "questions",
          "entity_type": "position",
          "count": 8,
          "ats_system_stats": {
            "taleo": 4,
            "successfactors": 4
          },
          "transform_macro_stats": {
            "taleo_macros.extract_position_questions": 4
          }
        },
        {
          "field_path": "school_nav",
          "entity_type": "employee",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "filter5",
          "entity_type": "position",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "filter8",
          "entity_type": "position",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "Citizenship_Reference",
          "entity_type": "add_application",
          "count": 8,
          "ats_system_stats": {
            "workday": 8
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 8
          }
        },
        {
          "field_path": "Comments",
          "entity_type": "position",
          "count": 8,
          "ats_system_stats": {
            "orc": 8
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "location",
          "entity_type": "employee.education",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 6,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "write",
          "entity_type": "employee.languages",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 7,
            "standard_macros.chained_macro": 1
          }
        },
        {
          "field_path": "read",
          "entity_type": "employee.languages",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 7,
            "standard_macros.chained_macro": 1
          }
        },
        {
          "field_path": "speak",
          "entity_type": "employee.languages",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 7,
            "standard_macros.chained_macro": 1
          }
        },
        {
          "field_path": "std_position_objlist",
          "entity_type": "position",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "location",
          "entity_type": "candidate",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 3,
            "taleo": 5
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 6,
            "adapter_macros.substitute_template": 2
          }
        },
        {
          "field_path": "state",
          "entity_type": "position",
          "count": 8,
          "ats_system_stats": {
            "kenexa": 5,
            "successfactors": 3
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "job_id",
          "entity_type": "position",
          "count": 8,
          "ats_system_stats": {
            "workday": 6,
            "cornerstone": 1,
            "kenexa": 1
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 6,
            "standard_macros.extract_path": 1
          }
        },
        {
          "field_path": "willingnessNav",
          "entity_type": "employee",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "suffix",
          "entity_type": "add_application",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 6,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "state",
          "entity_type": "application",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_gender",
          "entity_type": "application",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "posting_status",
          "entity_type": "position",
          "count": 8,
          "ats_system_stats": {
            "workday": 8
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 4,
            "standard_macros.extract_path": 4
          }
        },
        {
          "field_path": "location_city",
          "entity_type": "candidate",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 5,
            "icims": 3
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 8
          }
        },
        {
          "field_path": "location_state",
          "entity_type": "candidate",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 5,
            "icims": 3
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 5,
            "standard_macros.extract_path": 3
          }
        },
        {
          "field_path": "middleName",
          "entity_type": "application",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "personalInfoNav",
          "entity_type": "employee",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "emailTypeNav",
          "entity_type": "employee",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "jobCodeNav",
          "entity_type": "employee",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "custSalaryDesired",
          "entity_type": "add_application",
          "count": 8,
          "ats_system_stats": {
            "successfactors": 8
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 8
          }
        },
        {
          "field_path": "country_nav",
          "entity_type": "employee",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "customNationality",
          "entity_type": "add_application",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 7
          }
        },
        {
          "field_path": "is_current",
          "entity_type": "employee.internal_experience",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 5,
            "workday": 2
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 5,
            "adapter_macros.substitute_template": 2
          }
        },
        {
          "field_path": "Local_Person_Name",
          "entity_type": "add_candidate",
          "count": 7,
          "ats_system_stats": {
            "workday": 7
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 4
          }
        },
        {
          "field_path": "location_objlist.value.addressNavDEFLT.stateNav.picklistLabels",
          "entity_type": "position",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "hired_ts",
          "entity_type": "application",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 6,
            "workday": 1
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 6,
            "standard_macros.chained_macro": 1
          }
        },
        {
          "field_path": "referral_source",
          "entity_type": "application",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "readingProfNav",
          "entity_type": "employee",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "writingProfNav",
          "entity_type": "employee",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "is_internal",
          "entity_type": "employee.external_experience",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 7
          }
        },
        {
          "field_path": "title",
          "entity_type": "candidate.experience",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 4,
            "taleo": 3
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 4,
            "taleo_macros.extract_udf_value": 3
          }
        },
        {
          "field_path": "overall",
          "entity_type": "employee.languages",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 5,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "mfield2",
          "entity_type": "position",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "req_id",
          "entity_type": "position",
          "count": 7,
          "ats_system_stats": {
            "kenexa": 7
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "userid_nav",
          "entity_type": "employee",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "candidateSource",
          "entity_type": "add_application",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 7
          }
        },
        {
          "field_path": "dateOfBirth",
          "entity_type": "add_candidate",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 4,
            "successfactor_macros.extract_app_qna_value": 3
          }
        },
        {
          "field_path": "currentTitle",
          "entity_type": "add_application",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 7
          }
        },
        {
          "field_path": "address1",
          "entity_type": "add_application",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 2,
            "icims": 3,
            "adp": 2
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 2,
            "adapter_macros.extract_attr_and_default": 3,
            "adapter_macros.set_additional_fields": 2
          }
        },
        {
          "field_path": "cust_salaryExpect",
          "entity_type": "add_application",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "license_no",
          "entity_type": "employee.certificates",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 5,
            "workday": 2
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 5,
            "standard_macros.extract_path": 2
          }
        },
        {
          "field_path": "relocation",
          "entity_type": "employee.mobility",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 5,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "travel",
          "entity_type": "employee.mobility",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 5,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "jobAssessmentDetail",
          "entity_type": "application",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "locationNav",
          "entity_type": "employee",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "customSourceSecondary",
          "entity_type": "add_application",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 6,
            "standard_macros.chained_macro": 1
          }
        },
        {
          "field_path": "customVisaYes",
          "entity_type": "add_application",
          "count": 7,
          "ats_system_stats": {
            "successfactors": 7
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 7
          }
        },
        {
          "field_path": "diversityAnswersClause",
          "entity_type": "add_application",
          "count": 7,
          "ats_system_stats": {
            "taleo": 7
          },
          "transform_macro_stats": {
            "taleo_macros.extract_diversity_answers_xml": 4,
            "standard_macros.chained_macro": 3
          }
        },
        {
          "field_path": "level",
          "entity_type": "position",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "Hispanic_Or_Latino",
          "entity_type": "add_application",
          "count": 6,
          "ats_system_stats": {
            "workday": 6
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 6
          }
        },
        {
          "field_path": "veteran",
          "entity_type": "add_candidate",
          "count": 6,
          "ats_system_stats": {
            "icims": 6
          },
          "transform_macro_stats": {
            "adapter_macros.extract_app_qna": 6
          }
        },
        {
          "field_path": "disability",
          "entity_type": "add_candidate",
          "count": 6,
          "ats_system_stats": {
            "icims": 6
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 3,
            "adapter_macros.extract_app_qna": 3
          }
        },
        {
          "field_path": "external_job_id",
          "entity_type": "employee",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 4,
            "workday": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 2,
            "workday_macros.extract_field_from_report": 2,
            "adapter_macros.substitute_template": 2
          }
        },
        {
          "field_path": "questions",
          "entity_type": "application",
          "count": 6,
          "ats_system_stats": {
            "kenexa": 6
          },
          "transform_macro_stats": {
            "kenexa_macros.extract_appl_qna_form_data": 6
          }
        },
        {
          "field_path": "company",
          "entity_type": "employee",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 2,
            "workday": 4
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 2,
            "workday_macros.extract_field_from_report": 4
          }
        },
        {
          "field_path": "referralName",
          "entity_type": "add_application",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 6
          }
        },
        {
          "field_path": "suffix",
          "entity_type": "add_candidate",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 4,
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "zip",
          "entity_type": "application",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "user_id",
          "entity_type": "employee",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 6
          }
        },
        {
          "field_path": "emp_id",
          "entity_type": "employee",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 6
          }
        },
        {
          "field_path": "salutation",
          "entity_type": "add_application",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 6
          }
        },
        {
          "field_path": "secondlastName",
          "entity_type": "application",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "preferredName",
          "entity_type": "application",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "referralSource",
          "entity_type": "application",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "dateOfBirth",
          "entity_type": "application",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "education",
          "entity_type": "add_candidate",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {
            "successfactor_macros.candidate_background_elements": 6
          }
        },
        {
          "field_path": "personalInfo",
          "entity_type": "employee",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "jobType",
          "entity_type": "position",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_Gender",
          "entity_type": "application",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_Disability",
          "entity_type": "application",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "source",
          "entity_type": "candidate",
          "count": 6,
          "ats_system_stats": {
            "icims": 5,
            "successfactors": 1
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "start_ts",
          "entity_type": "employee.external_experience",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 6
          }
        },
        {
          "field_path": "end_ts",
          "entity_type": "employee.external_experience",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 6
          }
        },
        {
          "field_path": "salutation",
          "entity_type": "add_candidate",
          "count": 6,
          "ats_system_stats": {
            "successfactors": 6
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 4,
            "successfactor_macros.transform_value_field": 1,
            "standard_macros.chained_macro": 1
          }
        },
        {
          "field_path": "Date_of_Birth",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "workday": 5
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 5
          }
        },
        {
          "field_path": "mfield4",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "agreeToPrivacyStatement",
          "entity_type": "delete_candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 5
          }
        },
        {
          "field_path": "URL_Address",
          "entity_type": "add_candidate",
          "count": 5,
          "ats_system_stats": {
            "workday": 5
          },
          "transform_macro_stats": {
            "workday_macros.extract_answer_id_from_qna": 5
          }
        },
        {
          "field_path": "target_hire_date",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 2,
            "workday": 3
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 2,
            "standard_macros.chained_macro": 3
          }
        },
        {
          "field_path": "desireSalary",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5
          }
        },
        {
          "field_path": "highestEducation",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5
          }
        },
        {
          "field_path": "supportingDoc",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 3,
            "successfactor_macros.extract_attachment_payload": 2
          }
        },
        {
          "field_path": "location",
          "entity_type": "employee.external_experience",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 2,
            "standard_macros.extract_path": 3
          }
        },
        {
          "field_path": "nationality",
          "entity_type": "application",
          "count": 5,
          "ats_system_stats": {
            "icims": 3,
            "successfactors": 2
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "confidential",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "icims": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "formerEmployee",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 2,
            "standard_macros.chained_macro": 3
          }
        },
        {
          "field_path": "disability",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 4,
            "icims": 1
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 4,
            "adapter_macros.extract_answer_id_from_qna": 1
          }
        },
        {
          "field_path": "employmentNav/jobInfoNav/positionNav",
          "entity_type": "employee",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "workAuth",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5
          }
        },
        {
          "field_path": "visa",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5
          }
        },
        {
          "field_path": "jobInfoNav",
          "entity_type": "employee",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "currentCompany",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5
          }
        },
        {
          "field_path": "candidateLocale",
          "entity_type": "add_candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 5
          }
        },
        {
          "field_path": "cust_address2",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5
          }
        },
        {
          "field_path": "custAddress2",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5
          }
        },
        {
          "field_path": "custCitizenship1",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5
          }
        },
        {
          "field_path": "custCitizenship2",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5
          }
        },
        {
          "field_path": "custPersonalWebsite",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5
          }
        },
        {
          "field_path": "custPreferredName",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5
          }
        },
        {
          "field_path": "custReferralSource",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5
          }
        },
        {
          "field_path": "cust_RSSA_Citizenship",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5
          }
        },
        {
          "field_path": "cust_RSSA_Race",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5
          }
        },
        {
          "field_path": "custRejectReasonOfCandidate",
          "entity_type": "change_application_stage",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_attr_value": 5
          }
        },
        {
          "field_path": "currentTitle",
          "entity_type": "add_candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 5
          }
        },
        {
          "field_path": "outsideWorkExperience",
          "entity_type": "add_candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.candidate_background_elements": 5
          }
        },
        {
          "field_path": "ExternalQualHTML",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "orc": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "ExternalRespHTML",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "orc": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "InternalQualHTML",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "orc": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "InternalRespHTML",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "orc": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "coverLetter",
          "entity_type": "add_candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 5
          }
        },
        {
          "field_path": "cert_nameNav",
          "entity_type": "employee",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cert_descriptionNav",
          "entity_type": "employee",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "certificate_name",
          "entity_type": "employee.certificates",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 5
          }
        },
        {
          "field_path": "start_ts",
          "entity_type": "employee.certificates",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 5
          }
        },
        {
          "field_path": "end_ts",
          "entity_type": "employee.certificates",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 5
          }
        },
        {
          "field_path": "start_date",
          "entity_type": "employee.internal_experience",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 5
          }
        },
        {
          "field_path": "end_date",
          "entity_type": "employee.internal_experience",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 5
          }
        },
        {
          "field_path": "start_date",
          "entity_type": "employee.external_experience",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 5
          }
        },
        {
          "field_path": "end_date",
          "entity_type": "employee.external_experience",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 5
          }
        },
        {
          "field_path": "industry",
          "entity_type": "employee.external_experience",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_picklist_field": 5
          }
        },
        {
          "field_path": "businessTypeNav",
          "entity_type": "employee.external_experience",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "location_obj.countryNav",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "location_obj.stateNav",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "location_obj.cityNav",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_bfLevel2",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_bfLevel3",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_bfLevel4",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "employeeClass",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_IARFlag",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_JobFamily",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_jobSubFamily",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_LocAgnostic",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_workStyle",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_RelocSupp",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_SupportInternationalHiring",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "RequiredTravel",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "custReason",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_OptAgencyHiring",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "assessment",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_Brand",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "custJobGrade",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_Relative",
          "entity_type": "candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_FormerEE",
          "entity_type": "candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_phoneCountryCode",
          "entity_type": "candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_Adjustments",
          "entity_type": "candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "businessTypeNav",
          "entity_type": "candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "mobility_EP_TP_CountryNav",
          "entity_type": "candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "mobility_willingnessNav",
          "entity_type": "candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "mobility_mobRestrictionNav",
          "entity_type": "candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "mobility_EP_TP_RegionNav",
          "entity_type": "candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "at_risk",
          "entity_type": "candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "startDate",
          "entity_type": "candidate.education",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 5
          }
        },
        {
          "field_path": "endDate",
          "entity_type": "candidate.education",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 5
          }
        },
        {
          "field_path": "is_current",
          "entity_type": "candidate.education",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 5
          }
        },
        {
          "field_path": "industry",
          "entity_type": "candidate.experience",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 5
          }
        },
        {
          "field_path": "is_current",
          "entity_type": "candidate.experience",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 5
          }
        },
        {
          "field_path": "EthnicGroup",
          "entity_type": "application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_DisabilityConfidEmployer",
          "entity_type": "application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_sexualorient",
          "entity_type": "application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_Attestation",
          "entity_type": "application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "instrEligWork",
          "entity_type": "application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_soceco",
          "entity_type": "application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "cust_responseGenIdentity",
          "entity_type": "application",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "sourceperson",
          "entity_type": "candidate",
          "count": 5,
          "ats_system_stats": {
            "icims": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "legalEntity",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 2
          }
        },
        {
          "field_path": "ethnicity",
          "entity_type": "candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 3,
            "icims": 2
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 3
          }
        },
        {
          "field_path": "phoneNav",
          "entity_type": "employee",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "employmentNav/jobInfoNav",
          "entity_type": "employee",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "religion",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "icims": 2,
            "successfactors": 3
          },
          "transform_macro_stats": {
            "adapter_macros.extract_answer_id_from_qna": 2,
            "successfactor_macros.extract_app_qna_value": 3
          }
        },
        {
          "field_path": "jobInfoNav",
          "entity_type": "candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "Hispanic_Or_Latino_Clause",
          "entity_type": "add_application",
          "count": 5,
          "ats_system_stats": {
            "workday": 5
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 5
          }
        },
        {
          "field_path": "recruiterTeamGroup",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "preferred_last_name",
          "entity_type": "candidate",
          "count": 5,
          "ats_system_stats": {
            "successfactors": 2,
            "workday": 3
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 2,
            "adapter_macros.substitute_template": 3
          }
        },
        {
          "field_path": "question_answer_number",
          "entity_type": "candidate",
          "count": 5,
          "ats_system_stats": {
            "taleo": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "titleByManager",
          "entity_type": "position",
          "count": 5,
          "ats_system_stats": {
            "taleo": 5
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "last_activity_ts",
          "entity_type": "employee",
          "count": 4,
          "ats_system_stats": {
            "workday": 2,
            "successfactors": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 3,
            "successfactor_macros.extract_date_field": 1
          }
        },
        {
          "field_path": "experience",
          "entity_type": "update_employee",
          "count": 4,
          "ats_system_stats": {
            "orc": 4
          },
          "transform_macro_stats": {
            "orc_macros.post_data_payload": 4
          }
        },
        {
          "field_path": "publications",
          "entity_type": "update_employee",
          "count": 4,
          "ats_system_stats": {
            "orc": 4
          },
          "transform_macro_stats": {
            "orc_macros.post_data_payload": 4
          }
        },
        {
          "field_path": "patents",
          "entity_type": "update_employee",
          "count": 4,
          "ats_system_stats": {
            "orc": 4
          },
          "transform_macro_stats": {
            "orc_macros.post_data_payload": 4
          }
        },
        {
          "field_path": "awards",
          "entity_type": "update_employee",
          "count": 4,
          "ats_system_stats": {
            "orc": 4
          },
          "transform_macro_stats": {
            "orc_macros.post_data_payload": 4
          }
        },
        {
          "field_path": "skills",
          "entity_type": "update_employee",
          "count": 4,
          "ats_system_stats": {
            "orc": 4
          },
          "transform_macro_stats": {
            "orc_macros.post_data_payload": 4
          }
        },
        {
          "field_path": "education",
          "entity_type": "update_employee",
          "count": 4,
          "ats_system_stats": {
            "orc": 4
          },
          "transform_macro_stats": {
            "orc_macros.post_data_payload": 4
          }
        },
        {
          "field_path": "languages",
          "entity_type": "candidate",
          "count": 4,
          "ats_system_stats": {
            "successfactors": 4
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "location",
          "entity_type": "candidate.education",
          "count": 4,
          "ats_system_stats": {
            "successfactors": 4
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 2,
            "standard_macros.extract_path": 2
          }
        },
        {
          "field_path": "employment_type",
          "entity_type": "employee",
          "count": 4,
          "ats_system_stats": {
            "successfactors": 4
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "title",
          "entity_type": "candidate",
          "count": 4,
          "ats_system_stats": {
            "successfactors": 1,
            "icims": 3
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 1,
            "standard_macros.extract_path": 3
          }
        },
        {
          "field_path": "scorecards",
          "entity_type": "application",
          "count": 4,
          "ats_system_stats": {
            "kenexa": 4
          },
          "transform_macro_stats": {
            "kenexa_macros.extract_appl_scorecards_form_data": 4
          }
        },
        {
          "field_path": "location_state",
          "entity_type": "employee",
          "count": 4,
          "ats_system_stats": {
            "successfactors": 4
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 4
          }
        },
        {
          "field_path": "application_ts",
          "entity_type": "application",
          "count": 4,
          "ats_system_stats": {
            "cornerstone": 2,
            "successfactors": 2
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 4
          }
        },
        {
          "field_path": "id",
          "entity_type": "employee",
          "count": 4,
          "ats_system_stats": {
            "workday": 4
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 4
          }
        },
        {
          "field_path": "hired_ts",
          "entity_type": "employee",
          "count": 4,
          "ats_system_stats": {
            "workday": 4
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 3,
            "standard_macros.chained_macro": 1
          }
        },
        {
          "field_path": "company_description",
          "entity_type": "position",
          "count": 4,
          "ats_system_stats": {
            "icims": 2,
            "kenexa": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 2,
            "kenexa_macros.extract_answer_from_job_ques": 2
          }
        },
        {
          "field_path": "veteran_status",
          "entity_type": "add_candidate",
          "count": 3,
          "ats_system_stats": {
            "volkscience": 3
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 3
          }
        },
        {
          "field_path": "disability_status",
          "entity_type": "add_candidate",
          "count": 3,
          "ats_system_stats": {
            "volkscience": 3
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 3
          }
        },
        {
          "field_path": "races",
          "entity_type": "application",
          "count": 3,
          "ats_system_stats": {
            "successfactors": 3
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 3
          }
        },
        {
          "field_path": "preferred_first_name",
          "entity_type": "add_application",
          "count": 3,
          "ats_system_stats": {
            "icims": 3
          },
          "transform_macro_stats": {
            "adapter_macros.extract_answer_id_from_qna": 3
          }
        },
        {
          "field_path": "location_city",
          "entity_type": "add_application",
          "count": 3,
          "ats_system_stats": {
            "icims": 3
          },
          "transform_macro_stats": {
            "adapter_macros.extract_attr_and_default": 1,
            "adapter_macros.extract_answer_id_from_qna": 2
          }
        },
        {
          "field_path": "location_state",
          "entity_type": "add_application",
          "count": 3,
          "ats_system_stats": {
            "icims": 3
          },
          "transform_macro_stats": {
            "adapter_macros.extract_attr_and_default": 1,
            "adapter_macros.extract_answer_id_from_qna": 2
          }
        },
        {
          "field_path": "highest_education_level",
          "entity_type": "candidate",
          "count": 3,
          "ats_system_stats": {
            "icims": 3
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 3
          }
        },
        {
          "field_path": "email",
          "entity_type": "candidate",
          "count": 3,
          "ats_system_stats": {
            "icims": 3
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 3
          }
        },
        {
          "field_path": "status",
          "entity_type": "candidate",
          "count": 3,
          "ats_system_stats": {
            "icims": 3
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 3
          }
        },
        {
          "field_path": "bu",
          "entity_type": "position",
          "count": 3,
          "ats_system_stats": {
            "icims": 3
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 3
          }
        },
        {
          "field_path": "date_of_birth",
          "entity_type": "candidate",
          "count": 3,
          "ats_system_stats": {
            "taleo": 3
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 3
          }
        },
        {
          "field_path": "visa_statuses",
          "entity_type": "candidate",
          "count": 2,
          "ats_system_stats": {
            "taleo": 2
          },
          "transform_macro_stats": {
            "taleo_macros.extract_visa_statuses_from_questions": 2
          }
        },
        {
          "field_path": "address",
          "entity_type": "candidate",
          "count": 2,
          "ats_system_stats": {
            "successfactors": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 2
          }
        },
        {
          "field_path": "notes",
          "entity_type": "candidate",
          "count": 2,
          "ats_system_stats": {
            "successfactors": 2
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "visa_status",
          "entity_type": "candidate",
          "count": 2,
          "ats_system_stats": {
            "icims": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 2
          }
        },
        {
          "field_path": "source",
          "entity_type": "add_application",
          "count": 2,
          "ats_system_stats": {
            "icims": 2
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 2
          }
        },
        {
          "field_path": "location",
          "entity_type": "add_candidate",
          "count": 2,
          "ats_system_stats": {
            "volkscience": 2
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "contact_consent",
          "entity_type": "add_candidate",
          "count": 2,
          "ats_system_stats": {
            "volkscience": 2
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "company",
          "entity_type": "candidate.experience",
          "count": 2,
          "ats_system_stats": {
            "successfactors": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 2
          }
        },
        {
          "field_path": "location",
          "entity_type": "candidate.experience",
          "count": 2,
          "ats_system_stats": {
            "successfactors": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 2
          }
        },
        {
          "field_path": "languages",
          "entity_type": "add_candidate",
          "count": 2,
          "ats_system_stats": {
            "successfactors": 2
          },
          "transform_macro_stats": {
            "successfactor_macros.candidate_background_elements": 2
          }
        },
        {
          "field_path": "location_country",
          "entity_type": "add_application",
          "count": 2,
          "ats_system_stats": {
            "successfactors": 2
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_app_qna_value": 2
          }
        },
        {
          "field_path": "role_description",
          "entity_type": "role",
          "count": 2,
          "ats_system_stats": {
            "successfactors": 2
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 1,
            "standard_macros.extract_path": 1
          }
        },
        {
          "field_path": "source_user",
          "entity_type": "application",
          "count": 2,
          "ats_system_stats": {
            "orc": 2
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "source",
          "entity_type": "prospect_application",
          "count": 2,
          "ats_system_stats": {
            "successfactors": 2
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "posting_title",
          "entity_type": "position.posting",
          "count": 2,
          "ats_system_stats": {
            "taleo": 2
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "posting_id",
          "entity_type": "position",
          "count": 2,
          "ats_system_stats": {
            "successfactors": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 2
          }
        },
        {
          "field_path": "job_function",
          "entity_type": "employee",
          "count": 2,
          "ats_system_stats": {
            "successfactors": 2
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 2
          }
        },
        {
          "field_path": "last_review_rating",
          "entity_type": "employee",
          "count": 2,
          "ats_system_stats": {
            "successfactors": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 2
          }
        },
        {
          "field_path": "performance_ratings",
          "entity_type": "employee",
          "count": 2,
          "ats_system_stats": {
            "successfactors": 2
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 2
          }
        },
        {
          "field_path": "employee_criticality",
          "entity_type": "employee.employee_criticality",
          "count": 2,
          "ats_system_stats": {
            "successfactors": 2
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_standard_date_field": 2
          }
        },
        {
          "field_path": "display_job_id",
          "entity_type": "position",
          "count": 2,
          "ats_system_stats": {
            "greenhouse": 2
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 2
          }
        },
        {
          "field_path": "visa_status",
          "entity_type": "add_candidate",
          "count": 2,
          "ats_system_stats": {
            "workday": 2
          },
          "transform_macro_stats": {
            "workday_macros.extract_application_field_from_qna": 2
          }
        },
        {
          "field_path": "application_id",
          "entity_type": "application",
          "count": 1,
          "ats_system_stats": {
            "workday": 1
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 1
          }
        },
        {
          "field_path": "experience",
          "entity_type": "candidate",
          "count": 1,
          "ats_system_stats": {
            "successfactors": 1
          },
          "transform_macro_stats": {
            "successfactor_macros.extract_inside_work_experience": 1
          }
        },
        {
          "field_path": "position_criticality",
          "entity_type": "employee",
          "count": 1,
          "ats_system_stats": {
            "successfactors": 1
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 1
          }
        },
        {
          "field_path": "hiring_band",
          "entity_type": "employee",
          "count": 1,
          "ats_system_stats": {
            "workday": 1
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 1
          }
        },
        {
          "field_path": "contact_consent",
          "entity_type": "application",
          "count": 1,
          "ats_system_stats": {
            "workday": 1
          },
          "transform_macro_stats": {
            "workday_macros.extract_answer_from_ques": 1
          }
        },
        {
          "field_path": "userid",
          "entity_type": "candidate",
          "count": 1,
          "ats_system_stats": {
            "successfactors": 1
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "location_country",
          "entity_type": "application",
          "count": 1,
          "ats_system_stats": {
            "workday": 1
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 1
          }
        },
        {
          "field_path": "source_name",
          "entity_type": "add_candidate",
          "count": 1,
          "ats_system_stats": {
            "icims": 1
          },
          "transform_macro_stats": {
            "adapter_macros.extract_attr_and_default": 1
          }
        },
        {
          "field_path": "source_name",
          "entity_type": "candidate",
          "count": 1,
          "ats_system_stats": {
            "icims": 1
          },
          "transform_macro_stats": {
            "adapter_macros.extract_attr_and_default": 1
          }
        },
        {
          "field_path": "custom_info",
          "entity_type": "position",
          "count": 1,
          "ats_system_stats": {
            "successfactors": 1
          },
          "transform_macro_stats": {}
        },
        {
          "field_path": "certification",
          "entity_type": "add_candidate",
          "count": 1,
          "ats_system_stats": {
            "successfactors": 1
          },
          "transform_macro_stats": {
            "successfactor_macros.candidate_background_elements": 1
          }
        },
        {
          "field_path": "ats_user_groups",
          "entity_type": "position",
          "count": 1,
          "ats_system_stats": {
            "workday": 1
          },
          "transform_macro_stats": {
            "standard_macros.chained_macro": 1
          }
        },
        {
          "field_path": "contact_consent",
          "entity_type": "employee",
          "count": 1,
          "ats_system_stats": {
            "workday": 1
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 1
          }
        },
        {
          "field_path": "languages",
          "entity_type": "employee",
          "count": 1,
          "ats_system_stats": {
            "workday": 1
          },
          "transform_macro_stats": {
            "standard_macros.extract_path": 1
          }
        },
        {
          "field_path": "last_modified_ts",
          "entity_type": "employee",
          "count": 1,
          "ats_system_stats": {
            "workday": 1
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 1
          }
        },
        {
          "field_path": "location_city",
          "entity_type": "employee",
          "count": 1,
          "ats_system_stats": {
            "workday": 1
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 1
          }
        },
        {
          "field_path": "skills",
          "entity_type": "employee",
          "count": 1,
          "ats_system_stats": {
            "workday": 1
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 1
          }
        },
        {
          "field_path": "education",
          "entity_type": "employee",
          "count": 1,
          "ats_system_stats": {
            "workday": 1
          },
          "transform_macro_stats": {
            "workday_macros.extract_field_from_report": 1
          }
        },
        {
          "field_path": "disability_status",
          "entity_type": "add_application",
          "count": 1,
          "ats_system_stats": {
            "volkscience": 1
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 1
          }
        },
        {
          "field_path": "veteran_status",
          "entity_type": "add_application",
          "count": 1,
          "ats_system_stats": {
            "volkscience": 1
          },
          "transform_macro_stats": {
            "adapter_macros.substitute_template": 1
          }
        }
      ]
    },
    "entity_types": {
      "candidate": {
        "workflow": "sync",
        "base_entity_type": "candidate"
      },
      "position": {
        "workflow": "sync",
        "base_entity_type": "position"
      },
      "employee": {
        "workflow": "sync",
        "base_entity_type": "employee"
      },
      "application": {
        "workflow": "sync",
        "base_entity_type": "application"
      },
      "add_application": {
        "workflow": "write_back",
        "base_entity_type": "other"
      },
      "withdraw_application": {
        "workflow": "write_back",
        "base_entity_type": "other"
      },
      "update_application": {
        "workflow": "write_back",
        "base_entity_type": "other"
      },
      "add_candidate": {
        "workflow": "write_back",
        "base_entity_type": "other"
      },
      "add_candidate_note": {
        "workflow": "write_back",
        "base_entity_type": "other"
      },
      "change_application_stage": {
        "workflow": "write_back",
        "base_entity_type": "other"
      },
      "update_employee": {
        "workflow": "write_back",
        "base_entity_type": "employee"
      },
      "candidate.education": {
        "workflow": "sync",
        "base_entity_type": "candidate"
      },
      "position.question": {
        "workflow": "sync",
        "base_entity_type": "position"
      },
      "position.posting": {
        "workflow": "sync",
        "base_entity_type": "position"
      },
      "candidate.experience": {
        "workflow": "sync",
        "base_entity_type": "candidate"
      },
      "employee.external_experience": {
        "workflow": "sync",
        "base_entity_type": "employee"
      },
      "employee.internal_experience": {
        "workflow": "sync",
        "base_entity_type": "employee"
      },
      "employee.education": {
        "workflow": "sync",
        "base_entity_type": "employee"
      },
      "employee.mobility": {
        "workflow": "sync",
        "base_entity_type": "employee"
      },
      "employee.languages": {
        "workflow": "sync",
        "base_entity_type": "employee"
      },
      "employee.performance_ratings": {
        "workflow": "sync",
        "base_entity_type": "employee"
      },
      "employee.additional_fields": {
        "workflow": "sync",
        "base_entity_type": "employee"
      },
      "question": {
        "workflow": "sync",
        "base_entity_type": "other"
      }
    }
  }